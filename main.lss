
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000362  00800200  00002734  000027c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002734  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800562  00800562  00002b2a  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00002b2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002e6  00000000  00000000  00002baa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000186d  00000000  00000000  00002e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000053a  00000000  00000000  000046fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001262  00000000  00000000  00004c37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000240  00000000  00000000  00005e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005ec  00000000  00000000  000060dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000059a  00000000  00000000  000066c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 17 04 	jmp	0x82e	; 0x82e <__ctors_end>
       4:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
       8:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
       c:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      10:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      14:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      18:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      1c:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      20:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      24:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      28:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      2c:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      30:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      34:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      38:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      3c:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      40:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      44:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      48:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      4c:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      50:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      54:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      58:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      5c:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      60:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      64:	0c 94 9c 07 	jmp	0xf38	; 0xf38 <__vector_25>
      68:	0c 94 0c 08 	jmp	0x1018	; 0x1018 <__vector_26>
      6c:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      70:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      74:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      78:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      7c:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      80:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      84:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      88:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      8c:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      90:	0c 94 d4 07 	jmp	0xfa8	; 0xfa8 <__vector_36>
      94:	0c 94 63 08 	jmp	0x10c6	; 0x10c6 <__vector_37>
      98:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      9c:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      a0:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      a4:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      a8:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      ac:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      b0:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      b4:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      b8:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      bc:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      c0:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      c4:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      c8:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      cc:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      d0:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      d4:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      d8:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      dc:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>
      e0:	0c 94 38 04 	jmp	0x870	; 0x870 <__bad_interrupt>

000000e4 <__c.1769>:
      e4:	4d 61 74 65 44 65 61 6c 65 72 20 69 73 20 75 70     MateDealer is up
      f4:	20 61 6e 64 20 72 75 6e 6e 69 6e 67 0d 0a 00         and running...

00000103 <__c.2025>:
     103:	45 72 72 6f 72 3a 20 75 6e 6b 6e 6f 77 6e 20 73     Error: unknown s
     113:	75 62 63 6f 6d 6d 61 6e 64 20 5b 52 45 41 44 45     ubcommand [READE
     123:	52 5d 0d 0a 00                                      R]...

00000128 <__c.2022>:
     128:	45 72 72 6f 72 3a 20 63 68 65 63 6b 73 75 6d 20     Error: checksum 
     138:	65 72 72 6f 72 20 5b 52 45 41 44 45 52 5d 0d 0a     error [READER]..
	...

00000149 <__c.2019>:
     149:	45 72 72 6f 72 3a 20 63 68 65 63 6b 73 75 6d 20     Error: checksum 
     159:	65 72 72 6f 72 20 5b 52 45 41 44 45 52 5d 0d 0a     error [READER]..
	...

0000016a <__c.2015>:
     16a:	45 72 72 6f 72 3a 20 63 68 65 63 6b 73 75 6d 20     Error: checksum 
     17a:	65 72 72 6f 72 20 5b 52 45 41 44 45 52 5d 0d 0a     error [READER]..
	...

0000018b <__c.1963>:
     18b:	73 65 73 73 69 6f 6e 2d 63 6f 6d 70 6c 65 74 65     session-complete
     19b:	0d 0a 00                                            ...

0000019e <__c.1961>:
     19e:	45 72 72 6f 72 3a 20 69 6e 76 61 6c 69 64 20 63     Error: invalid c
     1ae:	68 65 63 6b 73 75 6d 20 5b 56 45 4e 44 5d 0d 0a     hecksum [VEND]..
	...

000001bf <__c.1958>:
     1bf:	56 46 41 49 4c 0d 0a 00                             VFAIL...

000001c7 <__c.1956>:
     1c7:	45 72 72 6f 72 3a 20 69 6e 76 61 6c 69 64 20 63     Error: invalid c
     1d7:	68 65 63 6b 73 75 6d 20 5b 56 45 4e 44 5d 0d 0a     hecksum [VEND]..
	...

000001e8 <__c.1953>:
     1e8:	45 72 72 6f 72 3a 20 69 6e 76 61 6c 69 64 20 63     Error: invalid c
     1f8:	68 65 63 6b 73 75 6d 20 5b 56 45 4e 44 5d 0d 0a     hecksum [VEND]..
	...

00000209 <__c.1946>:
     209:	56 43 41 4e 0d 0a 00                                VCAN...

00000210 <__c.1944>:
     210:	45 72 72 6f 72 3a 20 69 6e 76 61 6c 69 64 20 63     Error: invalid c
     220:	68 65 63 6b 73 75 6d 20 5b 56 45 4e 44 5d 0d 0a     hecksum [VEND]..
	...

00000231 <__c.1941>:
     231:	45 72 72 6f 72 3a 20 69 6e 76 61 6c 69 64 20 63     Error: invalid c
     241:	68 65 63 6b 73 75 6d 20 5b 56 45 4e 44 5d 0d 0a     hecksum [VEND]..
	...

00000252 <__c.1886>:
     252:	45 72 72 6f 72 3a 20 6e 6f 20 41 43 4b 20 72 65     Error: no ACK re
     262:	63 65 69 76 65 64 20 6f 6e 20 5b 52 45 50 4c 59     ceived on [REPLY
     272:	20 43 41 4e 43 45 4c 45 44 5d 0d 0a 00               CANCELED]...

0000027f <__c.1883>:
     27f:	45 72 72 6f 72 3a 20 6e 6f 20 41 43 4b 20 72 65     Error: no ACK re
     28f:	63 65 69 76 65 64 20 6f 6e 20 5b 45 4e 44 20 53     ceived on [END S
     29f:	45 53 53 49 4f 4e 5d 0d 0a 00                       ESSION]...

000002a9 <__c.1880>:
     2a9:	45 72 72 6f 72 3a 20 6e 6f 20 41 43 4b 20 72 65     Error: no ACK re
     2b9:	63 65 69 76 65 64 20 6f 6e 20 5b 56 45 4e 44 20     ceived on [VEND 
     2c9:	44 45 4e 59 5d 0d 0a 00                             DENY]...

000002d1 <__c.1877>:
     2d1:	45 72 72 6f 72 3a 20 6e 6f 20 41 43 4b 20 72 65     Error: no ACK re
     2e1:	63 65 69 76 65 64 20 6f 6e 20 5b 56 45 4e 44 20     ceived on [VEND 
     2f1:	41 50 50 52 4f 56 45 5d 0d 0a 00                    APPROVE]...

000002fc <__c.1874>:
     2fc:	45 72 72 6f 72 3a 20 6e 6f 20 41 43 4b 20 72 65     Error: no ACK re
     30c:	63 65 69 76 65 64 20 6f 6e 20 5b 53 45 53 53 49     ceived on [SESSI
     31c:	4f 4e 20 43 41 4e 43 45 4c 20 52 45 51 5d 0d 0a     ON CANCEL REQ]..
	...

0000032d <__c.1871>:
     32d:	45 72 72 6f 72 3a 20 6e 6f 20 41 43 4b 20 72 65     Error: no ACK re
     33d:	63 65 69 76 65 64 20 6f 6e 20 5b 53 54 41 52 54     ceived on [START
     34d:	20 53 45 53 53 49 4f 4e 5d 0d 0a 00                  SESSION]...

00000359 <__c.1865>:
     359:	45 72 72 6f 72 3a 20 6e 6f 20 41 43 4b 20 72 65     Error: no ACK re
     369:	63 65 69 76 65 64 20 6f 6e 20 5b 4a 55 53 54 20     ceived on [JUST 
     379:	52 45 53 45 54 5d 0d 0a 00                          RESET]...

00000382 <__c.1860>:
     382:	45 72 72 6f 72 3a 20 49 6e 76 61 6c 69 64 20 63     Error: Invalid c
     392:	68 65 63 6b 73 75 6d 20 5b 50 6f 6c 6c 5d 0d 0a     hecksum [Poll]..
	...

000003a3 <__c.1791>:
     3a3:	45 72 72 6f 72 3a 20 75 6e 6b 6e 6f 77 6e 20 73     Error: unknown s
     3b3:	75 62 63 6f 6d 6d 61 6e 64 20 5b 53 45 54 55 50     ubcommand [SETUP
     3c3:	5d 0d 0a 00                                         ]...

000003c7 <__c.1788>:
     3c7:	45 72 72 6f 72 3a 20 6e 6f 20 41 43 4b 20 72 65     Error: no ACK re
     3d7:	63 65 69 76 65 64 20 6f 6e 20 5b 53 45 54 55 50     ceived on [SETUP
     3e7:	5d 00                                               ].

000003e9 <__c.1783>:
     3e9:	45 72 72 6f 72 3a 20 69 6e 76 61 6c 69 64 20 63     Error: invalid c
     3f9:	68 65 63 6b 73 75 6d 20 5b 53 45 54 55 50 5d 0d     hecksum [SETUP].
     409:	0a 00                                               ..

0000040b <__c.1769>:
     40b:	45 72 72 6f 72 3a 20 69 6e 76 61 6c 69 64 20 63     Error: invalid c
     41b:	68 65 63 6b 73 75 6d 20 66 6f 72 20 5b 52 45 53     hecksum for [RES
     42b:	45 54 5d 0d 0a 00                                   ET]...

00000431 <__c.2061>:
     431:	45 72 72 6f 72 3a 20 4d 61 74 65 44 65 61 6c 65     Error: MateDeale
     441:	72 20 69 73 20 6e 6f 74 20 69 6e 20 61 20 73 75     r is not in a su
     451:	69 74 61 62 6c 65 20 73 74 61 74 65 20 74 6f 20     itable state to 
     461:	63 61 6e 63 65 6c 20 61 20 73 65 73 73 69 6f 6e     cancel a session
     471:	0d 0a 00                                            ...

00000474 <__c.2055>:
     474:	45 72 72 6f 72 3a 20 4d 61 74 65 44 65 61 6c 65     Error: MateDeale
     484:	72 20 69 73 20 6e 6f 74 20 69 6e 20 61 20 73 75     r is not in a su
     494:	69 74 61 62 6c 65 20 73 74 61 74 65 20 74 6f 20     itable state to 
     4a4:	64 65 6e 79 20 61 20 76 65 6e 64 0d 0a 00           deny a vend...

000004b2 <__c.2047>:
     4b2:	45 72 72 6f 72 3a 20 4d 61 74 65 44 65 61 6c 65     Error: MateDeale
     4c2:	72 20 69 73 20 6e 6f 74 20 69 6e 20 61 20 73 75     r is not in a su
     4d2:	69 74 61 62 6c 65 20 73 74 61 74 65 20 74 6f 20     itable state to 
     4e2:	61 70 70 72 6f 76 65 20 61 20 76 65 6e 64 0d 0a     approve a vend..
	...

000004f3 <__c.2038>:
     4f3:	45 72 72 6f 72 3a 20 4d 61 74 65 44 65 61 6c 65     Error: MateDeale
     503:	72 20 6e 6f 74 20 72 65 61 64 79 20 66 6f 72 20     r not ready for 
     513:	61 20 73 65 73 73 69 6f 6e 0d 0a 00                 a session...

0000051f <__c.2036>:
     51f:	45 72 72 6f 72 3a 20 53 65 73 73 69 6f 6e 20 69     Error: Session i
     52f:	73 20 61 6c 72 65 61 64 79 20 72 75 6e 6e 69 6e     s already runnin
     53f:	67 0d 0a 00                                         g...

00000543 <__c.2028>:
     543:	4e 45 47 41 54 49 56 45 56 45 4e 44 0d 0a 00        NEGATIVEVEND...

00000552 <__c.2025>:
     552:	52 45 56 41 4c 55 45 0d 0a 00                       REVALUE...

0000055c <__c.2022>:
     55c:	56 45 4e 44 0d 0a 00                                VEND...

00000563 <__c.2019>:
     563:	53 45 53 53 49 4f 4e 49 44 4c 45 0d 0a 00           SESSIONIDLE...

00000571 <__c.2016>:
     571:	45 4e 41 42 4c 45 44 0d 0a 00                       ENABLED...

0000057b <__c.2013>:
     57b:	44 49 53 41 42 4c 45 44 0d 0a 00                    DISABLED...

00000586 <__c.2009>:
     586:	49 4e 41 43 54 49 56 45 0d 0a 00                    INACTIVE...

00000591 <__c.1992>:
     591:	45 72 72 6f 72 3a 20 53 65 74 75 70 20 6e 6f 74     Error: Setup not
     5a1:	20 79 65 74 20 63 6f 6d 70 6c 65 74 65 64 21 0d      yet completed!.
     5b1:	0a 00                                               ..

000005b3 <__c.1990>:
     5b3:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     5c3:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     5d3:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 0d     ---------------.
     5e3:	0a 00                                               ..

000005e5 <__c.1988>:
     5e5:	23 23 20 20 20 20 56 4d 43 20 70 72 69 63 65 20     ##    VMC price 
     5f5:	72 61 6e 67 65 20 20 20 20 20 23 23 0d 0a 00        range     ##...

00000604 <__c.1986>:
     604:	23 23 20 56 4d 43 20 63 6f 6e 66 69 67 75 72 61     ## VMC configura
     614:	74 69 6f 6e 20 64 61 74 61 20 23 23 0d 0a 00        tion data ##...

00000623 <__c.1984>:
     623:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     633:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     643:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 0d     ---------------.
     653:	0a 00                                               ..

00000655 <__c.1978>:
     655:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     665:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     675:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 0d     ---------------.
     685:	0a 00                                               ..

00000687 <__c.1976>:
     687:	64 65 6e 79 2d 76 65 6e 64 3a 0d 0a 20 20 20 64     deny-vend:..   d
     697:	65 6e 69 65 73 20 61 20 76 65 6e 64 20 72 65 71     enies a vend req
     6a7:	75 65 73 74 2e 0d 0a 00                             uest....

000006af <__c.1974>:
     6af:	61 70 70 72 6f 76 65 2d 76 65 6e 64 20 3c 76 65     approve-vend <ve
     6bf:	6e 64 2d 61 6d 6f 75 6e 74 3e 3a 0d 0a 20 20 20     nd-amount>:..   
     6cf:	61 70 70 72 6f 76 65 73 20 61 20 76 65 6e 64 20     approves a vend 
     6df:	72 65 71 75 65 73 74 20 77 69 74 68 20 3c 76 65     request with <ve
     6ef:	6e 64 2d 61 6d 6f 75 6e 74 3e 20 45 75 72 6f 20     nd-amount> Euro 
     6ff:	43 65 6e 74 73 2e 0d 0a 00                          Cents....

00000708 <__c.1972>:
     708:	73 74 61 72 74 2d 73 65 73 73 69 6f 6e 20 3c 66     start-session <f
     718:	75 6e 64 73 3e 3a 0d 0a 20 20 20 73 74 61 72 74     unds>:..   start
     728:	73 20 61 20 73 65 73 73 69 6f 6e 20 77 69 74 68     s a session with
     738:	20 3c 66 75 6e 64 73 3e 20 45 75 72 6f 20 43 65      <funds> Euro Ce
     748:	6e 74 73 2e 0d 0a 00                                nts....

0000074f <__c.1970>:
     74f:	6d 64 62 2d 73 74 61 74 65 3a 0d 0a 20 20 20 64     mdb-state:..   d
     75f:	69 73 70 6c 61 79 73 20 74 68 65 20 63 75 72 72     isplays the curr
     76f:	65 6e 74 20 4d 44 42 20 73 74 61 74 65 2e 0d 0a     ent MDB state...
	...

00000780 <__c.1968>:
     780:	69 6e 66 6f 3a 0d 0a 20 20 20 73 68 6f 77 73 20     info:..   shows 
     790:	74 68 65 20 56 4d 43 20 69 6e 66 6f 73 20 74 72     the VMC infos tr
     7a0:	61 6e 73 66 65 72 65 64 20 64 75 72 69 6e 67 20     ansfered during 
     7b0:	74 68 65 20 73 65 74 75 70 20 70 72 6f 63 65 73     the setup proces
     7c0:	73 0d 0a 00                                         s...

000007c4 <__c.1966>:
     7c4:	72 65 73 65 74 3a 0d 0a 20 20 20 72 65 73 65 74     reset:..   reset
     7d4:	20 74 68 65 20 41 72 64 75 69 6e 6f 0d 0a 00         the Arduino...

000007e3 <__c.1964>:
     7e3:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     7f3:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d     ----------------
     803:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 0d     ---------------.
     813:	0a 00                                               ..

00000815 <__c.1945>:
     815:	45 72 72 6f 72 3a 20 55 6e 6b 6e 6f 77 6e 20 63     Error: Unknown c
     825:	6f 6d 6d 61 6e 64 0d 0a 00                          ommand...

0000082e <__ctors_end>:
     82e:	11 24       	eor	r1, r1
     830:	1f be       	out	0x3f, r1	; 63
     832:	cf ef       	ldi	r28, 0xFF	; 255
     834:	d1 e2       	ldi	r29, 0x21	; 33
     836:	de bf       	out	0x3e, r29	; 62
     838:	cd bf       	out	0x3d, r28	; 61
     83a:	00 e0       	ldi	r16, 0x00	; 0
     83c:	0c bf       	out	0x3c, r16	; 60

0000083e <__do_copy_data>:
     83e:	15 e0       	ldi	r17, 0x05	; 5
     840:	a0 e0       	ldi	r26, 0x00	; 0
     842:	b2 e0       	ldi	r27, 0x02	; 2
     844:	e4 e3       	ldi	r30, 0x34	; 52
     846:	f7 e2       	ldi	r31, 0x27	; 39
     848:	00 e0       	ldi	r16, 0x00	; 0
     84a:	0b bf       	out	0x3b, r16	; 59
     84c:	02 c0       	rjmp	.+4      	; 0x852 <__do_copy_data+0x14>
     84e:	07 90       	elpm	r0, Z+
     850:	0d 92       	st	X+, r0
     852:	a2 36       	cpi	r26, 0x62	; 98
     854:	b1 07       	cpc	r27, r17
     856:	d9 f7       	brne	.-10     	; 0x84e <__do_copy_data+0x10>

00000858 <__do_clear_bss>:
     858:	15 e0       	ldi	r17, 0x05	; 5
     85a:	a2 e6       	ldi	r26, 0x62	; 98
     85c:	b5 e0       	ldi	r27, 0x05	; 5
     85e:	01 c0       	rjmp	.+2      	; 0x862 <.do_clear_bss_start>

00000860 <.do_clear_bss_loop>:
     860:	1d 92       	st	X+, r1

00000862 <.do_clear_bss_start>:
     862:	a7 3a       	cpi	r26, 0xA7	; 167
     864:	b1 07       	cpc	r27, r17
     866:	e1 f7       	brne	.-8      	; 0x860 <.do_clear_bss_loop>
     868:	0e 94 3a 04 	call	0x874	; 0x874 <main>
     86c:	0c 94 98 13 	jmp	0x2730	; 0x2730 <_exit>

00000870 <__bad_interrupt>:
     870:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000874 <main>:
#include <stdint.h>
#include "usart.h"
#include "mdb.h"
#include "uplink.h"

int main(void) {
     874:	ef 92       	push	r14
     876:	0f 93       	push	r16

    setup_usart(0,38400,8,'N',1);
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	40 e0       	ldi	r20, 0x00	; 0
     87c:	56 e9       	ldi	r21, 0x96	; 150
     87e:	60 e0       	ldi	r22, 0x00	; 0
     880:	70 e0       	ldi	r23, 0x00	; 0
     882:	28 e0       	ldi	r18, 0x08	; 8
     884:	0e e4       	ldi	r16, 0x4E	; 78
     886:	ee 24       	eor	r14, r14
     888:	e3 94       	inc	r14
     88a:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <setup_usart>
    setup_usart(1,9600,9,'N',1);
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	40 e8       	ldi	r20, 0x80	; 128
     892:	55 e2       	ldi	r21, 0x25	; 37
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	29 e0       	ldi	r18, 0x09	; 9
     89a:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <setup_usart>
    
    sei();
     89e:	78 94       	sei
    
    send_str_p(0,PSTR("MateDealer is up and running\r\n"));
     8a0:	80 e0       	ldi	r24, 0x00	; 0
     8a2:	64 ee       	ldi	r22, 0xE4	; 228
     8a4:	70 e0       	ldi	r23, 0x00	; 0
     8a6:	0e 94 28 07 	call	0xe50	; 0xe50 <send_str_p>
       
    // Main Loop
    while(1) {
        mdb_cmd_handler();
     8aa:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <mdb_cmd_handler>
        uplink_cmd_handler();
     8ae:	0e 94 05 10 	call	0x200a	; 0x200a <uplink_cmd_handler>
     8b2:	fb cf       	rjmp	.-10     	; 0x8aa <main+0x36>

000008b4 <setup_usart>:
#if USART3 == 1
    { { { {}, 0, 0 }, { {}, 0, 0 } }, &UBRR3H, &UBRR3L, &UCSR3B, &UCSR3C }
#endif
};
 
void setup_usart(uint8_t usart_number, uint32_t baudrate, uint8_t framelength, uint8_t parity, uint8_t stopbits) {
     8b4:	af 92       	push	r10
     8b6:	bf 92       	push	r11
     8b8:	cf 92       	push	r12
     8ba:	df 92       	push	r13
     8bc:	ef 92       	push	r14
     8be:	ff 92       	push	r15
     8c0:	0f 93       	push	r16
     8c2:	1f 93       	push	r17
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
     8c8:	f8 2e       	mov	r15, r24
     8ca:	5a 01       	movw	r10, r20
     8cc:	6b 01       	movw	r12, r22
     8ce:	12 2f       	mov	r17, r18
 
    /* calculate and set the baudrate */
    uint16_t baud = (F_CPU / 8 / baudrate - 1) / 2; 
     8d0:	60 e8       	ldi	r22, 0x80	; 128
     8d2:	74 e8       	ldi	r23, 0x84	; 132
     8d4:	8e e1       	ldi	r24, 0x1E	; 30
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	a6 01       	movw	r20, r12
     8da:	95 01       	movw	r18, r10
     8dc:	0e 94 4e 10 	call	0x209c	; 0x209c <__udivmodsi4>
     8e0:	21 50       	subi	r18, 0x01	; 1
     8e2:	30 40       	sbci	r19, 0x00	; 0
     8e4:	40 40       	sbci	r20, 0x00	; 0
     8e6:	50 40       	sbci	r21, 0x00	; 0
     8e8:	56 95       	lsr	r21
     8ea:	47 95       	ror	r20
     8ec:	37 95       	ror	r19
     8ee:	27 95       	ror	r18
    *usart[usart_number].ubrrh = (uint8_t) (baud >> 8);
     8f0:	4f 2d       	mov	r20, r15
     8f2:	50 e0       	ldi	r21, 0x00	; 0
     8f4:	8c e0       	ldi	r24, 0x0C	; 12
     8f6:	91 e0       	ldi	r25, 0x01	; 1
     8f8:	48 9f       	mul	r20, r24
     8fa:	d0 01       	movw	r26, r0
     8fc:	49 9f       	mul	r20, r25
     8fe:	b0 0d       	add	r27, r0
     900:	58 9f       	mul	r21, r24
     902:	b0 0d       	add	r27, r0
     904:	11 24       	eor	r1, r1
     906:	a0 50       	subi	r26, 0x00	; 0
     908:	be 4f       	sbci	r27, 0xFE	; 254
     90a:	ac 5f       	subi	r26, 0xFC	; 252
     90c:	be 4f       	sbci	r27, 0xFE	; 254
     90e:	ed 91       	ld	r30, X+
     910:	fd 91       	ld	r31, X+
     912:	30 83       	st	Z, r19
    *usart[usart_number].ubrrl = (uint8_t) (baud & 0x0ff);
     914:	ed 91       	ld	r30, X+
     916:	fc 91       	ld	r31, X
     918:	11 97       	sbiw	r26, 0x01	; 1
     91a:	a6 50       	subi	r26, 0x06	; 6
     91c:	b1 40       	sbci	r27, 0x01	; 1
     91e:	20 83       	st	Z, r18
    
    /* activate transmitter, receiver and receiver interrupt */
    *usart[usart_number].ucsrb |= (1 << 3); /* TXEN */
     920:	ed 01       	movw	r28, r26
     922:	c8 5f       	subi	r28, 0xF8	; 248
     924:	de 4f       	sbci	r29, 0xFE	; 254
     926:	e8 81       	ld	r30, Y
     928:	f9 81       	ldd	r31, Y+1	; 0x01
     92a:	80 81       	ld	r24, Z
     92c:	88 60       	ori	r24, 0x08	; 8
     92e:	80 83       	st	Z, r24
    *usart[usart_number].ucsrb |= (1 << 4); /* RXEN */
     930:	e8 81       	ld	r30, Y
     932:	f9 81       	ldd	r31, Y+1	; 0x01
     934:	80 81       	ld	r24, Z
     936:	80 61       	ori	r24, 0x10	; 16
     938:	80 83       	st	Z, r24
    *usart[usart_number].ucsrb |= (1 << 7); /* RXCIE */
     93a:	e8 81       	ld	r30, Y
     93c:	f9 81       	ldd	r31, Y+1	; 0x01
     93e:	80 81       	ld	r24, Z
     940:	80 68       	ori	r24, 0x80	; 128
     942:	80 83       	st	Z, r24
    
    /* set framelength bits */
    switch(framelength) {
     944:	17 30       	cpi	r17, 0x07	; 7
     946:	21 f1       	breq	.+72     	; 0x990 <setup_usart+0xdc>
     948:	18 30       	cpi	r17, 0x08	; 8
     94a:	30 f4       	brcc	.+12     	; 0x958 <setup_usart+0xa4>
     94c:	15 30       	cpi	r17, 0x05	; 5
     94e:	51 f0       	breq	.+20     	; 0x964 <setup_usart+0xb0>
     950:	16 30       	cpi	r17, 0x06	; 6
     952:	09 f0       	breq	.+2      	; 0x956 <setup_usart+0xa2>
     954:	4b c0       	rjmp	.+150    	; 0x9ec <setup_usart+0x138>
     956:	0e c0       	rjmp	.+28     	; 0x974 <setup_usart+0xc0>
     958:	18 30       	cpi	r17, 0x08	; 8
     95a:	11 f1       	breq	.+68     	; 0x9a0 <setup_usart+0xec>
     95c:	19 30       	cpi	r17, 0x09	; 9
     95e:	09 f0       	breq	.+2      	; 0x962 <setup_usart+0xae>
     960:	45 c0       	rjmp	.+138    	; 0x9ec <setup_usart+0x138>
     962:	31 c0       	rjmp	.+98     	; 0x9c6 <setup_usart+0x112>
    case 5:
        *usart[usart_number].ucsrc &= ~(1 << 1); /* UCSZ0 = 0 */
     964:	fd 01       	movw	r30, r26
     966:	e6 5f       	subi	r30, 0xF6	; 246
     968:	fe 4f       	sbci	r31, 0xFE	; 254
     96a:	a0 81       	ld	r26, Z
     96c:	b1 81       	ldd	r27, Z+1	; 0x01
     96e:	8c 91       	ld	r24, X
     970:	8d 7f       	andi	r24, 0xFD	; 253
     972:	07 c0       	rjmp	.+14     	; 0x982 <setup_usart+0xce>
        *usart[usart_number].ucsrc &= ~(1 << 2); /* UCSZ1 = 0 */
        *usart[usart_number].ucsrb &= ~(1 << 2); /* UCSZ2 = 0 */
    break;
    case 6:
        *usart[usart_number].ucsrc |=  (1 << 1); /* UCSZ0 = 1 */
     974:	fd 01       	movw	r30, r26
     976:	e6 5f       	subi	r30, 0xF6	; 246
     978:	fe 4f       	sbci	r31, 0xFE	; 254
     97a:	a0 81       	ld	r26, Z
     97c:	b1 81       	ldd	r27, Z+1	; 0x01
     97e:	8c 91       	ld	r24, X
     980:	82 60       	ori	r24, 0x02	; 2
     982:	8c 93       	st	X, r24
        *usart[usart_number].ucsrc &= ~(1 << 2); /* UCSZ1 = 0 */
     984:	01 90       	ld	r0, Z+
     986:	f0 81       	ld	r31, Z
     988:	e0 2d       	mov	r30, r0
     98a:	80 81       	ld	r24, Z
     98c:	8b 7f       	andi	r24, 0xFB	; 251
     98e:	15 c0       	rjmp	.+42     	; 0x9ba <setup_usart+0x106>
        *usart[usart_number].ucsrb &= ~(1 << 2); /* UCSZ2 = 0 */
    break;
    case 7:
        *usart[usart_number].ucsrc &= ~(1 << 1); /* UCSZ0 = 0 */
     990:	fd 01       	movw	r30, r26
     992:	e6 5f       	subi	r30, 0xF6	; 246
     994:	fe 4f       	sbci	r31, 0xFE	; 254
     996:	a0 81       	ld	r26, Z
     998:	b1 81       	ldd	r27, Z+1	; 0x01
     99a:	8c 91       	ld	r24, X
     99c:	8d 7f       	andi	r24, 0xFD	; 253
     99e:	07 c0       	rjmp	.+14     	; 0x9ae <setup_usart+0xfa>
        *usart[usart_number].ucsrc |=  (1 << 2); /* UCSZ1 = 1 */
        *usart[usart_number].ucsrb &= ~(1 << 2); /* UCSZ2 = 0 */
    break;
    case 8:
        *usart[usart_number].ucsrc |=  (1 << 1); /* UCSZ0 = 1 */
     9a0:	fd 01       	movw	r30, r26
     9a2:	e6 5f       	subi	r30, 0xF6	; 246
     9a4:	fe 4f       	sbci	r31, 0xFE	; 254
     9a6:	a0 81       	ld	r26, Z
     9a8:	b1 81       	ldd	r27, Z+1	; 0x01
     9aa:	8c 91       	ld	r24, X
     9ac:	82 60       	ori	r24, 0x02	; 2
     9ae:	8c 93       	st	X, r24
        *usart[usart_number].ucsrc |=  (1 << 2); /* UCSZ1 = 1 */
     9b0:	01 90       	ld	r0, Z+
     9b2:	f0 81       	ld	r31, Z
     9b4:	e0 2d       	mov	r30, r0
     9b6:	80 81       	ld	r24, Z
     9b8:	84 60       	ori	r24, 0x04	; 4
     9ba:	80 83       	st	Z, r24
        *usart[usart_number].ucsrb &= ~(1 << 2); /* UCSZ2 = 0 */
     9bc:	e8 81       	ld	r30, Y
     9be:	f9 81       	ldd	r31, Y+1	; 0x01
     9c0:	80 81       	ld	r24, Z
     9c2:	8b 7f       	andi	r24, 0xFB	; 251
     9c4:	12 c0       	rjmp	.+36     	; 0x9ea <setup_usart+0x136>
    break;
    case 9:
        *usart[usart_number].ucsrc |=  (1 << 1); /* UCSZ0 = 1 */
     9c6:	fd 01       	movw	r30, r26
     9c8:	e6 5f       	subi	r30, 0xF6	; 246
     9ca:	fe 4f       	sbci	r31, 0xFE	; 254
     9cc:	a0 81       	ld	r26, Z
     9ce:	b1 81       	ldd	r27, Z+1	; 0x01
     9d0:	8c 91       	ld	r24, X
     9d2:	82 60       	ori	r24, 0x02	; 2
     9d4:	8c 93       	st	X, r24
        *usart[usart_number].ucsrc |=  (1 << 2); /* UCSZ1 = 1 */
     9d6:	01 90       	ld	r0, Z+
     9d8:	f0 81       	ld	r31, Z
     9da:	e0 2d       	mov	r30, r0
     9dc:	80 81       	ld	r24, Z
     9de:	84 60       	ori	r24, 0x04	; 4
     9e0:	80 83       	st	Z, r24
        *usart[usart_number].ucsrb |=  (1 << 2); /* UCSZ2 = 1 */
     9e2:	e8 81       	ld	r30, Y
     9e4:	f9 81       	ldd	r31, Y+1	; 0x01
     9e6:	80 81       	ld	r24, Z
     9e8:	84 60       	ori	r24, 0x04	; 4
     9ea:	80 83       	st	Z, r24
    break;
    }
    
    /* set bits for parity */
    switch(parity) {
     9ec:	0e 34       	cpi	r16, 0x4E	; 78
     9ee:	29 f0       	breq	.+10     	; 0x9fa <setup_usart+0x146>
     9f0:	0f 34       	cpi	r16, 0x4F	; 79
     9f2:	49 f1       	breq	.+82     	; 0xa46 <setup_usart+0x192>
     9f4:	05 34       	cpi	r16, 0x45	; 69
     9f6:	e9 f5       	brne	.+122    	; 0xa72 <setup_usart+0x1be>
     9f8:	16 c0       	rjmp	.+44     	; 0xa26 <setup_usart+0x172>
    case 'N': /* None */
        *usart[usart_number].ucsrc &= ~(1 << 4); /* UPM0 = 0 */
     9fa:	8c e0       	ldi	r24, 0x0C	; 12
     9fc:	91 e0       	ldi	r25, 0x01	; 1
     9fe:	48 9f       	mul	r20, r24
     a00:	f0 01       	movw	r30, r0
     a02:	49 9f       	mul	r20, r25
     a04:	f0 0d       	add	r31, r0
     a06:	58 9f       	mul	r21, r24
     a08:	f0 0d       	add	r31, r0
     a0a:	11 24       	eor	r1, r1
     a0c:	e6 5f       	subi	r30, 0xF6	; 246
     a0e:	fc 4f       	sbci	r31, 0xFC	; 252
     a10:	a0 81       	ld	r26, Z
     a12:	b1 81       	ldd	r27, Z+1	; 0x01
     a14:	8c 91       	ld	r24, X
     a16:	8f 7e       	andi	r24, 0xEF	; 239
     a18:	8c 93       	st	X, r24
        *usart[usart_number].ucsrc &= ~(1 << 5); /* UPM1 = 0 */
     a1a:	01 90       	ld	r0, Z+
     a1c:	f0 81       	ld	r31, Z
     a1e:	e0 2d       	mov	r30, r0
     a20:	80 81       	ld	r24, Z
     a22:	8f 7d       	andi	r24, 0xDF	; 223
     a24:	25 c0       	rjmp	.+74     	; 0xa70 <setup_usart+0x1bc>
    break;
    case 'E': /* Even */
        *usart[usart_number].ucsrc &= ~(1 << 4); /* UPM0 = 0 */
     a26:	8c e0       	ldi	r24, 0x0C	; 12
     a28:	91 e0       	ldi	r25, 0x01	; 1
     a2a:	48 9f       	mul	r20, r24
     a2c:	f0 01       	movw	r30, r0
     a2e:	49 9f       	mul	r20, r25
     a30:	f0 0d       	add	r31, r0
     a32:	58 9f       	mul	r21, r24
     a34:	f0 0d       	add	r31, r0
     a36:	11 24       	eor	r1, r1
     a38:	e6 5f       	subi	r30, 0xF6	; 246
     a3a:	fc 4f       	sbci	r31, 0xFC	; 252
     a3c:	a0 81       	ld	r26, Z
     a3e:	b1 81       	ldd	r27, Z+1	; 0x01
     a40:	8c 91       	ld	r24, X
     a42:	8f 7e       	andi	r24, 0xEF	; 239
     a44:	0f c0       	rjmp	.+30     	; 0xa64 <setup_usart+0x1b0>
        *usart[usart_number].ucsrc |=  (1 << 5); /* UPM1 = 1 */
    break;
    case 'O': /* Odd */
        *usart[usart_number].ucsrc |=  (1 << 4); /* UPM0 = 1 */
     a46:	8c e0       	ldi	r24, 0x0C	; 12
     a48:	91 e0       	ldi	r25, 0x01	; 1
     a4a:	48 9f       	mul	r20, r24
     a4c:	f0 01       	movw	r30, r0
     a4e:	49 9f       	mul	r20, r25
     a50:	f0 0d       	add	r31, r0
     a52:	58 9f       	mul	r21, r24
     a54:	f0 0d       	add	r31, r0
     a56:	11 24       	eor	r1, r1
     a58:	e6 5f       	subi	r30, 0xF6	; 246
     a5a:	fc 4f       	sbci	r31, 0xFC	; 252
     a5c:	a0 81       	ld	r26, Z
     a5e:	b1 81       	ldd	r27, Z+1	; 0x01
     a60:	8c 91       	ld	r24, X
     a62:	80 61       	ori	r24, 0x10	; 16
     a64:	8c 93       	st	X, r24
        *usart[usart_number].ucsrc |=  (1 << 5); /* UPM1 = 1 */
     a66:	01 90       	ld	r0, Z+
     a68:	f0 81       	ld	r31, Z
     a6a:	e0 2d       	mov	r30, r0
     a6c:	80 81       	ld	r24, Z
     a6e:	80 62       	ori	r24, 0x20	; 32
     a70:	80 83       	st	Z, r24
    break;
    }
    
    /* set number of stopbits */
    if(stopbits > 1)
     a72:	81 e0       	ldi	r24, 0x01	; 1
     a74:	8e 15       	cp	r24, r14
     a76:	88 f4       	brcc	.+34     	; 0xa9a <setup_usart+0x1e6>
        *usart[usart_number].ucsrc |=  (1 << 3); /* USBS = 1 */
     a78:	8c e0       	ldi	r24, 0x0C	; 12
     a7a:	91 e0       	ldi	r25, 0x01	; 1
     a7c:	48 9f       	mul	r20, r24
     a7e:	f0 01       	movw	r30, r0
     a80:	49 9f       	mul	r20, r25
     a82:	f0 0d       	add	r31, r0
     a84:	58 9f       	mul	r21, r24
     a86:	f0 0d       	add	r31, r0
     a88:	11 24       	eor	r1, r1
     a8a:	e6 5f       	subi	r30, 0xF6	; 246
     a8c:	fc 4f       	sbci	r31, 0xFC	; 252
     a8e:	01 90       	ld	r0, Z+
     a90:	f0 81       	ld	r31, Z
     a92:	e0 2d       	mov	r30, r0
     a94:	80 81       	ld	r24, Z
     a96:	88 60       	ori	r24, 0x08	; 8
     a98:	10 c0       	rjmp	.+32     	; 0xaba <setup_usart+0x206>
    else
        *usart[usart_number].ucsrc &= ~(1 << 3); /* USBS = 0 */
     a9a:	8c e0       	ldi	r24, 0x0C	; 12
     a9c:	91 e0       	ldi	r25, 0x01	; 1
     a9e:	48 9f       	mul	r20, r24
     aa0:	f0 01       	movw	r30, r0
     aa2:	49 9f       	mul	r20, r25
     aa4:	f0 0d       	add	r31, r0
     aa6:	58 9f       	mul	r21, r24
     aa8:	f0 0d       	add	r31, r0
     aaa:	11 24       	eor	r1, r1
     aac:	e6 5f       	subi	r30, 0xF6	; 246
     aae:	fc 4f       	sbci	r31, 0xFC	; 252
     ab0:	01 90       	ld	r0, Z+
     ab2:	f0 81       	ld	r31, Z
     ab4:	e0 2d       	mov	r30, r0
     ab6:	80 81       	ld	r24, Z
     ab8:	87 7f       	andi	r24, 0xF7	; 247
     aba:	80 83       	st	Z, r24
}
     abc:	df 91       	pop	r29
     abe:	cf 91       	pop	r28
     ac0:	1f 91       	pop	r17
     ac2:	0f 91       	pop	r16
     ac4:	ff 90       	pop	r15
     ac6:	ef 90       	pop	r14
     ac8:	df 90       	pop	r13
     aca:	cf 90       	pop	r12
     acc:	bf 90       	pop	r11
     ace:	af 90       	pop	r10
     ad0:	08 95       	ret

00000ad2 <buffer_level>:

uint8_t buffer_level(uint8_t usart_number, uint8_t direction) {
    return usart[usart_number].buffer[direction].write - usart[usart_number].buffer[direction].read;
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	26 2f       	mov	r18, r22
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	f9 01       	movw	r30, r18
     ada:	f6 95       	lsr	r31
     adc:	fe 2f       	mov	r31, r30
     ade:	ee 27       	eor	r30, r30
     ae0:	f7 95       	ror	r31
     ae2:	e7 95       	ror	r30
     ae4:	22 0f       	add	r18, r18
     ae6:	33 1f       	adc	r19, r19
     ae8:	e2 0f       	add	r30, r18
     aea:	f3 1f       	adc	r31, r19
     aec:	2c e0       	ldi	r18, 0x0C	; 12
     aee:	31 e0       	ldi	r19, 0x01	; 1
     af0:	82 9f       	mul	r24, r18
     af2:	a0 01       	movw	r20, r0
     af4:	83 9f       	mul	r24, r19
     af6:	50 0d       	add	r21, r0
     af8:	92 9f       	mul	r25, r18
     afa:	50 0d       	add	r21, r0
     afc:	11 24       	eor	r1, r1
     afe:	e4 0f       	add	r30, r20
     b00:	f5 1f       	adc	r31, r21
     b02:	ef 57       	subi	r30, 0x7F	; 127
     b04:	fd 4f       	sbci	r31, 0xFD	; 253
     b06:	80 81       	ld	r24, Z
     b08:	26 2f       	mov	r18, r22
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	f9 01       	movw	r30, r18
     b0e:	f6 95       	lsr	r31
     b10:	fe 2f       	mov	r31, r30
     b12:	ee 27       	eor	r30, r30
     b14:	f7 95       	ror	r31
     b16:	e7 95       	ror	r30
     b18:	22 0f       	add	r18, r18
     b1a:	33 1f       	adc	r19, r19
     b1c:	e2 0f       	add	r30, r18
     b1e:	f3 1f       	adc	r31, r19
     b20:	e4 0f       	add	r30, r20
     b22:	f5 1f       	adc	r31, r21
     b24:	e0 58       	subi	r30, 0x80	; 128
     b26:	fd 4f       	sbci	r31, 0xFD	; 253
     b28:	90 81       	ld	r25, Z
}
     b2a:	89 1b       	sub	r24, r25
     b2c:	08 95       	ret

00000b2e <read_buffer>:

uint8_t read_buffer(uint8_t usart_number, uint8_t direction, uint8_t *data) {
     b2e:	da 01       	movw	r26, r20
    // buffer empty?
    if (usart[usart_number].buffer[direction].read == usart[usart_number].buffer[direction].write) return 1;
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	26 2f       	mov	r18, r22
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	f9 01       	movw	r30, r18
     b38:	f6 95       	lsr	r31
     b3a:	fe 2f       	mov	r31, r30
     b3c:	ee 27       	eor	r30, r30
     b3e:	f7 95       	ror	r31
     b40:	e7 95       	ror	r30
     b42:	22 0f       	add	r18, r18
     b44:	33 1f       	adc	r19, r19
     b46:	e2 0f       	add	r30, r18
     b48:	f3 1f       	adc	r31, r19
     b4a:	2c e0       	ldi	r18, 0x0C	; 12
     b4c:	31 e0       	ldi	r19, 0x01	; 1
     b4e:	82 9f       	mul	r24, r18
     b50:	a0 01       	movw	r20, r0
     b52:	83 9f       	mul	r24, r19
     b54:	50 0d       	add	r21, r0
     b56:	92 9f       	mul	r25, r18
     b58:	50 0d       	add	r21, r0
     b5a:	11 24       	eor	r1, r1
     b5c:	e4 0f       	add	r30, r20
     b5e:	f5 1f       	adc	r31, r21
     b60:	e0 58       	subi	r30, 0x80	; 128
     b62:	fd 4f       	sbci	r31, 0xFD	; 253
     b64:	20 81       	ld	r18, Z
     b66:	86 2f       	mov	r24, r22
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	fc 01       	movw	r30, r24
     b6c:	f6 95       	lsr	r31
     b6e:	fe 2f       	mov	r31, r30
     b70:	ee 27       	eor	r30, r30
     b72:	f7 95       	ror	r31
     b74:	e7 95       	ror	r30
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	e8 0f       	add	r30, r24
     b7c:	f9 1f       	adc	r31, r25
     b7e:	e4 0f       	add	r30, r20
     b80:	f5 1f       	adc	r31, r21
     b82:	ef 57       	subi	r30, 0x7F	; 127
     b84:	fd 4f       	sbci	r31, 0xFD	; 253
     b86:	80 81       	ld	r24, Z
     b88:	28 17       	cp	r18, r24
     b8a:	11 f4       	brne	.+4      	; 0xb90 <read_buffer+0x62>
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	08 95       	ret
    // read a byte from the buffer
    *data = usart[usart_number].buffer[direction].data[usart[usart_number].buffer[direction].read];
     b90:	86 2f       	mov	r24, r22
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	fc 01       	movw	r30, r24
     b96:	f6 95       	lsr	r31
     b98:	fe 2f       	mov	r31, r30
     b9a:	ee 27       	eor	r30, r30
     b9c:	f7 95       	ror	r31
     b9e:	e7 95       	ror	r30
     ba0:	88 0f       	add	r24, r24
     ba2:	99 1f       	adc	r25, r25
     ba4:	e8 0f       	add	r30, r24
     ba6:	f9 1f       	adc	r31, r25
     ba8:	e4 0f       	add	r30, r20
     baa:	f5 1f       	adc	r31, r21
     bac:	e0 58       	subi	r30, 0x80	; 128
     bae:	fd 4f       	sbci	r31, 0xFD	; 253
     bb0:	20 81       	ld	r18, Z
     bb2:	86 2f       	mov	r24, r22
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	fc 01       	movw	r30, r24
     bb8:	f6 95       	lsr	r31
     bba:	fe 2f       	mov	r31, r30
     bbc:	ee 27       	eor	r30, r30
     bbe:	f7 95       	ror	r31
     bc0:	e7 95       	ror	r30
     bc2:	88 0f       	add	r24, r24
     bc4:	99 1f       	adc	r25, r25
     bc6:	e8 0f       	add	r30, r24
     bc8:	f9 1f       	adc	r31, r25
     bca:	e4 0f       	add	r30, r20
     bcc:	f5 1f       	adc	r31, r21
     bce:	e0 50       	subi	r30, 0x00	; 0
     bd0:	fe 4f       	sbci	r31, 0xFE	; 254
     bd2:	e2 0f       	add	r30, r18
     bd4:	f1 1d       	adc	r31, r1
     bd6:	80 81       	ld	r24, Z
     bd8:	8c 93       	st	X, r24
    // update read index
    usart[usart_number].buffer[direction].read = (usart[usart_number].buffer[direction].read + 1) & BUFFERMASK;
     bda:	86 2f       	mov	r24, r22
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	fc 01       	movw	r30, r24
     be0:	f6 95       	lsr	r31
     be2:	fe 2f       	mov	r31, r30
     be4:	ee 27       	eor	r30, r30
     be6:	f7 95       	ror	r31
     be8:	e7 95       	ror	r30
     bea:	88 0f       	add	r24, r24
     bec:	99 1f       	adc	r25, r25
     bee:	e8 0f       	add	r30, r24
     bf0:	f9 1f       	adc	r31, r25
     bf2:	e4 0f       	add	r30, r20
     bf4:	f5 1f       	adc	r31, r21
     bf6:	e0 58       	subi	r30, 0x80	; 128
     bf8:	fd 4f       	sbci	r31, 0xFD	; 253
     bfa:	20 81       	ld	r18, Z
     bfc:	2f 5f       	subi	r18, 0xFF	; 255
     bfe:	2f 77       	andi	r18, 0x7F	; 127
     c00:	86 2f       	mov	r24, r22
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	fc 01       	movw	r30, r24
     c06:	f6 95       	lsr	r31
     c08:	fe 2f       	mov	r31, r30
     c0a:	ee 27       	eor	r30, r30
     c0c:	f7 95       	ror	r31
     c0e:	e7 95       	ror	r30
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	e8 0f       	add	r30, r24
     c16:	f9 1f       	adc	r31, r25
     c18:	e4 0f       	add	r30, r20
     c1a:	f5 1f       	adc	r31, r21
     c1c:	e0 58       	subi	r30, 0x80	; 128
     c1e:	fd 4f       	sbci	r31, 0xFD	; 253
     c20:	20 83       	st	Z, r18
     c22:	80 e0       	ldi	r24, 0x00	; 0
    return 0; 
}
     c24:	08 95       	ret

00000c26 <write_buffer>:

uint8_t write_buffer(uint8_t usart_number, uint8_t direction, uint8_t data) {
     c26:	74 2f       	mov	r23, r20
    // calc index for the next byte
    uint8_t next = (usart[usart_number].buffer[direction].write + 1) & BUFFERMASK;
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	26 2f       	mov	r18, r22
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	f9 01       	movw	r30, r18
     c30:	f6 95       	lsr	r31
     c32:	fe 2f       	mov	r31, r30
     c34:	ee 27       	eor	r30, r30
     c36:	f7 95       	ror	r31
     c38:	e7 95       	ror	r30
     c3a:	22 0f       	add	r18, r18
     c3c:	33 1f       	adc	r19, r19
     c3e:	e2 0f       	add	r30, r18
     c40:	f3 1f       	adc	r31, r19
     c42:	2c e0       	ldi	r18, 0x0C	; 12
     c44:	31 e0       	ldi	r19, 0x01	; 1
     c46:	ac 01       	movw	r20, r24
     c48:	42 9f       	mul	r20, r18
     c4a:	c0 01       	movw	r24, r0
     c4c:	43 9f       	mul	r20, r19
     c4e:	90 0d       	add	r25, r0
     c50:	52 9f       	mul	r21, r18
     c52:	90 0d       	add	r25, r0
     c54:	11 24       	eor	r1, r1
     c56:	e8 0f       	add	r30, r24
     c58:	f9 1f       	adc	r31, r25
     c5a:	ef 57       	subi	r30, 0x7F	; 127
     c5c:	fd 4f       	sbci	r31, 0xFD	; 253
     c5e:	30 81       	ld	r19, Z
     c60:	3f 5f       	subi	r19, 0xFF	; 255
     c62:	3f 77       	andi	r19, 0x7F	; 127
    // wait if the buffer is full
    while(usart[usart_number].buffer[direction].read == next) { ; };
     c64:	ac 01       	movw	r20, r24
     c66:	86 2f       	mov	r24, r22
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	fc 01       	movw	r30, r24
     c6c:	f6 95       	lsr	r31
     c6e:	fe 2f       	mov	r31, r30
     c70:	ee 27       	eor	r30, r30
     c72:	f7 95       	ror	r31
     c74:	e7 95       	ror	r30
     c76:	88 0f       	add	r24, r24
     c78:	99 1f       	adc	r25, r25
     c7a:	e8 0f       	add	r30, r24
     c7c:	f9 1f       	adc	r31, r25
     c7e:	e4 0f       	add	r30, r20
     c80:	f5 1f       	adc	r31, r21
     c82:	e0 58       	subi	r30, 0x80	; 128
     c84:	fd 4f       	sbci	r31, 0xFD	; 253
     c86:	80 81       	ld	r24, Z
     c88:	83 17       	cp	r24, r19
     c8a:	69 f3       	breq	.-38     	; 0xc66 <write_buffer+0x40>
    // write the byte to the buffer
    usart[usart_number].buffer[direction].data[usart[usart_number].buffer[direction].write] = data;
     c8c:	86 2f       	mov	r24, r22
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	fc 01       	movw	r30, r24
     c92:	f6 95       	lsr	r31
     c94:	fe 2f       	mov	r31, r30
     c96:	ee 27       	eor	r30, r30
     c98:	f7 95       	ror	r31
     c9a:	e7 95       	ror	r30
     c9c:	88 0f       	add	r24, r24
     c9e:	99 1f       	adc	r25, r25
     ca0:	e8 0f       	add	r30, r24
     ca2:	f9 1f       	adc	r31, r25
     ca4:	e4 0f       	add	r30, r20
     ca6:	f5 1f       	adc	r31, r21
     ca8:	ef 57       	subi	r30, 0x7F	; 127
     caa:	fd 4f       	sbci	r31, 0xFD	; 253
     cac:	20 81       	ld	r18, Z
     cae:	86 2f       	mov	r24, r22
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	fc 01       	movw	r30, r24
     cb4:	f6 95       	lsr	r31
     cb6:	fe 2f       	mov	r31, r30
     cb8:	ee 27       	eor	r30, r30
     cba:	f7 95       	ror	r31
     cbc:	e7 95       	ror	r30
     cbe:	88 0f       	add	r24, r24
     cc0:	99 1f       	adc	r25, r25
     cc2:	e8 0f       	add	r30, r24
     cc4:	f9 1f       	adc	r31, r25
     cc6:	e4 0f       	add	r30, r20
     cc8:	f5 1f       	adc	r31, r21
     cca:	e0 50       	subi	r30, 0x00	; 0
     ccc:	fe 4f       	sbci	r31, 0xFE	; 254
     cce:	e2 0f       	add	r30, r18
     cd0:	f1 1d       	adc	r31, r1
     cd2:	70 83       	st	Z, r23
    // update write index
    usart[usart_number].buffer[direction].write = next; 
     cd4:	86 2f       	mov	r24, r22
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	fc 01       	movw	r30, r24
     cda:	f6 95       	lsr	r31
     cdc:	fe 2f       	mov	r31, r30
     cde:	ee 27       	eor	r30, r30
     ce0:	f7 95       	ror	r31
     ce2:	e7 95       	ror	r30
     ce4:	88 0f       	add	r24, r24
     ce6:	99 1f       	adc	r25, r25
     ce8:	e8 0f       	add	r30, r24
     cea:	f9 1f       	adc	r31, r25
     cec:	e4 0f       	add	r30, r20
     cee:	f5 1f       	adc	r31, r21
     cf0:	ef 57       	subi	r30, 0x7F	; 127
     cf2:	fd 4f       	sbci	r31, 0xFD	; 253
     cf4:	30 83       	st	Z, r19
    
    if(direction == TX) {
     cf6:	61 30       	cpi	r22, 0x01	; 1
     cf8:	91 f5       	brne	.+100    	; 0xd5e <write_buffer+0x138>
        // Check if the USART is in 9-Bit mode
        if(*usart[usart_number].ucsrb & 4) {
     cfa:	fa 01       	movw	r30, r20
     cfc:	e8 5f       	subi	r30, 0xF8	; 248
     cfe:	fc 4f       	sbci	r31, 0xFC	; 252
     d00:	a0 81       	ld	r26, Z
     d02:	b1 81       	ldd	r27, Z+1	; 0x01
     d04:	8c 91       	ld	r24, X
     d06:	82 ff       	sbrs	r24, 2
     d08:	27 c0       	rjmp	.+78     	; 0xd58 <write_buffer+0x132>
            // Activate transmit interrupt if the buffer level is even 
            if(!((usart[usart_number].buffer[direction].write - usart[usart_number].buffer[direction].read) & 1))
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	fc 01       	movw	r30, r24
     d10:	f6 95       	lsr	r31
     d12:	fe 2f       	mov	r31, r30
     d14:	ee 27       	eor	r30, r30
     d16:	f7 95       	ror	r31
     d18:	e7 95       	ror	r30
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	e8 0f       	add	r30, r24
     d20:	f9 1f       	adc	r31, r25
     d22:	e4 0f       	add	r30, r20
     d24:	f5 1f       	adc	r31, r21
     d26:	ef 57       	subi	r30, 0x7F	; 127
     d28:	fd 4f       	sbci	r31, 0xFD	; 253
     d2a:	20 81       	ld	r18, Z
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	fc 01       	movw	r30, r24
     d32:	f6 95       	lsr	r31
     d34:	fe 2f       	mov	r31, r30
     d36:	ee 27       	eor	r30, r30
     d38:	f7 95       	ror	r31
     d3a:	e7 95       	ror	r30
     d3c:	88 0f       	add	r24, r24
     d3e:	99 1f       	adc	r25, r25
     d40:	e8 0f       	add	r30, r24
     d42:	f9 1f       	adc	r31, r25
     d44:	e4 0f       	add	r30, r20
     d46:	f5 1f       	adc	r31, r21
     d48:	e0 58       	subi	r30, 0x80	; 128
     d4a:	fd 4f       	sbci	r31, 0xFD	; 253
     d4c:	80 81       	ld	r24, Z
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	28 1b       	sub	r18, r24
     d52:	31 09       	sbc	r19, r1
     d54:	20 fd       	sbrc	r18, 0
     d56:	03 c0       	rjmp	.+6      	; 0xd5e <write_buffer+0x138>
               *usart[usart_number].ucsrb |= (1 << 5);
        } else {
            // Activate transmit interrupt 
            *usart[usart_number].ucsrb |= (1 << 5);
     d58:	8c 91       	ld	r24, X
     d5a:	80 62       	ori	r24, 0x20	; 32
     d5c:	8c 93       	st	X, r24
        }
    }
    return 0;
}
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	08 95       	ret

00000d62 <send_char>:

uint8_t send_char(uint8_t usart_number, char c) {
     d62:	46 2f       	mov	r20, r22
    return write_buffer(usart_number, TX, (uint8_t) c);
     d64:	61 e0       	ldi	r22, 0x01	; 1
     d66:	0e 94 13 06 	call	0xc26	; 0xc26 <write_buffer>
}
     d6a:	08 95       	ret

00000d6c <recv_char>:

uint8_t recv_char(uint8_t usart_number, char *c) {
     d6c:	cf 93       	push	r28
     d6e:	df 93       	push	r29
     d70:	eb 01       	movw	r28, r22
    return usart[usart_number].buffer[direction].write - usart[usart_number].buffer[direction].read;
}

uint8_t read_buffer(uint8_t usart_number, uint8_t direction, uint8_t *data) {
    // buffer empty?
    if (usart[usart_number].buffer[direction].read == usart[usart_number].buffer[direction].write) return 1;
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	2c e0       	ldi	r18, 0x0C	; 12
     d76:	31 e0       	ldi	r19, 0x01	; 1
     d78:	82 9f       	mul	r24, r18
     d7a:	a0 01       	movw	r20, r0
     d7c:	83 9f       	mul	r24, r19
     d7e:	50 0d       	add	r21, r0
     d80:	92 9f       	mul	r25, r18
     d82:	50 0d       	add	r21, r0
     d84:	11 24       	eor	r1, r1
     d86:	fa 01       	movw	r30, r20
     d88:	e0 50       	subi	r30, 0x00	; 0
     d8a:	fe 4f       	sbci	r31, 0xFE	; 254
     d8c:	df 01       	movw	r26, r30
     d8e:	a0 58       	subi	r26, 0x80	; 128
     d90:	bf 4f       	sbci	r27, 0xFF	; 255
     d92:	9c 91       	ld	r25, X
     d94:	ef 57       	subi	r30, 0x7F	; 127
     d96:	ff 4f       	sbci	r31, 0xFF	; 255
     d98:	80 81       	ld	r24, Z
     d9a:	98 17       	cp	r25, r24
     d9c:	11 f4       	brne	.+4      	; 0xda2 <recv_char+0x36>
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	0d c0       	rjmp	.+26     	; 0xdbc <recv_char+0x50>
    // read a byte from the buffer
    *data = usart[usart_number].buffer[direction].data[usart[usart_number].buffer[direction].read];
     da2:	8c 91       	ld	r24, X
     da4:	fa 01       	movw	r30, r20
     da6:	e8 0f       	add	r30, r24
     da8:	f1 1d       	adc	r31, r1
     daa:	e0 50       	subi	r30, 0x00	; 0
     dac:	fe 4f       	sbci	r31, 0xFE	; 254
     dae:	80 81       	ld	r24, Z
     db0:	88 83       	st	Y, r24
    // update read index
    usart[usart_number].buffer[direction].read = (usart[usart_number].buffer[direction].read + 1) & BUFFERMASK;
     db2:	8c 91       	ld	r24, X
     db4:	8f 5f       	subi	r24, 0xFF	; 255
     db6:	8f 77       	andi	r24, 0x7F	; 127
     db8:	8c 93       	st	X, r24
     dba:	80 e0       	ldi	r24, 0x00	; 0
    return write_buffer(usart_number, TX, (uint8_t) c);
}

uint8_t recv_char(uint8_t usart_number, char *c) {
    return read_buffer(usart_number, RX,(uint8_t *)c);
}
     dbc:	df 91       	pop	r29
     dbe:	cf 91       	pop	r28
     dc0:	08 95       	ret

00000dc2 <send_str>:

uint8_t send_str(uint8_t usart_number, char *str) {
     dc2:	1f 93       	push	r17
     dc4:	cf 93       	push	r28
     dc6:	df 93       	push	r29
     dc8:	18 2f       	mov	r17, r24
     dca:	eb 01       	movw	r28, r22
     dcc:	08 c0       	rjmp	.+16     	; 0xdde <send_str+0x1c>
    while(*str) {
        // if an error occurs
        if(send_char(usart_number, *str)) return 1;
     dce:	81 2f       	mov	r24, r17
     dd0:	0e 94 b1 06 	call	0xd62	; 0xd62 <send_char>
     dd4:	88 23       	and	r24, r24
     dd6:	11 f0       	breq	.+4      	; 0xddc <send_str+0x1a>
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	05 c0       	rjmp	.+10     	; 0xde6 <send_str+0x24>
        str++;
     ddc:	21 96       	adiw	r28, 0x01	; 1
uint8_t recv_char(uint8_t usart_number, char *c) {
    return read_buffer(usart_number, RX,(uint8_t *)c);
}

uint8_t send_str(uint8_t usart_number, char *str) {
    while(*str) {
     dde:	68 81       	ld	r22, Y
     de0:	66 23       	and	r22, r22
     de2:	a9 f7       	brne	.-22     	; 0xdce <send_str+0xc>
     de4:	80 e0       	ldi	r24, 0x00	; 0
        // if an error occurs
        if(send_char(usart_number, *str)) return 1;
        str++;
    }
    return 0;
}
     de6:	df 91       	pop	r29
     de8:	cf 91       	pop	r28
     dea:	1f 91       	pop	r17
     dec:	08 95       	ret

00000dee <recv_str>:
 
uint8_t recv_str(uint8_t usart_number, char *str) {
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
     df2:	eb 01       	movw	r28, r22
    return usart[usart_number].buffer[direction].write - usart[usart_number].buffer[direction].read;
}

uint8_t read_buffer(uint8_t usart_number, uint8_t direction, uint8_t *data) {
    // buffer empty?
    if (usart[usart_number].buffer[direction].read == usart[usart_number].buffer[direction].write) return 1;
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	2c e0       	ldi	r18, 0x0C	; 12
     df8:	31 e0       	ldi	r19, 0x01	; 1
     dfa:	82 9f       	mul	r24, r18
     dfc:	a0 01       	movw	r20, r0
     dfe:	83 9f       	mul	r24, r19
     e00:	50 0d       	add	r21, r0
     e02:	92 9f       	mul	r25, r18
     e04:	50 0d       	add	r21, r0
     e06:	11 24       	eor	r1, r1
     e08:	ca 01       	movw	r24, r20
     e0a:	80 50       	subi	r24, 0x00	; 0
     e0c:	9e 4f       	sbci	r25, 0xFE	; 254
     e0e:	dc 01       	movw	r26, r24
     e10:	a0 58       	subi	r26, 0x80	; 128
     e12:	bf 4f       	sbci	r27, 0xFF	; 255
     e14:	9c 01       	movw	r18, r24
     e16:	2f 57       	subi	r18, 0x7F	; 127
     e18:	3f 4f       	sbci	r19, 0xFF	; 255
     e1a:	9c 91       	ld	r25, X
     e1c:	f9 01       	movw	r30, r18
     e1e:	80 81       	ld	r24, Z
     e20:	98 17       	cp	r25, r24
     e22:	91 f0       	breq	.+36     	; 0xe48 <recv_str+0x5a>
    // read a byte from the buffer
    *data = usart[usart_number].buffer[direction].data[usart[usart_number].buffer[direction].read];
     e24:	8c 91       	ld	r24, X
     e26:	fa 01       	movw	r30, r20
     e28:	e8 0f       	add	r30, r24
     e2a:	f1 1d       	adc	r31, r1
     e2c:	e0 50       	subi	r30, 0x00	; 0
     e2e:	fe 4f       	sbci	r31, 0xFE	; 254
     e30:	90 81       	ld	r25, Z
    // update read index
    usart[usart_number].buffer[direction].read = (usart[usart_number].buffer[direction].read + 1) & BUFFERMASK;
     e32:	8c 91       	ld	r24, X
     e34:	8f 5f       	subi	r24, 0xFF	; 255
     e36:	8f 77       	andi	r24, 0x7F	; 127
     e38:	8c 93       	st	X, r24
 
uint8_t recv_str(uint8_t usart_number, char *str) {
    char c;
    while(1) {
        if(recv_char(usart_number, &c)) return 1;
        *str = c;
     e3a:	98 83       	st	Y, r25
        str++;
        if(c == '\0') return 0;   
     e3c:	99 23       	and	r25, r25
     e3e:	11 f4       	brne	.+4      	; 0xe44 <recv_str+0x56>
     e40:	80 e0       	ldi	r24, 0x00	; 0
     e42:	03 c0       	rjmp	.+6      	; 0xe4a <recv_str+0x5c>
uint8_t recv_str(uint8_t usart_number, char *str) {
    char c;
    while(1) {
        if(recv_char(usart_number, &c)) return 1;
        *str = c;
        str++;
     e44:	21 96       	adiw	r28, 0x01	; 1
     e46:	e9 cf       	rjmp	.-46     	; 0xe1a <recv_str+0x2c>
     e48:	81 e0       	ldi	r24, 0x01	; 1
        if(c == '\0') return 0;   
    }
}
     e4a:	df 91       	pop	r29
     e4c:	cf 91       	pop	r28
     e4e:	08 95       	ret

00000e50 <send_str_p>:

uint8_t send_str_p(uint8_t usart_number,const char *str) {
     e50:	1f 93       	push	r17
     e52:	cf 93       	push	r28
     e54:	df 93       	push	r29
     e56:	18 2f       	mov	r17, r24
     e58:	eb 01       	movw	r28, r22
     e5a:	08 c0       	rjmp	.+16     	; 0xe6c <send_str_p+0x1c>
    char c;
    while((c = pgm_read_byte(str))) {
        if(send_char(usart_number, c)) return 1;
     e5c:	81 2f       	mov	r24, r17
     e5e:	0e 94 b1 06 	call	0xd62	; 0xd62 <send_char>
     e62:	88 23       	and	r24, r24
     e64:	11 f0       	breq	.+4      	; 0xe6a <send_str_p+0x1a>
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	06 c0       	rjmp	.+12     	; 0xe76 <send_str_p+0x26>
        str++;
     e6a:	21 96       	adiw	r28, 0x01	; 1
    }
}

uint8_t send_str_p(uint8_t usart_number,const char *str) {
    char c;
    while((c = pgm_read_byte(str))) {
     e6c:	fe 01       	movw	r30, r28
     e6e:	64 91       	lpm	r22, Z+
     e70:	66 23       	and	r22, r22
     e72:	a1 f7       	brne	.-24     	; 0xe5c <send_str_p+0xc>
     e74:	80 e0       	ldi	r24, 0x00	; 0
        if(send_char(usart_number, c)) return 1;
        str++;
    }
    return 0;
}
     e76:	df 91       	pop	r29
     e78:	cf 91       	pop	r28
     e7a:	1f 91       	pop	r17
     e7c:	08 95       	ret

00000e7e <send_mdb>:

uint8_t send_mdb(uint8_t usart_number, uint16_t mdb) {
     e7e:	ff 92       	push	r15
     e80:	0f 93       	push	r16
     e82:	1f 93       	push	r17
     e84:	08 2f       	mov	r16, r24
     e86:	f6 2e       	mov	r15, r22
     e88:	47 2f       	mov	r20, r23
    return write_buffer(usart_number, TX, (uint8_t)(mdb >> 8)) | write_buffer(usart_number, TX, (uint8_t)(mdb & 0xFF));
     e8a:	61 e0       	ldi	r22, 0x01	; 1
     e8c:	0e 94 13 06 	call	0xc26	; 0xc26 <write_buffer>
     e90:	18 2f       	mov	r17, r24
     e92:	80 2f       	mov	r24, r16
     e94:	61 e0       	ldi	r22, 0x01	; 1
     e96:	4f 2d       	mov	r20, r15
     e98:	0e 94 13 06 	call	0xc26	; 0xc26 <write_buffer>
}
     e9c:	81 2b       	or	r24, r17
     e9e:	1f 91       	pop	r17
     ea0:	0f 91       	pop	r16
     ea2:	ff 90       	pop	r15
     ea4:	08 95       	ret

00000ea6 <recv_mdb>:
    return usart[usart_number].buffer[direction].write - usart[usart_number].buffer[direction].read;
}

uint8_t read_buffer(uint8_t usart_number, uint8_t direction, uint8_t *data) {
    // buffer empty?
    if (usart[usart_number].buffer[direction].read == usart[usart_number].buffer[direction].write) return 1;
     ea6:	48 2f       	mov	r20, r24
     ea8:	50 e0       	ldi	r21, 0x00	; 0
     eaa:	8c e0       	ldi	r24, 0x0C	; 12
     eac:	91 e0       	ldi	r25, 0x01	; 1
     eae:	48 9f       	mul	r20, r24
     eb0:	90 01       	movw	r18, r0
     eb2:	49 9f       	mul	r20, r25
     eb4:	30 0d       	add	r19, r0
     eb6:	58 9f       	mul	r21, r24
     eb8:	30 0d       	add	r19, r0
     eba:	11 24       	eor	r1, r1
     ebc:	f9 01       	movw	r30, r18
     ebe:	e0 50       	subi	r30, 0x00	; 0
     ec0:	fe 4f       	sbci	r31, 0xFE	; 254
     ec2:	df 01       	movw	r26, r30
     ec4:	a0 58       	subi	r26, 0x80	; 128
     ec6:	bf 4f       	sbci	r27, 0xFF	; 255
     ec8:	9c 91       	ld	r25, X
     eca:	ef 57       	subi	r30, 0x7F	; 127
     ecc:	ff 4f       	sbci	r31, 0xFF	; 255
     ece:	80 81       	ld	r24, Z
     ed0:	98 17       	cp	r25, r24
     ed2:	59 f0       	breq	.+22     	; 0xeea <recv_mdb+0x44>
    // read a byte from the buffer
    *data = usart[usart_number].buffer[direction].data[usart[usart_number].buffer[direction].read];
     ed4:	8c 91       	ld	r24, X
     ed6:	f9 01       	movw	r30, r18
     ed8:	e8 0f       	add	r30, r24
     eda:	f1 1d       	adc	r31, r1
     edc:	e0 50       	subi	r30, 0x00	; 0
     ede:	fe 4f       	sbci	r31, 0xFE	; 254
     ee0:	60 81       	ld	r22, Z
    // update read index
    usart[usart_number].buffer[direction].read = (usart[usart_number].buffer[direction].read + 1) & BUFFERMASK;
     ee2:	8c 91       	ld	r24, X
     ee4:	8f 5f       	subi	r24, 0xFF	; 255
     ee6:	8f 77       	andi	r24, 0x7F	; 127
     ee8:	8c 93       	st	X, r24
    return usart[usart_number].buffer[direction].write - usart[usart_number].buffer[direction].read;
}

uint8_t read_buffer(uint8_t usart_number, uint8_t direction, uint8_t *data) {
    // buffer empty?
    if (usart[usart_number].buffer[direction].read == usart[usart_number].buffer[direction].write) return 1;
     eea:	8c e0       	ldi	r24, 0x0C	; 12
     eec:	91 e0       	ldi	r25, 0x01	; 1
     eee:	48 9f       	mul	r20, r24
     ef0:	90 01       	movw	r18, r0
     ef2:	49 9f       	mul	r20, r25
     ef4:	30 0d       	add	r19, r0
     ef6:	58 9f       	mul	r21, r24
     ef8:	30 0d       	add	r19, r0
     efa:	11 24       	eor	r1, r1
     efc:	f9 01       	movw	r30, r18
     efe:	e0 50       	subi	r30, 0x00	; 0
     f00:	fe 4f       	sbci	r31, 0xFE	; 254
     f02:	df 01       	movw	r26, r30
     f04:	a0 58       	subi	r26, 0x80	; 128
     f06:	bf 4f       	sbci	r27, 0xFF	; 255
     f08:	9c 91       	ld	r25, X
     f0a:	ef 57       	subi	r30, 0x7F	; 127
     f0c:	ff 4f       	sbci	r31, 0xFF	; 255
     f0e:	80 81       	ld	r24, Z
     f10:	98 17       	cp	r25, r24
     f12:	59 f0       	breq	.+22     	; 0xf2a <recv_mdb+0x84>
    // read a byte from the buffer
    *data = usart[usart_number].buffer[direction].data[usart[usart_number].buffer[direction].read];
     f14:	8c 91       	ld	r24, X
     f16:	f9 01       	movw	r30, r18
     f18:	e8 0f       	add	r30, r24
     f1a:	f1 1d       	adc	r31, r1
     f1c:	e0 50       	subi	r30, 0x00	; 0
     f1e:	fe 4f       	sbci	r31, 0xFE	; 254
     f20:	20 81       	ld	r18, Z
    // update read index
    usart[usart_number].buffer[direction].read = (usart[usart_number].buffer[direction].read + 1) & BUFFERMASK;
     f22:	8c 91       	ld	r24, X
     f24:	8f 5f       	subi	r24, 0xFF	; 255
     f26:	8f 77       	andi	r24, 0x7F	; 127
     f28:	8c 93       	st	X, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	96 2f       	mov	r25, r22
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	28 2b       	or	r18, r24
     f32:	39 2b       	or	r19, r25
uint16_t recv_mdb(uint8_t usart_number) {
    uint8_t hb, lb;
    read_buffer(usart_number, RX, &hb);
    read_buffer(usart_number, RX, &lb);
    return ((hb << 8) | lb);
}
     f34:	c9 01       	movw	r24, r18
     f36:	08 95       	ret

00000f38 <__vector_25>:

#if (USART0 == 1)
ISR(USART0_RX_vect){
     f38:	1f 92       	push	r1
     f3a:	0f 92       	push	r0
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	0f 92       	push	r0
     f40:	0b b6       	in	r0, 0x3b	; 59
     f42:	0f 92       	push	r0
     f44:	11 24       	eor	r1, r1
     f46:	2f 93       	push	r18
     f48:	3f 93       	push	r19
     f4a:	4f 93       	push	r20
     f4c:	5f 93       	push	r21
     f4e:	6f 93       	push	r22
     f50:	7f 93       	push	r23
     f52:	8f 93       	push	r24
     f54:	9f 93       	push	r25
     f56:	af 93       	push	r26
     f58:	bf 93       	push	r27
     f5a:	ef 93       	push	r30
     f5c:	ff 93       	push	r31
    uint8_t data;
    if(UCSR0B & (1 << 2)) {
     f5e:	80 91 c1 00 	lds	r24, 0x00C1
     f62:	82 ff       	sbrs	r24, 2
     f64:	08 c0       	rjmp	.+16     	; 0xf76 <__vector_25+0x3e>
        data = ((UCSR0B >> 1) & 0x01);
     f66:	40 91 c1 00 	lds	r20, 0x00C1
        write_buffer(0, RX, data);
     f6a:	46 95       	lsr	r20
     f6c:	41 70       	andi	r20, 0x01	; 1
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	60 e0       	ldi	r22, 0x00	; 0
     f72:	0e 94 13 06 	call	0xc26	; 0xc26 <write_buffer>
    }
    data = UDR0;
     f76:	40 91 c6 00 	lds	r20, 0x00C6
    write_buffer(0, RX, data);
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	60 e0       	ldi	r22, 0x00	; 0
     f7e:	0e 94 13 06 	call	0xc26	; 0xc26 <write_buffer>
}
     f82:	ff 91       	pop	r31
     f84:	ef 91       	pop	r30
     f86:	bf 91       	pop	r27
     f88:	af 91       	pop	r26
     f8a:	9f 91       	pop	r25
     f8c:	8f 91       	pop	r24
     f8e:	7f 91       	pop	r23
     f90:	6f 91       	pop	r22
     f92:	5f 91       	pop	r21
     f94:	4f 91       	pop	r20
     f96:	3f 91       	pop	r19
     f98:	2f 91       	pop	r18
     f9a:	0f 90       	pop	r0
     f9c:	0b be       	out	0x3b, r0	; 59
     f9e:	0f 90       	pop	r0
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	0f 90       	pop	r0
     fa4:	1f 90       	pop	r1
     fa6:	18 95       	reti

00000fa8 <__vector_36>:
#endif

#if (USART1 == 1)
ISR(USART1_RX_vect){
     fa8:	1f 92       	push	r1
     faa:	0f 92       	push	r0
     fac:	0f b6       	in	r0, 0x3f	; 63
     fae:	0f 92       	push	r0
     fb0:	0b b6       	in	r0, 0x3b	; 59
     fb2:	0f 92       	push	r0
     fb4:	11 24       	eor	r1, r1
     fb6:	2f 93       	push	r18
     fb8:	3f 93       	push	r19
     fba:	4f 93       	push	r20
     fbc:	5f 93       	push	r21
     fbe:	6f 93       	push	r22
     fc0:	7f 93       	push	r23
     fc2:	8f 93       	push	r24
     fc4:	9f 93       	push	r25
     fc6:	af 93       	push	r26
     fc8:	bf 93       	push	r27
     fca:	ef 93       	push	r30
     fcc:	ff 93       	push	r31
    uint8_t data;
    if(UCSR1B & (1 << 2)) {
     fce:	80 91 c9 00 	lds	r24, 0x00C9
     fd2:	82 ff       	sbrs	r24, 2
     fd4:	08 c0       	rjmp	.+16     	; 0xfe6 <__vector_36+0x3e>
        data = ((UCSR1B >> 1) & 0x01);
     fd6:	40 91 c9 00 	lds	r20, 0x00C9
        write_buffer(1, RX, data);
     fda:	46 95       	lsr	r20
     fdc:	41 70       	andi	r20, 0x01	; 1
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	60 e0       	ldi	r22, 0x00	; 0
     fe2:	0e 94 13 06 	call	0xc26	; 0xc26 <write_buffer>
    }
    data = UDR1;
     fe6:	40 91 ce 00 	lds	r20, 0x00CE
    write_buffer(1, RX, data);
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	60 e0       	ldi	r22, 0x00	; 0
     fee:	0e 94 13 06 	call	0xc26	; 0xc26 <write_buffer>
}
     ff2:	ff 91       	pop	r31
     ff4:	ef 91       	pop	r30
     ff6:	bf 91       	pop	r27
     ff8:	af 91       	pop	r26
     ffa:	9f 91       	pop	r25
     ffc:	8f 91       	pop	r24
     ffe:	7f 91       	pop	r23
    1000:	6f 91       	pop	r22
    1002:	5f 91       	pop	r21
    1004:	4f 91       	pop	r20
    1006:	3f 91       	pop	r19
    1008:	2f 91       	pop	r18
    100a:	0f 90       	pop	r0
    100c:	0b be       	out	0x3b, r0	; 59
    100e:	0f 90       	pop	r0
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	0f 90       	pop	r0
    1014:	1f 90       	pop	r1
    1016:	18 95       	reti

00001018 <__vector_26>:
    write_buffer(3, RX, data);
}
#endif

#if (USART0 == 1)
ISR(USART0_UDRE_vect){
    1018:	1f 92       	push	r1
    101a:	0f 92       	push	r0
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	0f 92       	push	r0
    1020:	0b b6       	in	r0, 0x3b	; 59
    1022:	0f 92       	push	r0
    1024:	11 24       	eor	r1, r1
    1026:	8f 93       	push	r24
    1028:	9f 93       	push	r25
    102a:	ef 93       	push	r30
    102c:	ff 93       	push	r31
    else
        *usart[usart_number].ucsrc &= ~(1 << 3); /* USBS = 0 */
}

uint8_t buffer_level(uint8_t usart_number, uint8_t direction) {
    return usart[usart_number].buffer[direction].write - usart[usart_number].buffer[direction].read;
    102e:	90 91 03 03 	lds	r25, 0x0303
    1032:	80 91 02 03 	lds	r24, 0x0302
#endif

#if (USART0 == 1)
ISR(USART0_UDRE_vect){
    uint8_t data;
    if(buffer_level(0, TX) > 0) {
    1036:	98 17       	cp	r25, r24
    1038:	b1 f1       	breq	.+108    	; 0x10a6 <__vector_26+0x8e>
        /* check if usart is in 9-bit mode */
        if(UCSR0B & (1 << 2)) {
    103a:	80 91 c1 00 	lds	r24, 0x00C1
    103e:	82 ff       	sbrs	r24, 2
    1040:	1d c0       	rjmp	.+58     	; 0x107c <__vector_26+0x64>
    return usart[usart_number].buffer[direction].write - usart[usart_number].buffer[direction].read;
}

uint8_t read_buffer(uint8_t usart_number, uint8_t direction, uint8_t *data) {
    // buffer empty?
    if (usart[usart_number].buffer[direction].read == usart[usart_number].buffer[direction].write) return 1;
    1042:	90 91 02 03 	lds	r25, 0x0302
    1046:	80 91 03 03 	lds	r24, 0x0303
    104a:	98 17       	cp	r25, r24
    104c:	61 f0       	breq	.+24     	; 0x1066 <__vector_26+0x4e>
    // read a byte from the buffer
    *data = usart[usart_number].buffer[direction].data[usart[usart_number].buffer[direction].read];
    104e:	e0 91 02 03 	lds	r30, 0x0302
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	ee 57       	subi	r30, 0x7E	; 126
    1056:	fd 4f       	sbci	r31, 0xFD	; 253
    1058:	e0 81       	ld	r30, Z
    // update read index
    usart[usart_number].buffer[direction].read = (usart[usart_number].buffer[direction].read + 1) & BUFFERMASK;
    105a:	80 91 02 03 	lds	r24, 0x0302
    105e:	8f 5f       	subi	r24, 0xFF	; 255
    1060:	8f 77       	andi	r24, 0x7F	; 127
    1062:	80 93 02 03 	sts	0x0302, r24
    uint8_t data;
    if(buffer_level(0, TX) > 0) {
        /* check if usart is in 9-bit mode */
        if(UCSR0B & (1 << 2)) {
            read_buffer(0, TX, &data);
            if(data & 0x01)
    1066:	e0 ff       	sbrs	r30, 0
    1068:	04 c0       	rjmp	.+8      	; 0x1072 <__vector_26+0x5a>
                UCSR0B |= (1<<TXB80);
    106a:	80 91 c1 00 	lds	r24, 0x00C1
    106e:	81 60       	ori	r24, 0x01	; 1
    1070:	03 c0       	rjmp	.+6      	; 0x1078 <__vector_26+0x60>
            else
                UCSR0B &= ~(1<<TXB80);
    1072:	80 91 c1 00 	lds	r24, 0x00C1
    1076:	8e 7f       	andi	r24, 0xFE	; 254
    1078:	80 93 c1 00 	sts	0x00C1, r24
    return usart[usart_number].buffer[direction].write - usart[usart_number].buffer[direction].read;
}

uint8_t read_buffer(uint8_t usart_number, uint8_t direction, uint8_t *data) {
    // buffer empty?
    if (usart[usart_number].buffer[direction].read == usart[usart_number].buffer[direction].write) return 1;
    107c:	90 91 02 03 	lds	r25, 0x0302
    1080:	80 91 03 03 	lds	r24, 0x0303
    1084:	98 17       	cp	r25, r24
    1086:	61 f0       	breq	.+24     	; 0x10a0 <__vector_26+0x88>
    // read a byte from the buffer
    *data = usart[usart_number].buffer[direction].data[usart[usart_number].buffer[direction].read];
    1088:	e0 91 02 03 	lds	r30, 0x0302
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	ee 57       	subi	r30, 0x7E	; 126
    1090:	fd 4f       	sbci	r31, 0xFD	; 253
    1092:	e0 81       	ld	r30, Z
    // update read index
    usart[usart_number].buffer[direction].read = (usart[usart_number].buffer[direction].read + 1) & BUFFERMASK;
    1094:	80 91 02 03 	lds	r24, 0x0302
    1098:	8f 5f       	subi	r24, 0xFF	; 255
    109a:	8f 77       	andi	r24, 0x7F	; 127
    109c:	80 93 02 03 	sts	0x0302, r24
                UCSR0B |= (1<<TXB80);
            else
                UCSR0B &= ~(1<<TXB80);
        }
        read_buffer(0, TX, &data);
        UDR0 = data;
    10a0:	e0 93 c6 00 	sts	0x00C6, r30
    10a4:	05 c0       	rjmp	.+10     	; 0x10b0 <__vector_26+0x98>
        return;
    }
    UCSR0B &= ~(1<<UDRIE0);
    10a6:	80 91 c1 00 	lds	r24, 0x00C1
    10aa:	8f 7d       	andi	r24, 0xDF	; 223
    10ac:	80 93 c1 00 	sts	0x00C1, r24
}
    10b0:	ff 91       	pop	r31
    10b2:	ef 91       	pop	r30
    10b4:	9f 91       	pop	r25
    10b6:	8f 91       	pop	r24
    10b8:	0f 90       	pop	r0
    10ba:	0b be       	out	0x3b, r0	; 59
    10bc:	0f 90       	pop	r0
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	0f 90       	pop	r0
    10c2:	1f 90       	pop	r1
    10c4:	18 95       	reti

000010c6 <__vector_37>:
#endif

#if (USART1 == 1)
ISR(USART1_UDRE_vect){
    10c6:	1f 92       	push	r1
    10c8:	0f 92       	push	r0
    10ca:	0f b6       	in	r0, 0x3f	; 63
    10cc:	0f 92       	push	r0
    10ce:	0b b6       	in	r0, 0x3b	; 59
    10d0:	0f 92       	push	r0
    10d2:	11 24       	eor	r1, r1
    10d4:	8f 93       	push	r24
    10d6:	9f 93       	push	r25
    10d8:	ef 93       	push	r30
    10da:	ff 93       	push	r31
    else
        *usart[usart_number].ucsrc &= ~(1 << 3); /* USBS = 0 */
}

uint8_t buffer_level(uint8_t usart_number, uint8_t direction) {
    return usart[usart_number].buffer[direction].write - usart[usart_number].buffer[direction].read;
    10dc:	90 91 0f 04 	lds	r25, 0x040F
    10e0:	80 91 0e 04 	lds	r24, 0x040E
#endif

#if (USART1 == 1)
ISR(USART1_UDRE_vect){
    uint8_t data;
    if(buffer_level(1, TX) > 0) {
    10e4:	98 17       	cp	r25, r24
    10e6:	b1 f1       	breq	.+108    	; 0x1154 <__vector_37+0x8e>
        /* check if usart is in 9-bit mode */
        if(UCSR1B & (1 << 2)) {
    10e8:	80 91 c9 00 	lds	r24, 0x00C9
    10ec:	82 ff       	sbrs	r24, 2
    10ee:	1d c0       	rjmp	.+58     	; 0x112a <__vector_37+0x64>
    return usart[usart_number].buffer[direction].write - usart[usart_number].buffer[direction].read;
}

uint8_t read_buffer(uint8_t usart_number, uint8_t direction, uint8_t *data) {
    // buffer empty?
    if (usart[usart_number].buffer[direction].read == usart[usart_number].buffer[direction].write) return 1;
    10f0:	90 91 0e 04 	lds	r25, 0x040E
    10f4:	80 91 0f 04 	lds	r24, 0x040F
    10f8:	98 17       	cp	r25, r24
    10fa:	61 f0       	breq	.+24     	; 0x1114 <__vector_37+0x4e>
    // read a byte from the buffer
    *data = usart[usart_number].buffer[direction].data[usart[usart_number].buffer[direction].read];
    10fc:	e0 91 0e 04 	lds	r30, 0x040E
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	e2 57       	subi	r30, 0x72	; 114
    1104:	fc 4f       	sbci	r31, 0xFC	; 252
    1106:	e0 81       	ld	r30, Z
    // update read index
    usart[usart_number].buffer[direction].read = (usart[usart_number].buffer[direction].read + 1) & BUFFERMASK;
    1108:	80 91 0e 04 	lds	r24, 0x040E
    110c:	8f 5f       	subi	r24, 0xFF	; 255
    110e:	8f 77       	andi	r24, 0x7F	; 127
    1110:	80 93 0e 04 	sts	0x040E, r24
    if(buffer_level(1, TX) > 0) {
        /* check if usart is in 9-bit mode */
        if(UCSR1B & (1 << 2)) {
        
            read_buffer(1, TX, &data);
            if(data & 0x01)
    1114:	e0 ff       	sbrs	r30, 0
    1116:	04 c0       	rjmp	.+8      	; 0x1120 <__vector_37+0x5a>
                UCSR1B |= (1<<TXB81);
    1118:	80 91 c9 00 	lds	r24, 0x00C9
    111c:	81 60       	ori	r24, 0x01	; 1
    111e:	03 c0       	rjmp	.+6      	; 0x1126 <__vector_37+0x60>
            else
                UCSR1B &= ~(1<<TXB81);
    1120:	80 91 c9 00 	lds	r24, 0x00C9
    1124:	8e 7f       	andi	r24, 0xFE	; 254
    1126:	80 93 c9 00 	sts	0x00C9, r24
    return usart[usart_number].buffer[direction].write - usart[usart_number].buffer[direction].read;
}

uint8_t read_buffer(uint8_t usart_number, uint8_t direction, uint8_t *data) {
    // buffer empty?
    if (usart[usart_number].buffer[direction].read == usart[usart_number].buffer[direction].write) return 1;
    112a:	90 91 0e 04 	lds	r25, 0x040E
    112e:	80 91 0f 04 	lds	r24, 0x040F
    1132:	98 17       	cp	r25, r24
    1134:	61 f0       	breq	.+24     	; 0x114e <__vector_37+0x88>
    // read a byte from the buffer
    *data = usart[usart_number].buffer[direction].data[usart[usart_number].buffer[direction].read];
    1136:	e0 91 0e 04 	lds	r30, 0x040E
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	e2 57       	subi	r30, 0x72	; 114
    113e:	fc 4f       	sbci	r31, 0xFC	; 252
    1140:	e0 81       	ld	r30, Z
    // update read index
    usart[usart_number].buffer[direction].read = (usart[usart_number].buffer[direction].read + 1) & BUFFERMASK;
    1142:	80 91 0e 04 	lds	r24, 0x040E
    1146:	8f 5f       	subi	r24, 0xFF	; 255
    1148:	8f 77       	andi	r24, 0x7F	; 127
    114a:	80 93 0e 04 	sts	0x040E, r24
                UCSR1B |= (1<<TXB81);
            else
                UCSR1B &= ~(1<<TXB81);
        }
        read_buffer(1, TX, &data);
        UDR1 = data;
    114e:	e0 93 ce 00 	sts	0x00CE, r30
    1152:	05 c0       	rjmp	.+10     	; 0x115e <__vector_37+0x98>
        return;
    }
    UCSR1B &= ~(1<<UDRIE1);
    1154:	80 91 c9 00 	lds	r24, 0x00C9
    1158:	8f 7d       	andi	r24, 0xDF	; 223
    115a:	80 93 c9 00 	sts	0x00C9, r24
}
    115e:	ff 91       	pop	r31
    1160:	ef 91       	pop	r30
    1162:	9f 91       	pop	r25
    1164:	8f 91       	pop	r24
    1166:	0f 90       	pop	r0
    1168:	0b be       	out	0x3b, r0	; 59
    116a:	0f 90       	pop	r0
    116c:	0f be       	out	0x3f, r0	; 63
    116e:	0f 90       	pop	r0
    1170:	1f 90       	pop	r1
    1172:	18 95       	reti

00001174 <mdb_reader>:
            return;
        break; 
    }
}

void mdb_reader(void) {
    1174:	1f 93       	push	r17
    
    uint8_t data[2] = {0,0};
    uint8_t index = 0;
    
    // wait for enough data in buffer
    if(buffer_level(MDB_USART,RX) < 4) return;     
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	60 e0       	ldi	r22, 0x00	; 0
    117a:	0e 94 69 05 	call	0xad2	; 0xad2 <buffer_level>
    117e:	84 30       	cpi	r24, 0x04	; 4
    1180:	08 f4       	brcc	.+2      	; 0x1184 <mdb_reader+0x10>
    1182:	4e c0       	rjmp	.+156    	; 0x1220 <mdb_reader+0xac>

    // fetch the data from buffer
    for(index = 0; index < 2; index++) {
        data[index] = recv_mdb(MDB_USART);
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	0e 94 53 07 	call	0xea6	; 0xea6 <recv_mdb>
    118a:	18 2f       	mov	r17, r24
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	0e 94 53 07 	call	0xea6	; 0xea6 <recv_mdb>
    }
    
    // switch through subcommands
    switch(data[0]) {
    1192:	11 30       	cpi	r17, 0x01	; 1
    1194:	b1 f0       	breq	.+44     	; 0x11c2 <mdb_reader+0x4e>
    1196:	11 30       	cpi	r17, 0x01	; 1
    1198:	18 f0       	brcs	.+6      	; 0x11a0 <mdb_reader+0x2c>
    119a:	12 30       	cpi	r17, 0x02	; 2
    119c:	c1 f5       	brne	.+112    	; 0x120e <mdb_reader+0x9a>
    119e:	24 c0       	rjmp	.+72     	; 0x11e8 <mdb_reader+0x74>
        // reader disable
        case 0:
            if(data[1] != 0x14) {
    11a0:	84 31       	cpi	r24, 0x14	; 20
    11a2:	21 f0       	breq	.+8      	; 0x11ac <mdb_reader+0x38>
                send_str_p(UPLINK_USART,PSTR("Error: checksum error [READER]\r\n"));     
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	6a e6       	ldi	r22, 0x6A	; 106
    11a8:	71 e0       	ldi	r23, 0x01	; 1
    11aa:	34 c0       	rjmp	.+104    	; 0x1214 <mdb_reader+0xa0>
            #if DEBUG == 1
            send_str_p(UPLINK_USART, PSTR("READER DISABLE\r\n"));
            #endif
            
            // send ACK
            send_mdb(MDB_USART, 0x100);
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	60 e0       	ldi	r22, 0x00	; 0
    11b0:	71 e0       	ldi	r23, 0x01	; 1
    11b2:	0e 94 3f 07 	call	0xe7e	; 0xe7e <send_mdb>
            mdb_active_cmd = MDB_IDLE;
    11b6:	10 92 64 05 	sts	0x0564, r1
            mdb_poll_reply = MDB_REPLY_ACK;
    11ba:	10 92 63 05 	sts	0x0563, r1
            mdb_state = MDB_DISABLED;
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	10 c0       	rjmp	.+32     	; 0x11e2 <mdb_reader+0x6e>
        break;
        
        // reader enable
        case 1:
            if(data[1] != 0x15) {
    11c2:	85 31       	cpi	r24, 0x15	; 21
    11c4:	21 f0       	breq	.+8      	; 0x11ce <mdb_reader+0x5a>
                send_str_p(UPLINK_USART,PSTR("Error: checksum error [READER]\r\n"));        
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	69 e4       	ldi	r22, 0x49	; 73
    11ca:	71 e0       	ldi	r23, 0x01	; 1
    11cc:	23 c0       	rjmp	.+70     	; 0x1214 <mdb_reader+0xa0>
            #if DEBUG == 1
            send_str_p(UPLINK_USART, PSTR("READER ENABLE\r\n"));
            #endif
            
            // send ACK
            send_mdb(MDB_USART, 0x100);
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	60 e0       	ldi	r22, 0x00	; 0
    11d2:	71 e0       	ldi	r23, 0x01	; 1
    11d4:	0e 94 3f 07 	call	0xe7e	; 0xe7e <send_mdb>
            mdb_active_cmd = MDB_IDLE;
    11d8:	10 92 64 05 	sts	0x0564, r1
            mdb_poll_reply = MDB_REPLY_ACK;
    11dc:	10 92 63 05 	sts	0x0563, r1
            mdb_state = MDB_ENABLED;
    11e0:	82 e0       	ldi	r24, 0x02	; 2
    11e2:	80 93 62 05 	sts	0x0562, r24
    11e6:	1c c0       	rjmp	.+56     	; 0x1220 <mdb_reader+0xac>
        break;

        // reader cancel
        case 2:
            if(data[1] != 0x16) {
    11e8:	86 31       	cpi	r24, 0x16	; 22
    11ea:	21 f0       	breq	.+8      	; 0x11f4 <mdb_reader+0x80>
                send_str_p(UPLINK_USART,PSTR("Error: checksum error [READER]\r\n"));        
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	68 e2       	ldi	r22, 0x28	; 40
    11f0:	71 e0       	ldi	r23, 0x01	; 1
    11f2:	10 c0       	rjmp	.+32     	; 0x1214 <mdb_reader+0xa0>
            #if DEBUG == 1
            send_str_p(UPLINK_USART, PSTR("READER CANCEL\r\n"));
            #endif
            
            // send ACK
            send_mdb(MDB_USART, 0x100);
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	60 e0       	ldi	r22, 0x00	; 0
    11f8:	71 e0       	ldi	r23, 0x01	; 1
    11fa:	0e 94 3f 07 	call	0xe7e	; 0xe7e <send_mdb>
            mdb_active_cmd = MDB_IDLE;
    11fe:	10 92 64 05 	sts	0x0564, r1
            mdb_poll_reply = MDB_REPLY_CANCELED;
    1202:	89 e0       	ldi	r24, 0x09	; 9
    1204:	80 93 63 05 	sts	0x0563, r24
            mdb_state = MDB_ENABLED;
    1208:	10 93 62 05 	sts	0x0562, r17
    120c:	09 c0       	rjmp	.+18     	; 0x1220 <mdb_reader+0xac>
        break;

        // unknown subcommand
        default:
            send_str_p(UPLINK_USART,PSTR("Error: unknown subcommand [READER]\r\n"));
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	63 e0       	ldi	r22, 0x03	; 3
    1212:	71 e0       	ldi	r23, 0x01	; 1
    1214:	0e 94 28 07 	call	0xe50	; 0xe50 <send_str_p>
            mdb_active_cmd = MDB_IDLE;
    1218:	10 92 64 05 	sts	0x0564, r1
            mdb_poll_reply = MDB_REPLY_ACK;
    121c:	10 92 63 05 	sts	0x0563, r1
            return;
        break;
    }
}
    1220:	1f 91       	pop	r17
    1222:	08 95       	ret

00001224 <mdb_poll>:
            return;
        break;
	}
}

void mdb_poll(void) {
    1224:	0f 93       	push	r16
    1226:	1f 93       	push	r17
    
    static uint8_t state = 0;
    uint16_t checksum = 0;
    
    if(state == 0) {
    1228:	80 91 7c 05 	lds	r24, 0x057C
    122c:	88 23       	and	r24, r24
    122e:	c9 f4       	brne	.+50     	; 0x1262 <mdb_poll+0x3e>
        // Wait for enough data in buffer
        if(buffer_level(MDB_USART,RX) < 2) return; 
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	0e 94 69 05 	call	0xad2	; 0xad2 <buffer_level>
    1238:	82 30       	cpi	r24, 0x02	; 2
    123a:	08 f4       	brcc	.+2      	; 0x123e <mdb_poll+0x1a>
    123c:	b8 c1       	rjmp	.+880    	; 0x15ae <mdb_poll+0x38a>
        #if DEBUG == 1
        send_str_p(UPLINK_USART, PSTR("POLL\r\n"));
        #endif
        
        // validate checksum
        if(recv_mdb(MDB_USART) != MDB_POLL) {
    123e:	81 e0       	ldi	r24, 0x01	; 1
    1240:	0e 94 53 07 	call	0xea6	; 0xea6 <recv_mdb>
    1244:	42 97       	sbiw	r24, 0x12	; 18
    1246:	51 f0       	breq	.+20     	; 0x125c <mdb_poll+0x38>
            mdb_active_cmd = MDB_IDLE;
    1248:	10 92 64 05 	sts	0x0564, r1
            mdb_poll_reply = MDB_REPLY_ACK;
    124c:	10 92 63 05 	sts	0x0563, r1
            state = 0;
    1250:	10 92 7c 05 	sts	0x057C, r1
            send_str_p(UPLINK_USART,PSTR("Error: Invalid checksum [Poll]\r\n"));
    1254:	80 e0       	ldi	r24, 0x00	; 0
    1256:	62 e8       	ldi	r22, 0x82	; 130
    1258:	73 e0       	ldi	r23, 0x03	; 3
    125a:	4a c0       	rjmp	.+148    	; 0x12f0 <mdb_poll+0xcc>
            return;  
        } 
        state = 1;
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	80 93 7c 05 	sts	0x057C, r24
    } 

    switch(mdb_poll_reply) {
    1262:	80 91 63 05 	lds	r24, 0x0563
    1266:	85 30       	cpi	r24, 0x05	; 5
    1268:	09 f4       	brne	.+2      	; 0x126c <mdb_poll+0x48>
    126a:	93 c0       	rjmp	.+294    	; 0x1392 <mdb_poll+0x16e>
    126c:	86 30       	cpi	r24, 0x06	; 6
    126e:	40 f4       	brcc	.+16     	; 0x1280 <mdb_poll+0x5c>
    1270:	81 30       	cpi	r24, 0x01	; 1
    1272:	c9 f0       	breq	.+50     	; 0x12a6 <mdb_poll+0x82>
    1274:	81 30       	cpi	r24, 0x01	; 1
    1276:	88 f0       	brcs	.+34     	; 0x129a <mdb_poll+0x76>
    1278:	84 30       	cpi	r24, 0x04	; 4
    127a:	09 f0       	breq	.+2      	; 0x127e <mdb_poll+0x5a>
    127c:	98 c1       	rjmp	.+816    	; 0x15ae <mdb_poll+0x38a>
    127e:	3b c0       	rjmp	.+118    	; 0x12f6 <mdb_poll+0xd2>
    1280:	87 30       	cpi	r24, 0x07	; 7
    1282:	09 f4       	brne	.+2      	; 0x1286 <mdb_poll+0x62>
    1284:	07 c1       	rjmp	.+526    	; 0x1494 <mdb_poll+0x270>
    1286:	87 30       	cpi	r24, 0x07	; 7
    1288:	08 f4       	brcc	.+2      	; 0x128c <mdb_poll+0x68>
    128a:	b5 c0       	rjmp	.+362    	; 0x13f6 <mdb_poll+0x1d2>
    128c:	88 30       	cpi	r24, 0x08	; 8
    128e:	09 f4       	brne	.+2      	; 0x1292 <mdb_poll+0x6e>
    1290:	3c c1       	rjmp	.+632    	; 0x150a <mdb_poll+0x2e6>
    1292:	89 30       	cpi	r24, 0x09	; 9
    1294:	09 f0       	breq	.+2      	; 0x1298 <mdb_poll+0x74>
    1296:	8b c1       	rjmp	.+790    	; 0x15ae <mdb_poll+0x38a>
    1298:	5c c1       	rjmp	.+696    	; 0x1552 <mdb_poll+0x32e>
        
        case MDB_REPLY_ACK:
            // send ACK
            send_mdb(MDB_USART, 0x100);
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	60 e0       	ldi	r22, 0x00	; 0
    129e:	71 e0       	ldi	r23, 0x01	; 1
    12a0:	0e 94 3f 07 	call	0xe7e	; 0xe7e <send_mdb>
    12a4:	7e c1       	rjmp	.+764    	; 0x15a2 <mdb_poll+0x37e>
            state = 0;
        break;

        case MDB_REPLY_JUST_RESET:
            // send JUST RESET
            if(state == 1) {
    12a6:	80 91 7c 05 	lds	r24, 0x057C
    12aa:	81 30       	cpi	r24, 0x01	; 1
    12ac:	41 f4       	brne	.+16     	; 0x12be <mdb_poll+0x9a>
                send_mdb(MDB_USART, 0x000);
    12ae:	60 e0       	ldi	r22, 0x00	; 0
    12b0:	70 e0       	ldi	r23, 0x00	; 0
    12b2:	0e 94 3f 07 	call	0xe7e	; 0xe7e <send_mdb>
                send_mdb(MDB_USART, 0x100);
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	60 e0       	ldi	r22, 0x00	; 0
    12ba:	71 e0       	ldi	r23, 0x01	; 1
    12bc:	55 c1       	rjmp	.+682    	; 0x1568 <mdb_poll+0x344>
                state = 2;
            }
            // wait for the ACK
            else if(state == 2) {
    12be:	82 30       	cpi	r24, 0x02	; 2
    12c0:	09 f0       	breq	.+2      	; 0x12c4 <mdb_poll+0xa0>
    12c2:	75 c1       	rjmp	.+746    	; 0x15ae <mdb_poll+0x38a>
                // wait for enough data in Buffer
                if(buffer_level(MDB_USART,RX) < 2) return; 
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	60 e0       	ldi	r22, 0x00	; 0
    12c8:	0e 94 69 05 	call	0xad2	; 0xad2 <buffer_level>
    12cc:	82 30       	cpi	r24, 0x02	; 2
    12ce:	08 f4       	brcc	.+2      	; 0x12d2 <mdb_poll+0xae>
    12d0:	6e c1       	rjmp	.+732    	; 0x15ae <mdb_poll+0x38a>
                // check if VMC sent ACK
                if(recv_mdb(MDB_USART) != 0x000) {
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	0e 94 53 07 	call	0xea6	; 0xea6 <recv_mdb>
    12d8:	89 2b       	or	r24, r25
    12da:	09 f4       	brne	.+2      	; 0x12de <mdb_poll+0xba>
    12dc:	62 c1       	rjmp	.+708    	; 0x15a2 <mdb_poll+0x37e>
                    mdb_active_cmd = MDB_IDLE;
    12de:	10 92 64 05 	sts	0x0564, r1
                    mdb_poll_reply = MDB_REPLY_ACK;
    12e2:	10 92 63 05 	sts	0x0563, r1
                    state = 0;
    12e6:	10 92 7c 05 	sts	0x057C, r1
                    send_str_p(UPLINK_USART,PSTR("Error: no ACK received on [JUST RESET]\r\n"));
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	69 e5       	ldi	r22, 0x59	; 89
    12ee:	73 e0       	ldi	r23, 0x03	; 3
    12f0:	0e 94 28 07 	call	0xe50	; 0xe50 <send_str_p>
    12f4:	5c c1       	rjmp	.+696    	; 0x15ae <mdb_poll+0x38a>
        case MDB_REPLY_DISPLAY_REQ:
            // not yet implemented			
        break;

        case MDB_REPLY_BEGIN_SESSION:
            if(session.start.flag && state == 1) {
    12f6:	80 91 6e 05 	lds	r24, 0x056E
    12fa:	88 23       	and	r24, r24
    12fc:	09 f4       	brne	.+2      	; 0x1300 <mdb_poll+0xdc>
    12fe:	57 c1       	rjmp	.+686    	; 0x15ae <mdb_poll+0x38a>
    1300:	80 91 7c 05 	lds	r24, 0x057C
    1304:	81 30       	cpi	r24, 0x01	; 1
    1306:	e1 f4       	brne	.+56     	; 0x1340 <mdb_poll+0x11c>
                char buffer[40];
                send_mdb(MDB_USART, 0x003);
    1308:	63 e0       	ldi	r22, 0x03	; 3
    130a:	70 e0       	ldi	r23, 0x00	; 0
    130c:	0e 94 3f 07 	call	0xe7e	; 0xe7e <send_mdb>
                //sprintf(buffer, "Session.start.funds >> 8: %d", (session.start.funds >> 8));
                //send_str(0, buffer);
                send_mdb(MDB_USART, (session.start.funds >> 8));
    1310:	60 91 70 05 	lds	r22, 0x0570
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	70 e0       	ldi	r23, 0x00	; 0
    1318:	0e 94 3f 07 	call	0xe7e	; 0xe7e <send_mdb>
                //sprintf(buffer, "Session.start.funds & 0xFF: %d", (session.start.funds & 0xFF));
                //send_str(0, buffer);
                send_mdb(MDB_USART, (session.start.funds & 0xFF));
    131c:	60 91 6f 05 	lds	r22, 0x056F
    1320:	70 91 70 05 	lds	r23, 0x0570
    1324:	70 70       	andi	r23, 0x00	; 0
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	0e 94 3f 07 	call	0xe7e	; 0xe7e <send_mdb>
                checksum = 0x003 + (session.start.funds >> 8) + (session.start.funds & 0xFF);
    132c:	80 91 6f 05 	lds	r24, 0x056F
    1330:	00 91 70 05 	lds	r16, 0x0570
                checksum = (checksum & 0xFF) | 0x100;
    1334:	10 e0       	ldi	r17, 0x00	; 0
    1336:	08 0f       	add	r16, r24
    1338:	11 1d       	adc	r17, r1
    133a:	0d 5f       	subi	r16, 0xFD	; 253
    133c:	1f 4f       	sbci	r17, 0xFF	; 255
    133e:	7f c0       	rjmp	.+254    	; 0x143e <mdb_poll+0x21a>
                send_mdb(MDB_USART, checksum);
                state = 2;
            }
            
            else if(session.start.flag && state == 2) {
    1340:	82 30       	cpi	r24, 0x02	; 2
    1342:	09 f0       	breq	.+2      	; 0x1346 <mdb_poll+0x122>
    1344:	34 c1       	rjmp	.+616    	; 0x15ae <mdb_poll+0x38a>
                // wait for enough data in Buffer
                if(buffer_level(MDB_USART,RX) < 2) return; 
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	60 e0       	ldi	r22, 0x00	; 0
    134a:	0e 94 69 05 	call	0xad2	; 0xad2 <buffer_level>
    134e:	82 30       	cpi	r24, 0x02	; 2
    1350:	08 f4       	brcc	.+2      	; 0x1354 <mdb_poll+0x130>
    1352:	2d c1       	rjmp	.+602    	; 0x15ae <mdb_poll+0x38a>
                // check if VMC sent ACK
                if(recv_mdb(MDB_USART) != 0x000) {
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	0e 94 53 07 	call	0xea6	; 0xea6 <recv_mdb>
    135a:	89 2b       	or	r24, r25
    135c:	81 f0       	breq	.+32     	; 0x137e <mdb_poll+0x15a>
                    mdb_active_cmd = MDB_IDLE;
    135e:	10 92 64 05 	sts	0x0564, r1
                    mdb_poll_reply = MDB_REPLY_ACK;
    1362:	10 92 63 05 	sts	0x0563, r1
                    session.start.flag = 0;
    1366:	10 92 6e 05 	sts	0x056E, r1
                    session.start.funds = 0;
    136a:	10 92 70 05 	sts	0x0570, r1
    136e:	10 92 6f 05 	sts	0x056F, r1
                    state = 0;
    1372:	10 92 7c 05 	sts	0x057C, r1
                    send_str_p(UPLINK_USART,PSTR("Error: no ACK received on [START SESSION]\r\n"));
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	6d e2       	ldi	r22, 0x2D	; 45
    137a:	73 e0       	ldi	r23, 0x03	; 3
    137c:	b9 cf       	rjmp	.-142    	; 0x12f0 <mdb_poll+0xcc>
                    return;    
                }
                session.start.flag = 0;
    137e:	10 92 6e 05 	sts	0x056E, r1
                session.start.funds = 0;
    1382:	10 92 70 05 	sts	0x0570, r1
    1386:	10 92 6f 05 	sts	0x056F, r1
                mdb_state = MDB_SESSION_IDLE;
    138a:	83 e0       	ldi	r24, 0x03	; 3
    138c:	80 93 62 05 	sts	0x0562, r24
    1390:	08 c1       	rjmp	.+528    	; 0x15a2 <mdb_poll+0x37e>
                return;
            }
        break;

        case MDB_REPLY_SESSION_CANCEL_REQ:
            if(state == 1) {
    1392:	80 91 7c 05 	lds	r24, 0x057C
    1396:	81 30       	cpi	r24, 0x01	; 1
    1398:	41 f4       	brne	.+16     	; 0x13aa <mdb_poll+0x186>
                send_mdb(MDB_USART, 0x004);
    139a:	64 e0       	ldi	r22, 0x04	; 4
    139c:	70 e0       	ldi	r23, 0x00	; 0
    139e:	0e 94 3f 07 	call	0xe7e	; 0xe7e <send_mdb>
                send_mdb(MDB_USART, 0x104);
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	64 e0       	ldi	r22, 0x04	; 4
    13a6:	71 e0       	ldi	r23, 0x01	; 1
    13a8:	df c0       	rjmp	.+446    	; 0x1568 <mdb_poll+0x344>
                state = 2;
            }
            else if(state == 2) {
    13aa:	82 30       	cpi	r24, 0x02	; 2
    13ac:	09 f0       	breq	.+2      	; 0x13b0 <mdb_poll+0x18c>
    13ae:	ff c0       	rjmp	.+510    	; 0x15ae <mdb_poll+0x38a>
                // wait for enough data in Buffer
                if(buffer_level(MDB_USART,RX) < 2) return; 
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	60 e0       	ldi	r22, 0x00	; 0
    13b4:	0e 94 69 05 	call	0xad2	; 0xad2 <buffer_level>
    13b8:	82 30       	cpi	r24, 0x02	; 2
    13ba:	08 f4       	brcc	.+2      	; 0x13be <mdb_poll+0x19a>
    13bc:	f8 c0       	rjmp	.+496    	; 0x15ae <mdb_poll+0x38a>
                // check if VMC sent ACK
                if(recv_mdb(MDB_USART) != 0x000) {
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	0e 94 53 07 	call	0xea6	; 0xea6 <recv_mdb>
    13c4:	89 2b       	or	r24, r25
    13c6:	81 f0       	breq	.+32     	; 0x13e8 <mdb_poll+0x1c4>
                    mdb_active_cmd = MDB_IDLE;
    13c8:	10 92 64 05 	sts	0x0564, r1
                    mdb_poll_reply = MDB_REPLY_ACK;
    13cc:	10 92 63 05 	sts	0x0563, r1
                    session.start.flag = 0;
    13d0:	10 92 6e 05 	sts	0x056E, r1
                    session.start.funds = 0;
    13d4:	10 92 70 05 	sts	0x0570, r1
    13d8:	10 92 6f 05 	sts	0x056F, r1
                    state = 0;
    13dc:	10 92 7c 05 	sts	0x057C, r1
                    send_str_p(UPLINK_USART,PSTR("Error: no ACK received on [SESSION CANCEL REQ]\r\n"));
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	6c ef       	ldi	r22, 0xFC	; 252
    13e4:	72 e0       	ldi	r23, 0x02	; 2
    13e6:	84 cf       	rjmp	.-248    	; 0x12f0 <mdb_poll+0xcc>
                    return;    
                }
                session.start.flag = 0;
    13e8:	10 92 6e 05 	sts	0x056E, r1
                session.start.funds = 0;
    13ec:	10 92 70 05 	sts	0x0570, r1
    13f0:	10 92 6f 05 	sts	0x056F, r1
    13f4:	d6 c0       	rjmp	.+428    	; 0x15a2 <mdb_poll+0x37e>
                return;    
            }
        break;
        
        case MDB_REPLY_VEND_APPROVED:
            if(session.result.vend_approved && state == 1) {
    13f6:	80 91 71 05 	lds	r24, 0x0571
    13fa:	88 23       	and	r24, r24
    13fc:	09 f4       	brne	.+2      	; 0x1400 <mdb_poll+0x1dc>
    13fe:	d7 c0       	rjmp	.+430    	; 0x15ae <mdb_poll+0x38a>
    1400:	80 91 7c 05 	lds	r24, 0x057C
    1404:	81 30       	cpi	r24, 0x01	; 1
    1406:	01 f5       	brne	.+64     	; 0x1448 <mdb_poll+0x224>
                send_mdb(MDB_USART, 0x005);
    1408:	65 e0       	ldi	r22, 0x05	; 5
    140a:	70 e0       	ldi	r23, 0x00	; 0
    140c:	0e 94 3f 07 	call	0xe7e	; 0xe7e <send_mdb>
                send_mdb(MDB_USART, (session.result.vend_amount >> 8));
    1410:	60 91 74 05 	lds	r22, 0x0574
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	70 e0       	ldi	r23, 0x00	; 0
    1418:	0e 94 3f 07 	call	0xe7e	; 0xe7e <send_mdb>
                send_mdb(MDB_USART, (session.result.vend_amount & 0xFF));
    141c:	60 91 73 05 	lds	r22, 0x0573
    1420:	70 91 74 05 	lds	r23, 0x0574
    1424:	70 70       	andi	r23, 0x00	; 0
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	0e 94 3f 07 	call	0xe7e	; 0xe7e <send_mdb>
                checksum = 0x005 + (session.result.vend_amount >> 8) + (session.result.vend_amount & 0xFF);
    142c:	80 91 73 05 	lds	r24, 0x0573
    1430:	00 91 74 05 	lds	r16, 0x0574
                checksum = (checksum & 0xFF) | 0x100;
    1434:	10 e0       	ldi	r17, 0x00	; 0
    1436:	08 0f       	add	r16, r24
    1438:	11 1d       	adc	r17, r1
    143a:	0b 5f       	subi	r16, 0xFB	; 251
    143c:	1f 4f       	sbci	r17, 0xFF	; 255
    143e:	10 70       	andi	r17, 0x00	; 0
                send_mdb(MDB_USART, checksum);
    1440:	11 60       	ori	r17, 0x01	; 1
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	b8 01       	movw	r22, r16
    1446:	90 c0       	rjmp	.+288    	; 0x1568 <mdb_poll+0x344>
                state = 2;
            }
            else if(session.result.vend_approved && state == 2) {
    1448:	82 30       	cpi	r24, 0x02	; 2
    144a:	09 f0       	breq	.+2      	; 0x144e <mdb_poll+0x22a>
    144c:	b0 c0       	rjmp	.+352    	; 0x15ae <mdb_poll+0x38a>
                // wait for enough data in Buffer
                if(buffer_level(MDB_USART,RX) < 2) return; 
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	60 e0       	ldi	r22, 0x00	; 0
    1452:	0e 94 69 05 	call	0xad2	; 0xad2 <buffer_level>
    1456:	82 30       	cpi	r24, 0x02	; 2
    1458:	08 f4       	brcc	.+2      	; 0x145c <mdb_poll+0x238>
    145a:	a9 c0       	rjmp	.+338    	; 0x15ae <mdb_poll+0x38a>
                // check if VMC sent ACK
                if(recv_mdb(MDB_USART) != 0x000) {
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	0e 94 53 07 	call	0xea6	; 0xea6 <recv_mdb>
    1462:	89 2b       	or	r24, r25
    1464:	81 f0       	breq	.+32     	; 0x1486 <mdb_poll+0x262>
                    mdb_active_cmd = MDB_IDLE;
    1466:	10 92 64 05 	sts	0x0564, r1
                    mdb_poll_reply = MDB_REPLY_ACK;
    146a:	10 92 63 05 	sts	0x0563, r1
                    session.result.vend_approved = 0;
    146e:	10 92 71 05 	sts	0x0571, r1
                    session.result.vend_amount = 0;
    1472:	10 92 74 05 	sts	0x0574, r1
    1476:	10 92 73 05 	sts	0x0573, r1
                    state = 0;
    147a:	10 92 7c 05 	sts	0x057C, r1
                    send_str_p(UPLINK_USART,PSTR("Error: no ACK received on [VEND APPROVE]\r\n"));
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	61 ed       	ldi	r22, 0xD1	; 209
    1482:	72 e0       	ldi	r23, 0x02	; 2
    1484:	35 cf       	rjmp	.-406    	; 0x12f0 <mdb_poll+0xcc>
                    return;    
                }
                session.result.vend_approved = 0;
    1486:	10 92 71 05 	sts	0x0571, r1
                session.result.vend_amount = 0;
    148a:	10 92 74 05 	sts	0x0574, r1
    148e:	10 92 73 05 	sts	0x0573, r1
    1492:	87 c0       	rjmp	.+270    	; 0x15a2 <mdb_poll+0x37e>
                return;    
            }
        break;
        
        case MDB_REPLY_VEND_DENIED:
            if(session.result.vend_denied && state == 1) {
    1494:	80 91 72 05 	lds	r24, 0x0572
    1498:	88 23       	and	r24, r24
    149a:	09 f4       	brne	.+2      	; 0x149e <mdb_poll+0x27a>
    149c:	88 c0       	rjmp	.+272    	; 0x15ae <mdb_poll+0x38a>
    149e:	80 91 7c 05 	lds	r24, 0x057C
    14a2:	81 30       	cpi	r24, 0x01	; 1
    14a4:	41 f4       	brne	.+16     	; 0x14b6 <mdb_poll+0x292>
                send_mdb(MDB_USART, 0x006);
    14a6:	66 e0       	ldi	r22, 0x06	; 6
    14a8:	70 e0       	ldi	r23, 0x00	; 0
    14aa:	0e 94 3f 07 	call	0xe7e	; 0xe7e <send_mdb>
                send_mdb(MDB_USART, 0x106);
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	66 e0       	ldi	r22, 0x06	; 6
    14b2:	71 e0       	ldi	r23, 0x01	; 1
    14b4:	59 c0       	rjmp	.+178    	; 0x1568 <mdb_poll+0x344>
                state = 2;
            }
            else if(session.result.vend_denied && state == 2) {
    14b6:	82 30       	cpi	r24, 0x02	; 2
    14b8:	09 f0       	breq	.+2      	; 0x14bc <mdb_poll+0x298>
    14ba:	79 c0       	rjmp	.+242    	; 0x15ae <mdb_poll+0x38a>
                // wait for enough data in Buffer
                if(buffer_level(MDB_USART,RX) < 2) return; 
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	60 e0       	ldi	r22, 0x00	; 0
    14c0:	0e 94 69 05 	call	0xad2	; 0xad2 <buffer_level>
    14c4:	82 30       	cpi	r24, 0x02	; 2
    14c6:	08 f4       	brcc	.+2      	; 0x14ca <mdb_poll+0x2a6>
    14c8:	72 c0       	rjmp	.+228    	; 0x15ae <mdb_poll+0x38a>
                // check if VMC sent ACK
                if(recv_mdb(MDB_USART) != 0x000) {
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	0e 94 53 07 	call	0xea6	; 0xea6 <recv_mdb>
    14d0:	89 2b       	or	r24, r25
    14d2:	91 f0       	breq	.+36     	; 0x14f8 <mdb_poll+0x2d4>
                    mdb_active_cmd = MDB_IDLE;
    14d4:	10 92 64 05 	sts	0x0564, r1
                    mdb_poll_reply = MDB_REPLY_ACK;
    14d8:	10 92 63 05 	sts	0x0563, r1
                    session.start.flag = 0;
    14dc:	10 92 6e 05 	sts	0x056E, r1
                    session.start.funds = 0;
    14e0:	10 92 70 05 	sts	0x0570, r1
    14e4:	10 92 6f 05 	sts	0x056F, r1
                    session.result.vend_denied = 0;
    14e8:	10 92 72 05 	sts	0x0572, r1
                    state = 0;
    14ec:	10 92 7c 05 	sts	0x057C, r1
                    send_str_p(UPLINK_USART,PSTR("Error: no ACK received on [VEND DENY]\r\n"));
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	69 ea       	ldi	r22, 0xA9	; 169
    14f4:	72 e0       	ldi	r23, 0x02	; 2
    14f6:	fc ce       	rjmp	.-520    	; 0x12f0 <mdb_poll+0xcc>
                    return;    
                }
                session.start.flag = 0;
    14f8:	10 92 6e 05 	sts	0x056E, r1
                session.start.funds = 0;
    14fc:	10 92 70 05 	sts	0x0570, r1
    1500:	10 92 6f 05 	sts	0x056F, r1
                session.result.vend_denied = 0;
    1504:	10 92 72 05 	sts	0x0572, r1
    1508:	4c c0       	rjmp	.+152    	; 0x15a2 <mdb_poll+0x37e>
                return;    
            }
        break;
        
        case MDB_REPLY_END_SESSION:
            if(state == 1) {
    150a:	80 91 7c 05 	lds	r24, 0x057C
    150e:	81 30       	cpi	r24, 0x01	; 1
    1510:	41 f4       	brne	.+16     	; 0x1522 <mdb_poll+0x2fe>
                send_mdb(MDB_USART, 0x007);
    1512:	67 e0       	ldi	r22, 0x07	; 7
    1514:	70 e0       	ldi	r23, 0x00	; 0
    1516:	0e 94 3f 07 	call	0xe7e	; 0xe7e <send_mdb>
                send_mdb(MDB_USART, 0x107);
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	67 e0       	ldi	r22, 0x07	; 7
    151e:	71 e0       	ldi	r23, 0x01	; 1
    1520:	23 c0       	rjmp	.+70     	; 0x1568 <mdb_poll+0x344>
                state = 2;
            }
            else if(state == 2) {
    1522:	82 30       	cpi	r24, 0x02	; 2
    1524:	09 f0       	breq	.+2      	; 0x1528 <mdb_poll+0x304>
    1526:	43 c0       	rjmp	.+134    	; 0x15ae <mdb_poll+0x38a>
                // wait for enough data in Buffer
                if(buffer_level(MDB_USART,RX) < 2) return; 
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	60 e0       	ldi	r22, 0x00	; 0
    152c:	0e 94 69 05 	call	0xad2	; 0xad2 <buffer_level>
    1530:	82 30       	cpi	r24, 0x02	; 2
    1532:	e8 f1       	brcs	.+122    	; 0x15ae <mdb_poll+0x38a>
                // check if VMC sent ACK
                if(recv_mdb(MDB_USART) != 0x000) {
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	0e 94 53 07 	call	0xea6	; 0xea6 <recv_mdb>
    153a:	89 2b       	or	r24, r25
    153c:	91 f1       	breq	.+100    	; 0x15a2 <mdb_poll+0x37e>
                    mdb_active_cmd = MDB_IDLE;
    153e:	10 92 64 05 	sts	0x0564, r1
                    mdb_poll_reply = MDB_REPLY_ACK;
    1542:	10 92 63 05 	sts	0x0563, r1
                    state = 0;
    1546:	10 92 7c 05 	sts	0x057C, r1
                    send_str_p(UPLINK_USART,PSTR("Error: no ACK received on [END SESSION]\r\n"));
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	6f e7       	ldi	r22, 0x7F	; 127
    154e:	72 e0       	ldi	r23, 0x02	; 2
    1550:	cf ce       	rjmp	.-610    	; 0x12f0 <mdb_poll+0xcc>
                return;    
            }
        break;
        
        case MDB_REPLY_CANCELED:
            if(state == 1) {
    1552:	80 91 7c 05 	lds	r24, 0x057C
    1556:	81 30       	cpi	r24, 0x01	; 1
    1558:	69 f4       	brne	.+26     	; 0x1574 <mdb_poll+0x350>
                send_mdb(MDB_USART, 0x008);
    155a:	68 e0       	ldi	r22, 0x08	; 8
    155c:	70 e0       	ldi	r23, 0x00	; 0
    155e:	0e 94 3f 07 	call	0xe7e	; 0xe7e <send_mdb>
                send_mdb(MDB_USART, 0x108);
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	68 e0       	ldi	r22, 0x08	; 8
    1566:	71 e0       	ldi	r23, 0x01	; 1
    1568:	0e 94 3f 07 	call	0xe7e	; 0xe7e <send_mdb>
                state = 2;
    156c:	82 e0       	ldi	r24, 0x02	; 2
    156e:	80 93 7c 05 	sts	0x057C, r24
    1572:	1d c0       	rjmp	.+58     	; 0x15ae <mdb_poll+0x38a>
            }
            else if(state == 2) {
    1574:	82 30       	cpi	r24, 0x02	; 2
    1576:	d9 f4       	brne	.+54     	; 0x15ae <mdb_poll+0x38a>
                // wait for enough data in Buffer
                if(buffer_level(MDB_USART,RX) < 2) return; 
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	60 e0       	ldi	r22, 0x00	; 0
    157c:	0e 94 69 05 	call	0xad2	; 0xad2 <buffer_level>
    1580:	82 30       	cpi	r24, 0x02	; 2
    1582:	a8 f0       	brcs	.+42     	; 0x15ae <mdb_poll+0x38a>
                // check if VMC sent ACK
                if(recv_mdb(MDB_USART) != 0x000) {
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	0e 94 53 07 	call	0xea6	; 0xea6 <recv_mdb>
    158a:	89 2b       	or	r24, r25
    158c:	51 f0       	breq	.+20     	; 0x15a2 <mdb_poll+0x37e>
                    mdb_active_cmd = MDB_IDLE;
    158e:	10 92 64 05 	sts	0x0564, r1
                    mdb_poll_reply = MDB_REPLY_ACK;
    1592:	10 92 63 05 	sts	0x0563, r1
                    state = 0;
    1596:	10 92 7c 05 	sts	0x057C, r1
                    send_str_p(UPLINK_USART,PSTR("Error: no ACK received on [REPLY CANCELED]\r\n"));
    159a:	80 e0       	ldi	r24, 0x00	; 0
    159c:	62 e5       	ldi	r22, 0x52	; 82
    159e:	72 e0       	ldi	r23, 0x02	; 2
    15a0:	a7 ce       	rjmp	.-690    	; 0x12f0 <mdb_poll+0xcc>
                    return;    
                }
                mdb_active_cmd = MDB_IDLE;
    15a2:	10 92 64 05 	sts	0x0564, r1
                mdb_poll_reply = MDB_REPLY_ACK;
    15a6:	10 92 63 05 	sts	0x0563, r1
                state = 0;
    15aa:	10 92 7c 05 	sts	0x057C, r1
        case MDB_REPLY_CMD_OUT_SEQUENCE:
    
        break;
        
    }
}
    15ae:	1f 91       	pop	r17
    15b0:	0f 91       	pop	r16
    15b2:	08 95       	ret

000015b4 <mdb_setup>:
    mdb_state = MDB_INACTIVE;
    mdb_active_cmd = MDB_IDLE;
	mdb_poll_reply = MDB_REPLY_JUST_RESET;
}

void mdb_setup(void) {
    15b4:	ef 92       	push	r14
    15b6:	ff 92       	push	r15
    15b8:	0f 93       	push	r16
    15ba:	1f 93       	push	r17
    15bc:	df 93       	push	r29
    15be:	cf 93       	push	r28
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <mdb_setup+0xe>
    15c2:	00 d0       	rcall	.+0      	; 0x15c4 <mdb_setup+0x10>
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
    
    static uint16_t checksum = MDB_SETUP;
    static uint8_t state = 0;
    uint8_t data[6] = {0,0,0,0,0,0};
    15c8:	8e 01       	movw	r16, r28
    15ca:	0f 5f       	subi	r16, 0xFF	; 255
    15cc:	1f 4f       	sbci	r17, 0xFF	; 255
    15ce:	86 e0       	ldi	r24, 0x06	; 6
    15d0:	f8 01       	movw	r30, r16
    15d2:	11 92       	st	Z+, r1
    15d4:	8a 95       	dec	r24
    15d6:	e9 f7       	brne	.-6      	; 0x15d2 <mdb_setup+0x1e>
    uint8_t index = 0;
    
    if(state < 2) {
    15d8:	80 91 7d 05 	lds	r24, 0x057D
    15dc:	82 30       	cpi	r24, 0x02	; 2
    15de:	08 f0       	brcs	.+2      	; 0x15e2 <mdb_setup+0x2e>
    15e0:	46 c0       	rjmp	.+140    	; 0x166e <mdb_setup+0xba>
    	// Wait for enough data in buffer
		if(buffer_level(MDB_USART,RX) < 12) return; 
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	60 e0       	ldi	r22, 0x00	; 0
    15e6:	0e 94 69 05 	call	0xad2	; 0xad2 <buffer_level>
    15ea:	8c 30       	cpi	r24, 0x0C	; 12
    15ec:	08 f4       	brcc	.+2      	; 0x15f0 <mdb_setup+0x3c>
    15ee:	04 c1       	rjmp	.+520    	; 0x17f8 <mdb_setup+0x244>
		
        // fetch the data from buffer
		for(index = 0; index < 6; index++) {
    15f0:	87 e0       	ldi	r24, 0x07	; 7
    15f2:	e8 2e       	mov	r14, r24
    15f4:	f1 2c       	mov	r15, r1
    15f6:	ec 0e       	add	r14, r28
    15f8:	fd 1e       	adc	r15, r29
            data[index] = (uint8_t) recv_mdb(MDB_USART);
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	0e 94 53 07 	call	0xea6	; 0xea6 <recv_mdb>
    1600:	f8 01       	movw	r30, r16
    1602:	81 93       	st	Z+, r24
    1604:	8f 01       	movw	r16, r30
    if(state < 2) {
    	// Wait for enough data in buffer
		if(buffer_level(MDB_USART,RX) < 12) return; 
		
        // fetch the data from buffer
		for(index = 0; index < 6; index++) {
    1606:	ee 15       	cp	r30, r14
    1608:	ff 05       	cpc	r31, r15
    160a:	b9 f7       	brne	.-18     	; 0x15fa <mdb_setup+0x46>
            data[index] = (uint8_t) recv_mdb(MDB_USART);
        }
		
		// calculate checksum
		checksum += data[0] + data[1] + data[2] + data[3] + data[4];
    160c:	49 81       	ldd	r20, Y+1	; 0x01
        checksum = checksum & 0xFF;
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	24 2f       	mov	r18, r20
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	28 0f       	add	r18, r24
    1616:	31 1d       	adc	r19, r1
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	28 0f       	add	r18, r24
    161c:	31 1d       	adc	r19, r1
    161e:	8c 81       	ldd	r24, Y+4	; 0x04
    1620:	28 0f       	add	r18, r24
    1622:	31 1d       	adc	r19, r1
    1624:	8d 81       	ldd	r24, Y+5	; 0x05
    1626:	28 0f       	add	r18, r24
    1628:	31 1d       	adc	r19, r1
    162a:	80 91 38 04 	lds	r24, 0x0438
    162e:	90 91 39 04 	lds	r25, 0x0439
    1632:	28 0f       	add	r18, r24
    1634:	39 1f       	adc	r19, r25
    1636:	30 70       	andi	r19, 0x00	; 0
    1638:	30 93 39 04 	sts	0x0439, r19
    163c:	20 93 38 04 	sts	0x0438, r18
        
        // validate checksum
		if(checksum != data[5]) {
    1640:	8e 81       	ldd	r24, Y+6	; 0x06
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	28 17       	cp	r18, r24
    1646:	39 07       	cpc	r19, r25
    1648:	81 f0       	breq	.+32     	; 0x166a <mdb_setup+0xb6>
            state = 0;
    164a:	10 92 7d 05 	sts	0x057D, r1
			mdb_active_cmd = MDB_IDLE;
    164e:	10 92 64 05 	sts	0x0564, r1
			mdb_poll_reply = MDB_REPLY_ACK;
    1652:	10 92 63 05 	sts	0x0563, r1
			checksum = MDB_SETUP;
    1656:	81 e1       	ldi	r24, 0x11	; 17
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	90 93 39 04 	sts	0x0439, r25
    165e:	80 93 38 04 	sts	0x0438, r24
            send_str_p(UPLINK_USART,PSTR("Error: invalid checksum [SETUP]\r\n"));
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	69 ee       	ldi	r22, 0xE9	; 233
    1666:	73 e0       	ldi	r23, 0x03	; 3
    1668:	b9 c0       	rjmp	.+370    	; 0x17dc <mdb_setup+0x228>
			return;  
		}
		state = data[0];
    166a:	40 93 7d 05 	sts	0x057D, r20
	}	

	// Switch setup state
	switch(state) {
    166e:	10 91 7d 05 	lds	r17, 0x057D
    1672:	11 30       	cpi	r17, 0x01	; 1
    1674:	09 f4       	brne	.+2      	; 0x1678 <mdb_setup+0xc4>
    1676:	7a c0       	rjmp	.+244    	; 0x176c <mdb_setup+0x1b8>
    1678:	11 30       	cpi	r17, 0x01	; 1
    167a:	20 f0       	brcs	.+8      	; 0x1684 <mdb_setup+0xd0>
    167c:	12 30       	cpi	r17, 0x02	; 2
    167e:	09 f0       	breq	.+2      	; 0x1682 <mdb_setup+0xce>
    1680:	b0 c0       	rjmp	.+352    	; 0x17e2 <mdb_setup+0x22e>
    1682:	98 c0       	rjmp	.+304    	; 0x17b4 <mdb_setup+0x200>
            #if DEBUG == 1
            send_str_p(UPLINK_USART, PSTR("SETUP STAGE 1\r\n"));
            #endif
            
			// store VMC configuration data
            vmc.feature_level = data[1];
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	80 93 66 05 	sts	0x0566, r24
            vmc.dispaly_cols  = data[2];
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	80 93 67 05 	sts	0x0567, r24
            vmc.dispaly_rows  = data[3];
    1690:	8c 81       	ldd	r24, Y+4	; 0x04
    1692:	80 93 68 05 	sts	0x0568, r24
            vmc.dispaly_info  = data[4];
    1696:	8d 81       	ldd	r24, Y+5	; 0x05
    1698:	80 93 69 05 	sts	0x0569, r24
            
            // calculate checksum for own configuration
            checksum = ((cd.reader_cfg + 
    169c:	60 91 30 04 	lds	r22, 0x0430
    16a0:	20 91 32 04 	lds	r18, 0x0432
    16a4:	80 91 33 04 	lds	r24, 0x0433
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	82 0f       	add	r24, r18
    16ac:	91 1d       	adc	r25, r1
    16ae:	20 91 34 04 	lds	r18, 0x0434
    16b2:	82 0f       	add	r24, r18
    16b4:	91 1d       	adc	r25, r1
    16b6:	20 91 35 04 	lds	r18, 0x0435
    16ba:	82 0f       	add	r24, r18
    16bc:	91 1d       	adc	r25, r1
    16be:	20 91 36 04 	lds	r18, 0x0436
    16c2:	82 0f       	add	r24, r18
    16c4:	91 1d       	adc	r25, r1
    16c6:	20 91 37 04 	lds	r18, 0x0437
    16ca:	82 0f       	add	r24, r18
    16cc:	91 1d       	adc	r25, r1
    16ce:	40 91 31 04 	lds	r20, 0x0431
    16d2:	26 2f       	mov	r18, r22
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	24 0f       	add	r18, r20
    16d8:	31 1d       	adc	r19, r1
    16da:	82 0f       	add	r24, r18
    16dc:	93 1f       	adc	r25, r19
    16de:	90 70       	andi	r25, 0x00	; 0
    16e0:	91 60       	ori	r25, 0x01	; 1
    16e2:	90 93 39 04 	sts	0x0439, r25
    16e6:	80 93 38 04 	sts	0x0438, r24
                         cd.decimal_places +
                         cd.max_resp_time +
                         cd.misc_options) & 0xFF) | 0x100;

            // Send own config data
            send_mdb(MDB_USART, cd.reader_cfg);
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	70 e0       	ldi	r23, 0x00	; 0
    16ee:	0e 94 3f 07 	call	0xe7e	; 0xe7e <send_mdb>
            send_mdb(MDB_USART, cd.feature_level);
    16f2:	60 91 31 04 	lds	r22, 0x0431
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	70 e0       	ldi	r23, 0x00	; 0
    16fa:	0e 94 3f 07 	call	0xe7e	; 0xe7e <send_mdb>
            send_mdb(MDB_USART, (cd.country_code >> 8));
    16fe:	60 91 33 04 	lds	r22, 0x0433
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	70 e0       	ldi	r23, 0x00	; 0
    1706:	0e 94 3f 07 	call	0xe7e	; 0xe7e <send_mdb>
            send_mdb(MDB_USART, (cd.country_code & 0xFF));
    170a:	60 91 32 04 	lds	r22, 0x0432
    170e:	70 91 33 04 	lds	r23, 0x0433
    1712:	70 70       	andi	r23, 0x00	; 0
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	0e 94 3f 07 	call	0xe7e	; 0xe7e <send_mdb>
            send_mdb(MDB_USART, cd.scale_factor);
    171a:	60 91 34 04 	lds	r22, 0x0434
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	70 e0       	ldi	r23, 0x00	; 0
    1722:	0e 94 3f 07 	call	0xe7e	; 0xe7e <send_mdb>
            send_mdb(MDB_USART, cd.decimal_places);
    1726:	60 91 35 04 	lds	r22, 0x0435
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	70 e0       	ldi	r23, 0x00	; 0
    172e:	0e 94 3f 07 	call	0xe7e	; 0xe7e <send_mdb>
            send_mdb(MDB_USART, cd.max_resp_time);
    1732:	60 91 36 04 	lds	r22, 0x0436
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	70 e0       	ldi	r23, 0x00	; 0
    173a:	0e 94 3f 07 	call	0xe7e	; 0xe7e <send_mdb>
            send_mdb(MDB_USART, cd.misc_options);
    173e:	60 91 37 04 	lds	r22, 0x0437
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	70 e0       	ldi	r23, 0x00	; 0
    1746:	0e 94 3f 07 	call	0xe7e	; 0xe7e <send_mdb>
            send_mdb(MDB_USART, checksum);
    174a:	60 91 38 04 	lds	r22, 0x0438
    174e:	70 91 39 04 	lds	r23, 0x0439
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	0e 94 3f 07 	call	0xe7e	; 0xe7e <send_mdb>
            
            state = 2;
    1758:	82 e0       	ldi	r24, 0x02	; 2
    175a:	80 93 7d 05 	sts	0x057D, r24
            
            // reset checksum for next stage
            checksum = MDB_SETUP;
    175e:	81 e1       	ldi	r24, 0x11	; 17
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	90 93 39 04 	sts	0x0439, r25
    1766:	80 93 38 04 	sts	0x0438, r24
    176a:	46 c0       	rjmp	.+140    	; 0x17f8 <mdb_setup+0x244>
            #if DEBUG == 1
            send_str_p(UPLINK_USART, PSTR("SETUP STAGE 2\r\n"));
            #endif
            
            // store VMC price data
            price.max = (data[1] << 8) | data[2];
    176c:	9a 81       	ldd	r25, Y+2	; 0x02
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	2b 81       	ldd	r18, Y+3	; 0x03
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	82 2b       	or	r24, r18
    1776:	93 2b       	or	r25, r19
    1778:	90 93 6b 05 	sts	0x056B, r25
    177c:	80 93 6a 05 	sts	0x056A, r24
            price.min = (data[3] << 8) | data[4];
    1780:	9c 81       	ldd	r25, Y+4	; 0x04
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	2d 81       	ldd	r18, Y+5	; 0x05
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	82 2b       	or	r24, r18
    178a:	93 2b       	or	r25, r19
    178c:	90 93 6d 05 	sts	0x056D, r25
    1790:	80 93 6c 05 	sts	0x056C, r24

	        // send ACK
	        send_mdb(MDB_USART, 0x100);
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	60 e0       	ldi	r22, 0x00	; 0
    1798:	71 e0       	ldi	r23, 0x01	; 1
    179a:	0e 94 3f 07 	call	0xe7e	; 0xe7e <send_mdb>

            // Set MDB State
            mdb_state = MDB_DISABLED;
    179e:	10 93 62 05 	sts	0x0562, r17

            state = 0;
    17a2:	10 92 7d 05 	sts	0x057D, r1
            
            checksum = MDB_SETUP;
    17a6:	81 e1       	ldi	r24, 0x11	; 17
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	90 93 39 04 	sts	0x0439, r25
    17ae:	80 93 38 04 	sts	0x0438, r24
    17b2:	1e c0       	rjmp	.+60     	; 0x17f0 <mdb_setup+0x23c>
		break;

        // ACK from VMC for MateDealer cfg data
		case 2:
            // Wait for enough data in buffer
            if(buffer_level(MDB_USART,RX) < 2) return; 
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	60 e0       	ldi	r22, 0x00	; 0
    17b8:	0e 94 69 05 	call	0xad2	; 0xad2 <buffer_level>
    17bc:	82 30       	cpi	r24, 0x02	; 2
    17be:	e0 f0       	brcs	.+56     	; 0x17f8 <mdb_setup+0x244>
            #if DEBUG == 1
            send_str_p(UPLINK_USART, PSTR("SETUP WAIT FOR ACK\r\n"));
            #endif
            
			// Check if VMC sent ACK
			data[0] = recv_mdb(MDB_USART);
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	0e 94 53 07 	call	0xea6	; 0xea6 <recv_mdb>
             * The following check if VMC answers with ACK to the Setup data we send is not as in the MDB Spec defined.
             * The Sanden Vendo VDI 100-5 send the setup request twice, and ACK with 0x000 first time 
             * (as in the spec!) and 0x001 the second time !? 
             */

            if(data[0] != 0x000 && data[0] != 0x001) {
    17c6:	82 30       	cpi	r24, 0x02	; 2
    17c8:	88 f0       	brcs	.+34     	; 0x17ec <mdb_setup+0x238>
				state = 0;
    17ca:	10 92 7d 05 	sts	0x057D, r1
				mdb_active_cmd = MDB_IDLE;
    17ce:	10 92 64 05 	sts	0x0564, r1
				mdb_poll_reply = MDB_REPLY_ACK;
    17d2:	10 92 63 05 	sts	0x0563, r1
				send_str_p(UPLINK_USART,PSTR("Error: no ACK received on [SETUP]"));
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	67 ec       	ldi	r22, 0xC7	; 199
    17da:	73 e0       	ldi	r23, 0x03	; 3
    17dc:	0e 94 28 07 	call	0xe50	; 0xe50 <send_str_p>
    17e0:	0b c0       	rjmp	.+22     	; 0x17f8 <mdb_setup+0x244>
			return;
		break;

		// Unknown Subcommand from VMC
		default:
            send_str_p(UPLINK_USART,PSTR("Error: unknown subcommand [SETUP]\r\n"));
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	63 ea       	ldi	r22, 0xA3	; 163
    17e6:	73 e0       	ldi	r23, 0x03	; 3
    17e8:	0e 94 28 07 	call	0xe50	; 0xe50 <send_str_p>
            state = 0;
    17ec:	10 92 7d 05 	sts	0x057D, r1
            mdb_active_cmd = MDB_IDLE;
    17f0:	10 92 64 05 	sts	0x0564, r1
            mdb_poll_reply = MDB_REPLY_ACK;
    17f4:	10 92 63 05 	sts	0x0563, r1
            return;
        break;
	}
}
    17f8:	26 96       	adiw	r28, 0x06	; 6
    17fa:	0f b6       	in	r0, 0x3f	; 63
    17fc:	f8 94       	cli
    17fe:	de bf       	out	0x3e, r29	; 62
    1800:	0f be       	out	0x3f, r0	; 63
    1802:	cd bf       	out	0x3d, r28	; 61
    1804:	cf 91       	pop	r28
    1806:	df 91       	pop	r29
    1808:	1f 91       	pop	r17
    180a:	0f 91       	pop	r16
    180c:	ff 90       	pop	r15
    180e:	ef 90       	pop	r14
    1810:	08 95       	ret

00001812 <mdb_reset>:
}

void mdb_reset(void) {
    
    // Wait for enough data in buffer to proceed reset
	if(buffer_level(MDB_USART,RX) < 2) return; 
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	60 e0       	ldi	r22, 0x00	; 0
    1816:	0e 94 69 05 	call	0xad2	; 0xad2 <buffer_level>
    181a:	82 30       	cpi	r24, 0x02	; 2
    181c:	68 f1       	brcs	.+90     	; 0x1878 <mdb_reset+0x66>
    #if DEBUG == 1
    send_str_p(UPLINK_USART, PSTR("RESET\r\n"));
    #endif
    
    // validate checksum
	if(recv_mdb(MDB_USART) != MDB_RESET) {
    181e:	81 e0       	ldi	r24, 0x01	; 1
    1820:	0e 94 53 07 	call	0xea6	; 0xea6 <recv_mdb>
    1824:	40 97       	sbiw	r24, 0x10	; 16
    1826:	51 f0       	breq	.+20     	; 0x183c <mdb_reset+0x2a>
		mdb_active_cmd = MDB_IDLE;
    1828:	10 92 64 05 	sts	0x0564, r1
		mdb_poll_reply = MDB_REPLY_ACK;
    182c:	10 92 63 05 	sts	0x0563, r1
        send_str_p(UPLINK_USART,PSTR("Error: invalid checksum for [RESET]\r\n"));
    1830:	80 e0       	ldi	r24, 0x00	; 0
    1832:	6b e0       	ldi	r22, 0x0B	; 11
    1834:	74 e0       	ldi	r23, 0x04	; 4
    1836:	0e 94 28 07 	call	0xe50	; 0xe50 <send_str_p>
    183a:	08 95       	ret
		return;
	}

	// Reset everything
	vmc.feature_level = 0;
    183c:	10 92 66 05 	sts	0x0566, r1
	vmc.dispaly_cols = 0;
    1840:	10 92 67 05 	sts	0x0567, r1
	vmc.dispaly_rows = 0;
    1844:	10 92 68 05 	sts	0x0568, r1
	vmc.dispaly_info = 0;
    1848:	10 92 69 05 	sts	0x0569, r1
	price.max = 0;
    184c:	10 92 6b 05 	sts	0x056B, r1
    1850:	10 92 6a 05 	sts	0x056A, r1
	price.min = 0;
    1854:	10 92 6d 05 	sts	0x056D, r1
    1858:	10 92 6c 05 	sts	0x056C, r1

    // Send ACK
    send_mdb(MDB_USART, 0x100);
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	60 e0       	ldi	r22, 0x00	; 0
    1860:	71 e0       	ldi	r23, 0x01	; 1
    1862:	0e 94 3f 07 	call	0xe7e	; 0xe7e <send_mdb>
    reset_done = TRUE;
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	80 93 65 05 	sts	0x0565, r24
    mdb_state = MDB_INACTIVE;
    186c:	10 92 62 05 	sts	0x0562, r1
    mdb_active_cmd = MDB_IDLE;
    1870:	10 92 64 05 	sts	0x0564, r1
	mdb_poll_reply = MDB_REPLY_JUST_RESET;
    1874:	80 93 63 05 	sts	0x0563, r24
    1878:	08 95       	ret

0000187a <mdb_vend>:
        break;
        
    }
}

void mdb_vend(void) {
    187a:	0f 93       	push	r16
    187c:	1f 93       	push	r17
    187e:	df 93       	push	r29
    1880:	cf 93       	push	r28
    1882:	cd b7       	in	r28, 0x3d	; 61
    1884:	de b7       	in	r29, 0x3e	; 62
    1886:	a8 97       	sbiw	r28, 0x28	; 40
    1888:	0f b6       	in	r0, 0x3f	; 63
    188a:	f8 94       	cli
    188c:	de bf       	out	0x3e, r29	; 62
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	cd bf       	out	0x3d, r28	; 61
    static uint8_t state = 0;
    uint8_t checksum = MDB_VEND;
    char buffer[40];
    
    // wait for the subcommand 
    if(state == 0) {
    1892:	80 91 75 05 	lds	r24, 0x0575
    1896:	88 23       	and	r24, r24
    1898:	79 f4       	brne	.+30     	; 0x18b8 <mdb_vend+0x3e>
        // wait for enough data in buffer
        if(buffer_level(MDB_USART,RX) < 2) return;   
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	60 e0       	ldi	r22, 0x00	; 0
    189e:	0e 94 69 05 	call	0xad2	; 0xad2 <buffer_level>
    18a2:	82 30       	cpi	r24, 0x02	; 2
    18a4:	08 f4       	brcc	.+2      	; 0x18a8 <mdb_vend+0x2e>
    18a6:	5d c1       	rjmp	.+698    	; 0x1b62 <mdb_vend+0x2e8>
        
        // fetch the subommand from Buffer
        data[0] = recv_mdb(MDB_USART);
    18a8:	81 e0       	ldi	r24, 0x01	; 1
    18aa:	0e 94 53 07 	call	0xea6	; 0xea6 <recv_mdb>
    18ae:	80 93 76 05 	sts	0x0576, r24
        state = 1;
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	80 93 75 05 	sts	0x0575, r24
    }
    
    // switch through subcommands
    switch(data[0]) {   
    18b8:	80 91 76 05 	lds	r24, 0x0576
    18bc:	82 30       	cpi	r24, 0x02	; 2
    18be:	09 f4       	brne	.+2      	; 0x18c2 <mdb_vend+0x48>
    18c0:	a8 c0       	rjmp	.+336    	; 0x1a12 <mdb_vend+0x198>
    18c2:	83 30       	cpi	r24, 0x03	; 3
    18c4:	30 f4       	brcc	.+12     	; 0x18d2 <mdb_vend+0x58>
    18c6:	88 23       	and	r24, r24
    18c8:	59 f0       	breq	.+22     	; 0x18e0 <mdb_vend+0x66>
    18ca:	81 30       	cpi	r24, 0x01	; 1
    18cc:	09 f0       	breq	.+2      	; 0x18d0 <mdb_vend+0x56>
    18ce:	49 c1       	rjmp	.+658    	; 0x1b62 <mdb_vend+0x2e8>
    18d0:	70 c0       	rjmp	.+224    	; 0x19b2 <mdb_vend+0x138>
    18d2:	83 30       	cpi	r24, 0x03	; 3
    18d4:	09 f4       	brne	.+2      	; 0x18d8 <mdb_vend+0x5e>
    18d6:	f7 c0       	rjmp	.+494    	; 0x1ac6 <mdb_vend+0x24c>
    18d8:	84 30       	cpi	r24, 0x04	; 4
    18da:	09 f0       	breq	.+2      	; 0x18de <mdb_vend+0x64>
    18dc:	42 c1       	rjmp	.+644    	; 0x1b62 <mdb_vend+0x2e8>
    18de:	12 c1       	rjmp	.+548    	; 0x1b04 <mdb_vend+0x28a>
        // vend request 
        case 0:
            // wait for enough data in buffer
            if(buffer_level(MDB_USART,RX) < 10) return;     
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	60 e0       	ldi	r22, 0x00	; 0
    18e4:	0e 94 69 05 	call	0xad2	; 0xad2 <buffer_level>
    18e8:	8a 30       	cpi	r24, 0x0A	; 10
    18ea:	08 f4       	brcc	.+2      	; 0x18ee <mdb_vend+0x74>
    18ec:	3a c1       	rjmp	.+628    	; 0x1b62 <mdb_vend+0x2e8>
    18ee:	07 e7       	ldi	r16, 0x77	; 119
    18f0:	15 e0       	ldi	r17, 0x05	; 5
            send_str_p(UPLINK_USART, PSTR("VEND REQUEST\r\n"));
            #endif
            
            // fetch the data from buffer
            for(uint8_t i=1; i < 6; i++) {
                data[i] = (uint8_t) recv_mdb(MDB_USART);
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	0e 94 53 07 	call	0xea6	; 0xea6 <recv_mdb>
    18f8:	d8 01       	movw	r26, r16
    18fa:	8d 93       	st	X+, r24
    18fc:	8d 01       	movw	r16, r26
            #if DEBUG == 1
            send_str_p(UPLINK_USART, PSTR("VEND REQUEST\r\n"));
            #endif
            
            // fetch the data from buffer
            for(uint8_t i=1; i < 6; i++) {
    18fe:	b5 e0       	ldi	r27, 0x05	; 5
    1900:	0c 37       	cpi	r16, 0x7C	; 124
    1902:	1b 07       	cpc	r17, r27
    1904:	b1 f7       	brne	.-20     	; 0x18f2 <mdb_vend+0x78>
                data[i] = (uint8_t) recv_mdb(MDB_USART);
            }
            
            // calculate checksum
            checksum += data[0] + data[1] + data[2] + data[3] + data[4];
    1906:	20 91 77 05 	lds	r18, 0x0577
    190a:	30 91 78 05 	lds	r19, 0x0578
    190e:	50 91 79 05 	lds	r21, 0x0579
    1912:	40 91 7a 05 	lds	r20, 0x057A
            checksum &= 0xFF;
            
            // validate checksum
            if(checksum != data[5]) {
    1916:	80 91 76 05 	lds	r24, 0x0576
    191a:	82 0f       	add	r24, r18
    191c:	8d 5e       	subi	r24, 0xED	; 237
    191e:	83 0f       	add	r24, r19
    1920:	85 0f       	add	r24, r21
    1922:	84 0f       	add	r24, r20
    1924:	90 91 7b 05 	lds	r25, 0x057B
    1928:	89 17       	cp	r24, r25
    192a:	51 f0       	breq	.+20     	; 0x1940 <mdb_vend+0xc6>
                state = 0;
    192c:	10 92 75 05 	sts	0x0575, r1
                mdb_active_cmd = MDB_IDLE;
    1930:	10 92 64 05 	sts	0x0564, r1
                mdb_poll_reply = MDB_REPLY_ACK;
    1934:	10 92 63 05 	sts	0x0563, r1
                checksum = MDB_VEND;
                send_str_p(UPLINK_USART,PSTR("Error: invalid checksum [VEND]\r\n"));
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	61 e3       	ldi	r22, 0x31	; 49
    193c:	72 e0       	ldi	r23, 0x02	; 2
    193e:	fb c0       	rjmp	.+502    	; 0x1b36 <mdb_vend+0x2bc>
                return;  
            }
            //sprintf(buffer, "Data: %d %d %d %d\r\n", data[1], data[2], data[3], data[4]);
            //send_str(0,buffer);
            sprintf(buffer, "VREQ %d %d\r\n", ((data[1] << 8) + data[2]), (data[3] + data[4]));
    1940:	ed b7       	in	r30, 0x3d	; 61
    1942:	fe b7       	in	r31, 0x3e	; 62
    1944:	38 97       	sbiw	r30, 0x08	; 8
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	f8 94       	cli
    194a:	fe bf       	out	0x3e, r31	; 62
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	ed bf       	out	0x3d, r30	; 61
    1950:	31 96       	adiw	r30, 0x01	; 1
    1952:	8e 01       	movw	r16, r28
    1954:	0f 5f       	subi	r16, 0xFF	; 255
    1956:	1f 4f       	sbci	r17, 0xFF	; 255
    1958:	ad b7       	in	r26, 0x3d	; 61
    195a:	be b7       	in	r27, 0x3e	; 62
    195c:	12 96       	adiw	r26, 0x02	; 2
    195e:	1c 93       	st	X, r17
    1960:	0e 93       	st	-X, r16
    1962:	11 97       	sbiw	r26, 0x01	; 1
    1964:	88 e1       	ldi	r24, 0x18	; 24
    1966:	94 e0       	ldi	r25, 0x04	; 4
    1968:	93 83       	std	Z+3, r25	; 0x03
    196a:	82 83       	std	Z+2, r24	; 0x02
    196c:	92 2f       	mov	r25, r18
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	83 0f       	add	r24, r19
    1972:	91 1d       	adc	r25, r1
    1974:	95 83       	std	Z+5, r25	; 0x05
    1976:	84 83       	std	Z+4, r24	; 0x04
    1978:	85 2f       	mov	r24, r21
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	84 0f       	add	r24, r20
    197e:	91 1d       	adc	r25, r1
    1980:	97 83       	std	Z+7, r25	; 0x07
    1982:	86 83       	std	Z+6, r24	; 0x06
    1984:	0e 94 c1 10 	call	0x2182	; 0x2182 <sprintf>
            send_str(0,buffer);  
    1988:	ed b7       	in	r30, 0x3d	; 61
    198a:	fe b7       	in	r31, 0x3e	; 62
    198c:	38 96       	adiw	r30, 0x08	; 8
    198e:	0f b6       	in	r0, 0x3f	; 63
    1990:	f8 94       	cli
    1992:	fe bf       	out	0x3e, r31	; 62
    1994:	0f be       	out	0x3f, r0	; 63
    1996:	ed bf       	out	0x3d, r30	; 61
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	b8 01       	movw	r22, r16
    199c:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <send_str>
                
            // send ACK
            send_mdb(MDB_USART, 0x100);
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	60 e0       	ldi	r22, 0x00	; 0
    19a4:	71 e0       	ldi	r23, 0x01	; 1
    19a6:	0e 94 3f 07 	call	0xe7e	; 0xe7e <send_mdb>
            state = 0;
    19aa:	10 92 75 05 	sts	0x0575, r1
            mdb_state = MDB_VENDING;
    19ae:	84 e0       	ldi	r24, 0x04	; 4
    19b0:	d2 c0       	rjmp	.+420    	; 0x1b56 <mdb_vend+0x2dc>
        break;
        
        // vend cancel
        case 1:  
            // wait for enough data in buffer
            if(buffer_level(MDB_USART,RX) < 2) return;     
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	60 e0       	ldi	r22, 0x00	; 0
    19b6:	0e 94 69 05 	call	0xad2	; 0xad2 <buffer_level>
    19ba:	82 30       	cpi	r24, 0x02	; 2
    19bc:	08 f4       	brcc	.+2      	; 0x19c0 <mdb_vend+0x146>
    19be:	d1 c0       	rjmp	.+418    	; 0x1b62 <mdb_vend+0x2e8>
            #if DEBUG == 1
            send_str_p(UPLINK_USART, PSTR("VEND Cancel\r\n"));
            #endif
            
            // fetch the data from buffer
            data[1] = (uint8_t) recv_mdb(MDB_USART);
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	0e 94 53 07 	call	0xea6	; 0xea6 <recv_mdb>
    19c6:	80 93 77 05 	sts	0x0577, r24
            // calculate checksum
            checksum += data[0];
            checksum &= 0xFF;
            
            // validate checksum
            if(checksum != data[1]) {
    19ca:	90 91 76 05 	lds	r25, 0x0576
    19ce:	9d 5e       	subi	r25, 0xED	; 237
    19d0:	98 17       	cp	r25, r24
    19d2:	51 f0       	breq	.+20     	; 0x19e8 <mdb_vend+0x16e>
                state = 0;
    19d4:	10 92 75 05 	sts	0x0575, r1
                mdb_active_cmd = MDB_IDLE;
    19d8:	10 92 64 05 	sts	0x0564, r1
                mdb_poll_reply = MDB_REPLY_ACK;
    19dc:	10 92 63 05 	sts	0x0563, r1
                checksum = MDB_VEND;
                send_str_p(UPLINK_USART,PSTR("Error: invalid checksum [VEND]\r\n"));
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	60 e1       	ldi	r22, 0x10	; 16
    19e4:	72 e0       	ldi	r23, 0x02	; 2
    19e6:	a7 c0       	rjmp	.+334    	; 0x1b36 <mdb_vend+0x2bc>
                return;  
            }
            
            send_str_p(UPLINK_USART,PSTR("VCAN\r\n"));  
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	69 e0       	ldi	r22, 0x09	; 9
    19ec:	72 e0       	ldi	r23, 0x02	; 2
    19ee:	0e 94 28 07 	call	0xe50	; 0xe50 <send_str_p>
                
            // send ACK
            send_mdb(MDB_USART, 0x100);
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	60 e0       	ldi	r22, 0x00	; 0
    19f6:	71 e0       	ldi	r23, 0x01	; 1
    19f8:	0e 94 3f 07 	call	0xe7e	; 0xe7e <send_mdb>
            state = 0;
    19fc:	10 92 75 05 	sts	0x0575, r1
            mdb_state = MDB_SESSION_IDLE;
    1a00:	83 e0       	ldi	r24, 0x03	; 3
    1a02:	80 93 62 05 	sts	0x0562, r24
            mdb_active_cmd = MDB_IDLE;
    1a06:	10 92 64 05 	sts	0x0564, r1
            mdb_poll_reply = MDB_REPLY_VEND_DENIED;
    1a0a:	87 e0       	ldi	r24, 0x07	; 7
    1a0c:	80 93 63 05 	sts	0x0563, r24
    1a10:	a8 c0       	rjmp	.+336    	; 0x1b62 <mdb_vend+0x2e8>
        break; 
        
        // vend success
        case 2:  
            // wait for enough data in buffer
            if(buffer_level(MDB_USART,RX) < 6) return;     
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	60 e0       	ldi	r22, 0x00	; 0
    1a16:	0e 94 69 05 	call	0xad2	; 0xad2 <buffer_level>
    1a1a:	86 30       	cpi	r24, 0x06	; 6
    1a1c:	08 f4       	brcc	.+2      	; 0x1a20 <mdb_vend+0x1a6>
    1a1e:	a1 c0       	rjmp	.+322    	; 0x1b62 <mdb_vend+0x2e8>
            send_str_p(UPLINK_USART, PSTR("VEND SUCCESS\r\n"));
            #endif
            
            // fetch the data from buffer
            for(uint8_t i=1; i < 4; i++) {
                data[i] = (uint8_t) recv_mdb(MDB_USART);
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	0e 94 53 07 	call	0xea6	; 0xea6 <recv_mdb>
    1a26:	80 93 77 05 	sts	0x0577, r24
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	0e 94 53 07 	call	0xea6	; 0xea6 <recv_mdb>
    1a30:	80 93 78 05 	sts	0x0578, r24
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	0e 94 53 07 	call	0xea6	; 0xea6 <recv_mdb>
    1a3a:	80 93 79 05 	sts	0x0579, r24
            }
            
            // calculate checksum
            checksum += data[0] + data[1] + data[2];
    1a3e:	30 91 77 05 	lds	r19, 0x0577
    1a42:	20 91 78 05 	lds	r18, 0x0578
            checksum &= 0xFF;
            
            // validate checksum
            if(checksum != data[3]) {
    1a46:	90 91 76 05 	lds	r25, 0x0576
    1a4a:	93 0f       	add	r25, r19
    1a4c:	9d 5e       	subi	r25, 0xED	; 237
    1a4e:	92 0f       	add	r25, r18
    1a50:	98 17       	cp	r25, r24
    1a52:	51 f0       	breq	.+20     	; 0x1a68 <mdb_vend+0x1ee>
                state = 0;
    1a54:	10 92 75 05 	sts	0x0575, r1
                mdb_active_cmd = MDB_IDLE;
    1a58:	10 92 64 05 	sts	0x0564, r1
                mdb_poll_reply = MDB_REPLY_ACK;
    1a5c:	10 92 63 05 	sts	0x0563, r1
                checksum = MDB_VEND;
                send_str_p(UPLINK_USART,PSTR("Error: invalid checksum [VEND]\r\n"));
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	68 ee       	ldi	r22, 0xE8	; 232
    1a64:	71 e0       	ldi	r23, 0x01	; 1
    1a66:	67 c0       	rjmp	.+206    	; 0x1b36 <mdb_vend+0x2bc>
                return;  
            }
            
            sprintf(buffer, "VSUCC %d\r\n", (data[1] + data[2]));
    1a68:	00 d0       	rcall	.+0      	; 0x1a6a <mdb_vend+0x1f0>
    1a6a:	00 d0       	rcall	.+0      	; 0x1a6c <mdb_vend+0x1f2>
    1a6c:	ed b7       	in	r30, 0x3d	; 61
    1a6e:	fe b7       	in	r31, 0x3e	; 62
    1a70:	31 96       	adiw	r30, 0x01	; 1
    1a72:	8e 01       	movw	r16, r28
    1a74:	0f 5f       	subi	r16, 0xFF	; 255
    1a76:	1f 4f       	sbci	r17, 0xFF	; 255
    1a78:	ad b7       	in	r26, 0x3d	; 61
    1a7a:	be b7       	in	r27, 0x3e	; 62
    1a7c:	12 96       	adiw	r26, 0x02	; 2
    1a7e:	1c 93       	st	X, r17
    1a80:	0e 93       	st	-X, r16
    1a82:	11 97       	sbiw	r26, 0x01	; 1
    1a84:	85 e2       	ldi	r24, 0x25	; 37
    1a86:	94 e0       	ldi	r25, 0x04	; 4
    1a88:	93 83       	std	Z+3, r25	; 0x03
    1a8a:	82 83       	std	Z+2, r24	; 0x02
    1a8c:	83 2f       	mov	r24, r19
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	82 0f       	add	r24, r18
    1a92:	91 1d       	adc	r25, r1
    1a94:	95 83       	std	Z+5, r25	; 0x05
    1a96:	84 83       	std	Z+4, r24	; 0x04
    1a98:	0e 94 c1 10 	call	0x2182	; 0x2182 <sprintf>
            send_str(0,buffer);  
    1a9c:	ed b7       	in	r30, 0x3d	; 61
    1a9e:	fe b7       	in	r31, 0x3e	; 62
    1aa0:	36 96       	adiw	r30, 0x06	; 6
    1aa2:	0f b6       	in	r0, 0x3f	; 63
    1aa4:	f8 94       	cli
    1aa6:	fe bf       	out	0x3e, r31	; 62
    1aa8:	0f be       	out	0x3f, r0	; 63
    1aaa:	ed bf       	out	0x3d, r30	; 61
    1aac:	80 e0       	ldi	r24, 0x00	; 0
    1aae:	b8 01       	movw	r22, r16
    1ab0:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <send_str>
                
            // send ACK
            send_mdb(MDB_USART, 0x100);
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	60 e0       	ldi	r22, 0x00	; 0
    1ab8:	71 e0       	ldi	r23, 0x01	; 1
    1aba:	0e 94 3f 07 	call	0xe7e	; 0xe7e <send_mdb>
            state = 0;
    1abe:	10 92 75 05 	sts	0x0575, r1
            mdb_state = MDB_SESSION_IDLE;
    1ac2:	83 e0       	ldi	r24, 0x03	; 3
    1ac4:	48 c0       	rjmp	.+144    	; 0x1b56 <mdb_vend+0x2dc>
        break; 
        
        // vend failure
        case 3:  
            // wait for enough data in buffer
            if(buffer_level(MDB_USART,RX) < 2) return;     
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	60 e0       	ldi	r22, 0x00	; 0
    1aca:	0e 94 69 05 	call	0xad2	; 0xad2 <buffer_level>
    1ace:	82 30       	cpi	r24, 0x02	; 2
    1ad0:	08 f4       	brcc	.+2      	; 0x1ad4 <mdb_vend+0x25a>
    1ad2:	47 c0       	rjmp	.+142    	; 0x1b62 <mdb_vend+0x2e8>
            #if DEBUG == 1
            send_str_p(UPLINK_USART, PSTR("VEND FAILURE\r\n"));
            #endif
            
            // fetch the data from buffer
            data[1] = (uint8_t) recv_mdb(MDB_USART);
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	0e 94 53 07 	call	0xea6	; 0xea6 <recv_mdb>
    1ada:	80 93 77 05 	sts	0x0577, r24
            // calculate checksum
            checksum += data[0];
            checksum &= 0xFF;
            
            // validate checksum
            if(checksum != data[1]) {
    1ade:	90 91 76 05 	lds	r25, 0x0576
    1ae2:	9d 5e       	subi	r25, 0xED	; 237
    1ae4:	98 17       	cp	r25, r24
    1ae6:	51 f0       	breq	.+20     	; 0x1afc <mdb_vend+0x282>
                state = 0;
    1ae8:	10 92 75 05 	sts	0x0575, r1
                mdb_active_cmd = MDB_IDLE;
    1aec:	10 92 64 05 	sts	0x0564, r1
                mdb_poll_reply = MDB_REPLY_ACK;
    1af0:	10 92 63 05 	sts	0x0563, r1
                checksum = MDB_VEND;
                send_str_p(UPLINK_USART,PSTR("Error: invalid checksum [VEND]\r\n"));
    1af4:	80 e0       	ldi	r24, 0x00	; 0
    1af6:	67 ec       	ldi	r22, 0xC7	; 199
    1af8:	71 e0       	ldi	r23, 0x01	; 1
    1afa:	1d c0       	rjmp	.+58     	; 0x1b36 <mdb_vend+0x2bc>
                return;  
            }
            
            send_str_p(UPLINK_USART,PSTR("VFAIL\r\n"));  
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	6f eb       	ldi	r22, 0xBF	; 191
    1b00:	71 e0       	ldi	r23, 0x01	; 1
    1b02:	1f c0       	rjmp	.+62     	; 0x1b42 <mdb_vend+0x2c8>
        break; 
        
        // session complete
        case 4:  
            // wait for enough data in buffer
            if(buffer_level(MDB_USART,RX) < 2) return;     
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	60 e0       	ldi	r22, 0x00	; 0
    1b08:	0e 94 69 05 	call	0xad2	; 0xad2 <buffer_level>
    1b0c:	82 30       	cpi	r24, 0x02	; 2
    1b0e:	48 f1       	brcs	.+82     	; 0x1b62 <mdb_vend+0x2e8>
            #if DEBUG == 1
            send_str_p(UPLINK_USART, PSTR("VEND SESSION COMPLETE\r\n"));
            #endif
            
            // fetch the data from buffer
            data[1] = (uint8_t) recv_mdb(MDB_USART);
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	0e 94 53 07 	call	0xea6	; 0xea6 <recv_mdb>
    1b16:	80 93 77 05 	sts	0x0577, r24
            // calculate checksum
            checksum += data[0];
            checksum &= 0xFF;
            
            // validate checksum
            if(checksum != data[1]) {
    1b1a:	90 91 76 05 	lds	r25, 0x0576
    1b1e:	9d 5e       	subi	r25, 0xED	; 237
    1b20:	98 17       	cp	r25, r24
    1b22:	61 f0       	breq	.+24     	; 0x1b3c <mdb_vend+0x2c2>
                state = 0;
    1b24:	10 92 75 05 	sts	0x0575, r1
                mdb_active_cmd = MDB_IDLE;
    1b28:	10 92 64 05 	sts	0x0564, r1
                mdb_poll_reply = MDB_REPLY_ACK;
    1b2c:	10 92 63 05 	sts	0x0563, r1
                checksum = MDB_VEND;
                send_str_p(UPLINK_USART,PSTR("Error: invalid checksum [VEND]\r\n"));
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	6e e9       	ldi	r22, 0x9E	; 158
    1b34:	71 e0       	ldi	r23, 0x01	; 1
    1b36:	0e 94 28 07 	call	0xe50	; 0xe50 <send_str_p>
    1b3a:	13 c0       	rjmp	.+38     	; 0x1b62 <mdb_vend+0x2e8>
                return;  
            }
            
            send_str_p(UPLINK_USART,PSTR("session-complete\r\n"));  
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	6b e8       	ldi	r22, 0x8B	; 139
    1b40:	71 e0       	ldi	r23, 0x01	; 1
    1b42:	0e 94 28 07 	call	0xe50	; 0xe50 <send_str_p>
                
            // send ACK
            send_mdb(MDB_USART, 0x100);
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	60 e0       	ldi	r22, 0x00	; 0
    1b4a:	71 e0       	ldi	r23, 0x01	; 1
    1b4c:	0e 94 3f 07 	call	0xe7e	; 0xe7e <send_mdb>
            state = 0;
    1b50:	10 92 75 05 	sts	0x0575, r1
            mdb_state = MDB_ENABLED;
    1b54:	82 e0       	ldi	r24, 0x02	; 2
    1b56:	80 93 62 05 	sts	0x0562, r24
            mdb_active_cmd = MDB_IDLE;
    1b5a:	10 92 64 05 	sts	0x0564, r1
            mdb_poll_reply = MDB_REPLY_ACK;
    1b5e:	10 92 63 05 	sts	0x0563, r1
            return;
        break; 
    }
}
    1b62:	a8 96       	adiw	r28, 0x28	; 40
    1b64:	0f b6       	in	r0, 0x3f	; 63
    1b66:	f8 94       	cli
    1b68:	de bf       	out	0x3e, r29	; 62
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	cd bf       	out	0x3d, r28	; 61
    1b6e:	cf 91       	pop	r28
    1b70:	df 91       	pop	r29
    1b72:	1f 91       	pop	r17
    1b74:	0f 91       	pop	r16
    1b76:	08 95       	ret

00001b78 <mdb_cmd_handler>:
    {0,0,0}
};

void mdb_cmd_handler(void) {
            
    switch(mdb_active_cmd) {
    1b78:	80 91 64 05 	lds	r24, 0x0564
    1b7c:	81 31       	cpi	r24, 0x11	; 17
    1b7e:	91 f1       	breq	.+100    	; 0x1be4 <mdb_cmd_handler+0x6c>
    1b80:	82 31       	cpi	r24, 0x12	; 18
    1b82:	28 f4       	brcc	.+10     	; 0x1b8e <mdb_cmd_handler+0x16>
    1b84:	88 23       	and	r24, r24
    1b86:	51 f0       	breq	.+20     	; 0x1b9c <mdb_cmd_handler+0x24>
    1b88:	80 31       	cpi	r24, 0x10	; 16
    1b8a:	b9 f5       	brne	.+110    	; 0x1bfa <mdb_cmd_handler+0x82>
    1b8c:	28 c0       	rjmp	.+80     	; 0x1bde <mdb_cmd_handler+0x66>
    1b8e:	83 31       	cpi	r24, 0x13	; 19
    1b90:	79 f1       	breq	.+94     	; 0x1bf0 <mdb_cmd_handler+0x78>
    1b92:	83 31       	cpi	r24, 0x13	; 19
    1b94:	50 f1       	brcs	.+84     	; 0x1bea <mdb_cmd_handler+0x72>
    1b96:	84 31       	cpi	r24, 0x14	; 20
    1b98:	81 f5       	brne	.+96     	; 0x1bfa <mdb_cmd_handler+0x82>
    1b9a:	2d c0       	rjmp	.+90     	; 0x1bf6 <mdb_cmd_handler+0x7e>
    
        case MDB_IDLE:
            // Wait for enough data in buffer
            if(buffer_level(MDB_USART,RX) < 2) return; 
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	60 e0       	ldi	r22, 0x00	; 0
    1ba0:	0e 94 69 05 	call	0xad2	; 0xad2 <buffer_level>
    1ba4:	82 30       	cpi	r24, 0x02	; 2
    1ba6:	48 f1       	brcs	.+82     	; 0x1bfa <mdb_cmd_handler+0x82>
            // read data from buffer
            uint16_t data = recv_mdb(MDB_USART);
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	0e 94 53 07 	call	0xea6	; 0xea6 <recv_mdb>
            // if modebit is set and command is in command range for cashless device
            if((data & 0x100) == 0x100 && MDB_RESET <= (data ^ 0x100) && (data ^ 0x100) <= MDB_READER) {
    1bae:	90 ff       	sbrs	r25, 0
    1bb0:	24 c0       	rjmp	.+72     	; 0x1bfa <mdb_cmd_handler+0x82>
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	31 e0       	ldi	r19, 0x01	; 1
    1bb6:	28 27       	eor	r18, r24
    1bb8:	39 27       	eor	r19, r25
    1bba:	20 31       	cpi	r18, 0x10	; 16
    1bbc:	31 05       	cpc	r19, r1
    1bbe:	e8 f0       	brcs	.+58     	; 0x1bfa <mdb_cmd_handler+0x82>
    1bc0:	25 31       	cpi	r18, 0x15	; 21
    1bc2:	31 05       	cpc	r19, r1
    1bc4:	d0 f4       	brcc	.+52     	; 0x1bfa <mdb_cmd_handler+0x82>
                //Set command as active command
                mdb_active_cmd = (data ^ 0x100);
    1bc6:	28 2f       	mov	r18, r24
    1bc8:	80 93 64 05 	sts	0x0564, r24
                if(!reset_done && mdb_active_cmd != MDB_RESET) {
    1bcc:	80 91 65 05 	lds	r24, 0x0565
    1bd0:	88 23       	and	r24, r24
    1bd2:	99 f4       	brne	.+38     	; 0x1bfa <mdb_cmd_handler+0x82>
    1bd4:	20 31       	cpi	r18, 0x10	; 16
    1bd6:	89 f0       	breq	.+34     	; 0x1bfa <mdb_cmd_handler+0x82>
                    mdb_active_cmd = MDB_IDLE;
    1bd8:	10 92 64 05 	sts	0x0564, r1
    1bdc:	08 95       	ret
                }
            }
        break;
        
        case MDB_RESET:
            mdb_reset();
    1bde:	0e 94 09 0c 	call	0x1812	; 0x1812 <mdb_reset>
    1be2:	08 95       	ret
        break;
        
        case MDB_SETUP:
            mdb_setup();
    1be4:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <mdb_setup>
    1be8:	08 95       	ret
        break;
        
        case MDB_POLL:
            mdb_poll();
    1bea:	0e 94 12 09 	call	0x1224	; 0x1224 <mdb_poll>
    1bee:	08 95       	ret
        break;
        
        case MDB_VEND:
            mdb_vend();
    1bf0:	0e 94 3d 0c 	call	0x187a	; 0x187a <mdb_vend>
    1bf4:	08 95       	ret
        break;
        
        case MDB_READER:
            mdb_reader();
    1bf6:	0e 94 ba 08 	call	0x1174	; 0x1174 <mdb_reader>
    1bfa:	08 95       	ret

00001bfc <cmd_reset>:
	return;
  
}

void cmd_reset(char *arg) {
    RESET();
    1bfc:	e0 e0       	ldi	r30, 0x00	; 0
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	09 94       	ijmp
}
    1c02:	08 95       	ret

00001c04 <cmd_cancel_session>:
        send_str_p(UPLINK_USART,PSTR("Error: MateDealer is not in a suitable state to deny a vend\r\n"));  
    }
}

void cmd_cancel_session(char *arg) {
    if(mdb_state == MDB_SESSION_IDLE) {
    1c04:	80 91 62 05 	lds	r24, 0x0562
    1c08:	83 30       	cpi	r24, 0x03	; 3
    1c0a:	21 f4       	brne	.+8      	; 0x1c14 <cmd_cancel_session+0x10>
        mdb_poll_reply = MDB_REPLY_SESSION_CANCEL_REQ;
    1c0c:	85 e0       	ldi	r24, 0x05	; 5
    1c0e:	80 93 63 05 	sts	0x0563, r24
    1c12:	08 95       	ret
    } else {
        send_str_p(UPLINK_USART,PSTR("Error: MateDealer is not in a suitable state to cancel a session\r\n"));  
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	61 e3       	ldi	r22, 0x31	; 49
    1c18:	74 e0       	ldi	r23, 0x04	; 4
    1c1a:	0e 94 28 07 	call	0xe50	; 0xe50 <send_str_p>
    1c1e:	08 95       	ret

00001c20 <cmd_deny_vend>:
        send_str_p(UPLINK_USART,PSTR("Error: MateDealer is not in a suitable state to approve a vend\r\n"));  
    }
}

void cmd_deny_vend(char *arg) {
    if(mdb_state == MDB_VENDING) {
    1c20:	80 91 62 05 	lds	r24, 0x0562
    1c24:	84 30       	cpi	r24, 0x04	; 4
    1c26:	39 f4       	brne	.+14     	; 0x1c36 <cmd_deny_vend+0x16>
        session.result.vend_denied = 1;
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	80 93 72 05 	sts	0x0572, r24
        mdb_poll_reply = MDB_REPLY_VEND_DENIED;
    1c2e:	87 e0       	ldi	r24, 0x07	; 7
    1c30:	80 93 63 05 	sts	0x0563, r24
    1c34:	08 95       	ret
    } else {
        send_str_p(UPLINK_USART,PSTR("Error: MateDealer is not in a suitable state to deny a vend\r\n"));  
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	64 e7       	ldi	r22, 0x74	; 116
    1c3a:	74 e0       	ldi	r23, 0x04	; 4
    1c3c:	0e 94 28 07 	call	0xe50	; 0xe50 <send_str_p>
    1c40:	08 95       	ret

00001c42 <cmd_get_mdb_state>:
    }
}

void cmd_get_mdb_state(char *arg) {
    
    switch(mdb_state) {
    1c42:	80 91 62 05 	lds	r24, 0x0562
    1c46:	83 30       	cpi	r24, 0x03	; 3
    1c48:	d1 f0       	breq	.+52     	; 0x1c7e <cmd_get_mdb_state+0x3c>
    1c4a:	84 30       	cpi	r24, 0x04	; 4
    1c4c:	28 f4       	brcc	.+10     	; 0x1c58 <cmd_get_mdb_state+0x16>
    1c4e:	81 30       	cpi	r24, 0x01	; 1
    1c50:	71 f0       	breq	.+28     	; 0x1c6e <cmd_get_mdb_state+0x2c>
    1c52:	82 30       	cpi	r24, 0x02	; 2
    1c54:	80 f4       	brcc	.+32     	; 0x1c76 <cmd_get_mdb_state+0x34>
    1c56:	07 c0       	rjmp	.+14     	; 0x1c66 <cmd_get_mdb_state+0x24>
    1c58:	85 30       	cpi	r24, 0x05	; 5
    1c5a:	c9 f0       	breq	.+50     	; 0x1c8e <cmd_get_mdb_state+0x4c>
    1c5c:	85 30       	cpi	r24, 0x05	; 5
    1c5e:	98 f0       	brcs	.+38     	; 0x1c86 <cmd_get_mdb_state+0x44>
    1c60:	86 30       	cpi	r24, 0x06	; 6
    1c62:	01 f5       	brne	.+64     	; 0x1ca4 <cmd_get_mdb_state+0x62>
    1c64:	1a c0       	rjmp	.+52     	; 0x1c9a <cmd_get_mdb_state+0x58>
        case MDB_INACTIVE:
            send_str_p(UPLINK_USART,PSTR("INACTIVE\r\n"));  
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	66 e8       	ldi	r22, 0x86	; 134
    1c6a:	75 e0       	ldi	r23, 0x05	; 5
    1c6c:	13 c0       	rjmp	.+38     	; 0x1c94 <cmd_get_mdb_state+0x52>
        break;
        case MDB_DISABLED:
            send_str_p(UPLINK_USART,PSTR("DISABLED\r\n"));  
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
    1c70:	6b e7       	ldi	r22, 0x7B	; 123
    1c72:	75 e0       	ldi	r23, 0x05	; 5
    1c74:	0f c0       	rjmp	.+30     	; 0x1c94 <cmd_get_mdb_state+0x52>
        break;
        case MDB_ENABLED:
            send_str_p(UPLINK_USART,PSTR("ENABLED\r\n"));  
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	61 e7       	ldi	r22, 0x71	; 113
    1c7a:	75 e0       	ldi	r23, 0x05	; 5
    1c7c:	0b c0       	rjmp	.+22     	; 0x1c94 <cmd_get_mdb_state+0x52>
        break;
        case MDB_SESSION_IDLE:
            send_str_p(UPLINK_USART,PSTR("SESSIONIDLE\r\n"));  
    1c7e:	80 e0       	ldi	r24, 0x00	; 0
    1c80:	63 e6       	ldi	r22, 0x63	; 99
    1c82:	75 e0       	ldi	r23, 0x05	; 5
    1c84:	07 c0       	rjmp	.+14     	; 0x1c94 <cmd_get_mdb_state+0x52>
        break;
        case MDB_VENDING:
            send_str_p(UPLINK_USART,PSTR("VEND\r\n"));  
    1c86:	80 e0       	ldi	r24, 0x00	; 0
    1c88:	6c e5       	ldi	r22, 0x5C	; 92
    1c8a:	75 e0       	ldi	r23, 0x05	; 5
    1c8c:	03 c0       	rjmp	.+6      	; 0x1c94 <cmd_get_mdb_state+0x52>
        break;
        case MDB_REVALUE:
            send_str_p(UPLINK_USART,PSTR("REVALUE\r\n"));  
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	62 e5       	ldi	r22, 0x52	; 82
    1c92:	75 e0       	ldi	r23, 0x05	; 5
    1c94:	0e 94 28 07 	call	0xe50	; 0xe50 <send_str_p>
    1c98:	08 95       	ret
        break;
        case MDB_NEGATIVE_VEND:
            send_str_p(UPLINK_USART,PSTR("NEGATIVEVEND\r\n"));  
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	63 e4       	ldi	r22, 0x43	; 67
    1c9e:	75 e0       	ldi	r23, 0x05	; 5
    1ca0:	0e 94 28 07 	call	0xe50	; 0xe50 <send_str_p>
    1ca4:	08 95       	ret

00001ca6 <cmd_help>:
void cmd_reset(char *arg) {
    RESET();
}

void cmd_help(char *arg) {
    send_str_p(UPLINK_USART, PSTR("-----------------------------------------------\r\n"));
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	63 ee       	ldi	r22, 0xE3	; 227
    1caa:	77 e0       	ldi	r23, 0x07	; 7
    1cac:	0e 94 28 07 	call	0xe50	; 0xe50 <send_str_p>
    send_str_p(UPLINK_USART, PSTR("reset:\r\n   reset the Arduino\r\n"));
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	64 ec       	ldi	r22, 0xC4	; 196
    1cb4:	77 e0       	ldi	r23, 0x07	; 7
    1cb6:	0e 94 28 07 	call	0xe50	; 0xe50 <send_str_p>
    send_str_p(UPLINK_USART, PSTR("info:\r\n   shows the VMC infos transfered during the setup process\r\n"));
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	60 e8       	ldi	r22, 0x80	; 128
    1cbe:	77 e0       	ldi	r23, 0x07	; 7
    1cc0:	0e 94 28 07 	call	0xe50	; 0xe50 <send_str_p>
    send_str_p(UPLINK_USART, PSTR("mdb-state:\r\n   displays the current MDB state.\r\n"));
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	6f e4       	ldi	r22, 0x4F	; 79
    1cc8:	77 e0       	ldi	r23, 0x07	; 7
    1cca:	0e 94 28 07 	call	0xe50	; 0xe50 <send_str_p>
    send_str_p(UPLINK_USART, PSTR("start-session <funds>:\r\n   starts a session with <funds> Euro Cents.\r\n"));
    1cce:	80 e0       	ldi	r24, 0x00	; 0
    1cd0:	68 e0       	ldi	r22, 0x08	; 8
    1cd2:	77 e0       	ldi	r23, 0x07	; 7
    1cd4:	0e 94 28 07 	call	0xe50	; 0xe50 <send_str_p>
    send_str_p(UPLINK_USART, PSTR("approve-vend <vend-amount>:\r\n   approves a vend request with <vend-amount> Euro Cents.\r\n"));
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	6f ea       	ldi	r22, 0xAF	; 175
    1cdc:	76 e0       	ldi	r23, 0x06	; 6
    1cde:	0e 94 28 07 	call	0xe50	; 0xe50 <send_str_p>
    send_str_p(UPLINK_USART, PSTR("deny-vend:\r\n   denies a vend request.\r\n"));
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	67 e8       	ldi	r22, 0x87	; 135
    1ce6:	76 e0       	ldi	r23, 0x06	; 6
    1ce8:	0e 94 28 07 	call	0xe50	; 0xe50 <send_str_p>
    send_str_p(UPLINK_USART, PSTR("-----------------------------------------------\r\n"));
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	65 e5       	ldi	r22, 0x55	; 85
    1cf0:	76 e0       	ldi	r23, 0x06	; 6
    1cf2:	0e 94 28 07 	call	0xe50	; 0xe50 <send_str_p>
}
    1cf6:	08 95       	ret

00001cf8 <cmd_approve_vend>:
    } else {
        send_str_p(UPLINK_USART,PSTR("Error: MateDealer not ready for a session\r\n"));  
    }
}

void cmd_approve_vend(char *arg) {
    1cf8:	9c 01       	movw	r18, r24
    if(mdb_state == MDB_VENDING) {
    1cfa:	80 91 62 05 	lds	r24, 0x0562
    1cfe:	84 30       	cpi	r24, 0x04	; 4
    1d00:	71 f4       	brne	.+28     	; 0x1d1e <cmd_approve_vend+0x26>
        session.result.vend_approved = 1;
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	80 93 71 05 	sts	0x0571, r24
        session.result.vend_amount = atoi(arg);
    1d08:	c9 01       	movw	r24, r18
    1d0a:	0e 94 70 10 	call	0x20e0	; 0x20e0 <atoi>
    1d0e:	90 93 74 05 	sts	0x0574, r25
    1d12:	80 93 73 05 	sts	0x0573, r24
        mdb_poll_reply = MDB_REPLY_VEND_APPROVED;
    1d16:	86 e0       	ldi	r24, 0x06	; 6
    1d18:	80 93 63 05 	sts	0x0563, r24
    1d1c:	08 95       	ret
    } else {
        send_str_p(UPLINK_USART,PSTR("Error: MateDealer is not in a suitable state to approve a vend\r\n"));  
    1d1e:	80 e0       	ldi	r24, 0x00	; 0
    1d20:	62 eb       	ldi	r22, 0xB2	; 178
    1d22:	74 e0       	ldi	r23, 0x04	; 4
    1d24:	0e 94 28 07 	call	0xe50	; 0xe50 <send_str_p>
    1d28:	08 95       	ret

00001d2a <cmd_start_session>:
        break;
    }
    
}

void cmd_start_session(char *arg) {
    1d2a:	9c 01       	movw	r18, r24
    if(mdb_state == MDB_ENABLED) {
    1d2c:	80 91 62 05 	lds	r24, 0x0562
    1d30:	82 30       	cpi	r24, 0x02	; 2
    1d32:	b1 f4       	brne	.+44     	; 0x1d60 <cmd_start_session+0x36>
        if(session.start.flag == 0) {
    1d34:	80 91 6e 05 	lds	r24, 0x056E
    1d38:	88 23       	and	r24, r24
    1d3a:	71 f4       	brne	.+28     	; 0x1d58 <cmd_start_session+0x2e>
            session.start.flag = 1;
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	80 93 6e 05 	sts	0x056E, r24
            session.start.funds = atoi(arg);
    1d42:	c9 01       	movw	r24, r18
    1d44:	0e 94 70 10 	call	0x20e0	; 0x20e0 <atoi>
    1d48:	90 93 70 05 	sts	0x0570, r25
    1d4c:	80 93 6f 05 	sts	0x056F, r24
            mdb_poll_reply = MDB_REPLY_BEGIN_SESSION;
    1d50:	84 e0       	ldi	r24, 0x04	; 4
    1d52:	80 93 63 05 	sts	0x0563, r24
    1d56:	08 95       	ret
        } else {
            send_str_p(UPLINK_USART,PSTR("Error: Session is already running\r\n"));  
    1d58:	80 e0       	ldi	r24, 0x00	; 0
    1d5a:	6f e1       	ldi	r22, 0x1F	; 31
    1d5c:	75 e0       	ldi	r23, 0x05	; 5
    1d5e:	03 c0       	rjmp	.+6      	; 0x1d66 <cmd_start_session+0x3c>
        }
    } else {
        send_str_p(UPLINK_USART,PSTR("Error: MateDealer not ready for a session\r\n"));  
    1d60:	80 e0       	ldi	r24, 0x00	; 0
    1d62:	63 ef       	ldi	r22, 0xF3	; 243
    1d64:	74 e0       	ldi	r23, 0x04	; 4
    1d66:	0e 94 28 07 	call	0xe50	; 0xe50 <send_str_p>
    1d6a:	08 95       	ret

00001d6c <cmd_info>:
    send_str_p(UPLINK_USART, PSTR("approve-vend <vend-amount>:\r\n   approves a vend request with <vend-amount> Euro Cents.\r\n"));
    send_str_p(UPLINK_USART, PSTR("deny-vend:\r\n   denies a vend request.\r\n"));
    send_str_p(UPLINK_USART, PSTR("-----------------------------------------------\r\n"));
}

void cmd_info(char *arg) {
    1d6c:	0f 93       	push	r16
    1d6e:	1f 93       	push	r17
    1d70:	df 93       	push	r29
    1d72:	cf 93       	push	r28
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
    1d78:	a8 97       	sbiw	r28, 0x28	; 40
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	de bf       	out	0x3e, r29	; 62
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	cd bf       	out	0x3d, r28	; 61
    if(mdb_state >= MDB_ENABLED) {
    1d84:	80 91 62 05 	lds	r24, 0x0562
    1d88:	82 30       	cpi	r24, 0x02	; 2
    1d8a:	08 f4       	brcc	.+2      	; 0x1d8e <cmd_info+0x22>
    1d8c:	e0 c0       	rjmp	.+448    	; 0x1f4e <cmd_info+0x1e2>
        char buffer[40];
        send_str_p(UPLINK_USART, PSTR("-----------------------------------------------\r\n"));
    1d8e:	80 e0       	ldi	r24, 0x00	; 0
    1d90:	63 e2       	ldi	r22, 0x23	; 35
    1d92:	76 e0       	ldi	r23, 0x06	; 6
    1d94:	0e 94 28 07 	call	0xe50	; 0xe50 <send_str_p>
        send_str_p(UPLINK_USART,PSTR("## VMC configuration data ##\r\n")); 
    1d98:	80 e0       	ldi	r24, 0x00	; 0
    1d9a:	64 e0       	ldi	r22, 0x04	; 4
    1d9c:	76 e0       	ldi	r23, 0x06	; 6
    1d9e:	0e 94 28 07 	call	0xe50	; 0xe50 <send_str_p>
        sprintf(buffer,"VMC feature level:       %d\r\n", vmc.feature_level);
    1da2:	00 d0       	rcall	.+0      	; 0x1da4 <cmd_info+0x38>
    1da4:	00 d0       	rcall	.+0      	; 0x1da6 <cmd_info+0x3a>
    1da6:	ed b7       	in	r30, 0x3d	; 61
    1da8:	fe b7       	in	r31, 0x3e	; 62
    1daa:	31 96       	adiw	r30, 0x01	; 1
    1dac:	8e 01       	movw	r16, r28
    1dae:	0f 5f       	subi	r16, 0xFF	; 255
    1db0:	1f 4f       	sbci	r17, 0xFF	; 255
    1db2:	ad b7       	in	r26, 0x3d	; 61
    1db4:	be b7       	in	r27, 0x3e	; 62
    1db6:	12 96       	adiw	r26, 0x02	; 2
    1db8:	1c 93       	st	X, r17
    1dba:	0e 93       	st	-X, r16
    1dbc:	11 97       	sbiw	r26, 0x01	; 1
    1dbe:	8a e3       	ldi	r24, 0x3A	; 58
    1dc0:	94 e0       	ldi	r25, 0x04	; 4
    1dc2:	93 83       	std	Z+3, r25	; 0x03
    1dc4:	82 83       	std	Z+2, r24	; 0x02
    1dc6:	80 91 66 05 	lds	r24, 0x0566
    1dca:	84 83       	std	Z+4, r24	; 0x04
    1dcc:	15 82       	std	Z+5, r1	; 0x05
    1dce:	0e 94 c1 10 	call	0x2182	; 0x2182 <sprintf>
        send_str(UPLINK_USART,buffer);  
    1dd2:	8d b7       	in	r24, 0x3d	; 61
    1dd4:	9e b7       	in	r25, 0x3e	; 62
    1dd6:	06 96       	adiw	r24, 0x06	; 6
    1dd8:	0f b6       	in	r0, 0x3f	; 63
    1dda:	f8 94       	cli
    1ddc:	9e bf       	out	0x3e, r25	; 62
    1dde:	0f be       	out	0x3f, r0	; 63
    1de0:	8d bf       	out	0x3d, r24	; 61
    1de2:	80 e0       	ldi	r24, 0x00	; 0
    1de4:	b8 01       	movw	r22, r16
    1de6:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <send_str>
        sprintf(buffer,"VMC display columns:     %d\r\n", vmc.dispaly_cols);
    1dea:	00 d0       	rcall	.+0      	; 0x1dec <cmd_info+0x80>
    1dec:	00 d0       	rcall	.+0      	; 0x1dee <cmd_info+0x82>
    1dee:	ed b7       	in	r30, 0x3d	; 61
    1df0:	fe b7       	in	r31, 0x3e	; 62
    1df2:	31 96       	adiw	r30, 0x01	; 1
    1df4:	ad b7       	in	r26, 0x3d	; 61
    1df6:	be b7       	in	r27, 0x3e	; 62
    1df8:	12 96       	adiw	r26, 0x02	; 2
    1dfa:	1c 93       	st	X, r17
    1dfc:	0e 93       	st	-X, r16
    1dfe:	11 97       	sbiw	r26, 0x01	; 1
    1e00:	88 e5       	ldi	r24, 0x58	; 88
    1e02:	94 e0       	ldi	r25, 0x04	; 4
    1e04:	93 83       	std	Z+3, r25	; 0x03
    1e06:	82 83       	std	Z+2, r24	; 0x02
    1e08:	80 91 67 05 	lds	r24, 0x0567
    1e0c:	84 83       	std	Z+4, r24	; 0x04
    1e0e:	15 82       	std	Z+5, r1	; 0x05
    1e10:	0e 94 c1 10 	call	0x2182	; 0x2182 <sprintf>
        send_str(UPLINK_USART,buffer);  
    1e14:	8d b7       	in	r24, 0x3d	; 61
    1e16:	9e b7       	in	r25, 0x3e	; 62
    1e18:	06 96       	adiw	r24, 0x06	; 6
    1e1a:	0f b6       	in	r0, 0x3f	; 63
    1e1c:	f8 94       	cli
    1e1e:	9e bf       	out	0x3e, r25	; 62
    1e20:	0f be       	out	0x3f, r0	; 63
    1e22:	8d bf       	out	0x3d, r24	; 61
    1e24:	80 e0       	ldi	r24, 0x00	; 0
    1e26:	b8 01       	movw	r22, r16
    1e28:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <send_str>
        sprintf(buffer,"VMC display rows:        %d\r\n", vmc.dispaly_rows);
    1e2c:	00 d0       	rcall	.+0      	; 0x1e2e <cmd_info+0xc2>
    1e2e:	00 d0       	rcall	.+0      	; 0x1e30 <cmd_info+0xc4>
    1e30:	ed b7       	in	r30, 0x3d	; 61
    1e32:	fe b7       	in	r31, 0x3e	; 62
    1e34:	31 96       	adiw	r30, 0x01	; 1
    1e36:	ad b7       	in	r26, 0x3d	; 61
    1e38:	be b7       	in	r27, 0x3e	; 62
    1e3a:	12 96       	adiw	r26, 0x02	; 2
    1e3c:	1c 93       	st	X, r17
    1e3e:	0e 93       	st	-X, r16
    1e40:	11 97       	sbiw	r26, 0x01	; 1
    1e42:	86 e7       	ldi	r24, 0x76	; 118
    1e44:	94 e0       	ldi	r25, 0x04	; 4
    1e46:	93 83       	std	Z+3, r25	; 0x03
    1e48:	82 83       	std	Z+2, r24	; 0x02
    1e4a:	80 91 68 05 	lds	r24, 0x0568
    1e4e:	84 83       	std	Z+4, r24	; 0x04
    1e50:	15 82       	std	Z+5, r1	; 0x05
    1e52:	0e 94 c1 10 	call	0x2182	; 0x2182 <sprintf>
        send_str(UPLINK_USART,buffer);  
    1e56:	8d b7       	in	r24, 0x3d	; 61
    1e58:	9e b7       	in	r25, 0x3e	; 62
    1e5a:	06 96       	adiw	r24, 0x06	; 6
    1e5c:	0f b6       	in	r0, 0x3f	; 63
    1e5e:	f8 94       	cli
    1e60:	9e bf       	out	0x3e, r25	; 62
    1e62:	0f be       	out	0x3f, r0	; 63
    1e64:	8d bf       	out	0x3d, r24	; 61
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	b8 01       	movw	r22, r16
    1e6a:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <send_str>
        sprintf(buffer,"VMC display info:        %d\r\n", vmc.dispaly_info);
    1e6e:	00 d0       	rcall	.+0      	; 0x1e70 <cmd_info+0x104>
    1e70:	00 d0       	rcall	.+0      	; 0x1e72 <cmd_info+0x106>
    1e72:	ed b7       	in	r30, 0x3d	; 61
    1e74:	fe b7       	in	r31, 0x3e	; 62
    1e76:	31 96       	adiw	r30, 0x01	; 1
    1e78:	ad b7       	in	r26, 0x3d	; 61
    1e7a:	be b7       	in	r27, 0x3e	; 62
    1e7c:	12 96       	adiw	r26, 0x02	; 2
    1e7e:	1c 93       	st	X, r17
    1e80:	0e 93       	st	-X, r16
    1e82:	11 97       	sbiw	r26, 0x01	; 1
    1e84:	84 e9       	ldi	r24, 0x94	; 148
    1e86:	94 e0       	ldi	r25, 0x04	; 4
    1e88:	93 83       	std	Z+3, r25	; 0x03
    1e8a:	82 83       	std	Z+2, r24	; 0x02
    1e8c:	80 91 69 05 	lds	r24, 0x0569
    1e90:	84 83       	std	Z+4, r24	; 0x04
    1e92:	15 82       	std	Z+5, r1	; 0x05
    1e94:	0e 94 c1 10 	call	0x2182	; 0x2182 <sprintf>
        send_str(UPLINK_USART,buffer);  
    1e98:	8d b7       	in	r24, 0x3d	; 61
    1e9a:	9e b7       	in	r25, 0x3e	; 62
    1e9c:	06 96       	adiw	r24, 0x06	; 6
    1e9e:	0f b6       	in	r0, 0x3f	; 63
    1ea0:	f8 94       	cli
    1ea2:	9e bf       	out	0x3e, r25	; 62
    1ea4:	0f be       	out	0x3f, r0	; 63
    1ea6:	8d bf       	out	0x3d, r24	; 61
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	b8 01       	movw	r22, r16
    1eac:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <send_str>
        send_str_p(UPLINK_USART,PSTR("##    VMC price range     ##\r\n")); 
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	65 ee       	ldi	r22, 0xE5	; 229
    1eb4:	75 e0       	ldi	r23, 0x05	; 5
    1eb6:	0e 94 28 07 	call	0xe50	; 0xe50 <send_str_p>
        sprintf(buffer,"Maximum price:           %d\r\n", price.max);
    1eba:	00 d0       	rcall	.+0      	; 0x1ebc <cmd_info+0x150>
    1ebc:	00 d0       	rcall	.+0      	; 0x1ebe <cmd_info+0x152>
    1ebe:	ed b7       	in	r30, 0x3d	; 61
    1ec0:	fe b7       	in	r31, 0x3e	; 62
    1ec2:	31 96       	adiw	r30, 0x01	; 1
    1ec4:	ad b7       	in	r26, 0x3d	; 61
    1ec6:	be b7       	in	r27, 0x3e	; 62
    1ec8:	12 96       	adiw	r26, 0x02	; 2
    1eca:	1c 93       	st	X, r17
    1ecc:	0e 93       	st	-X, r16
    1ece:	11 97       	sbiw	r26, 0x01	; 1
    1ed0:	82 eb       	ldi	r24, 0xB2	; 178
    1ed2:	94 e0       	ldi	r25, 0x04	; 4
    1ed4:	93 83       	std	Z+3, r25	; 0x03
    1ed6:	82 83       	std	Z+2, r24	; 0x02
    1ed8:	80 91 6a 05 	lds	r24, 0x056A
    1edc:	90 91 6b 05 	lds	r25, 0x056B
    1ee0:	95 83       	std	Z+5, r25	; 0x05
    1ee2:	84 83       	std	Z+4, r24	; 0x04
    1ee4:	0e 94 c1 10 	call	0x2182	; 0x2182 <sprintf>
        send_str(UPLINK_USART,buffer);  
    1ee8:	8d b7       	in	r24, 0x3d	; 61
    1eea:	9e b7       	in	r25, 0x3e	; 62
    1eec:	06 96       	adiw	r24, 0x06	; 6
    1eee:	0f b6       	in	r0, 0x3f	; 63
    1ef0:	f8 94       	cli
    1ef2:	9e bf       	out	0x3e, r25	; 62
    1ef4:	0f be       	out	0x3f, r0	; 63
    1ef6:	8d bf       	out	0x3d, r24	; 61
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	b8 01       	movw	r22, r16
    1efc:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <send_str>
        sprintf(buffer,"Minimum price:           %d\r\n", price.min);
    1f00:	00 d0       	rcall	.+0      	; 0x1f02 <cmd_info+0x196>
    1f02:	00 d0       	rcall	.+0      	; 0x1f04 <cmd_info+0x198>
    1f04:	ed b7       	in	r30, 0x3d	; 61
    1f06:	fe b7       	in	r31, 0x3e	; 62
    1f08:	31 96       	adiw	r30, 0x01	; 1
    1f0a:	ad b7       	in	r26, 0x3d	; 61
    1f0c:	be b7       	in	r27, 0x3e	; 62
    1f0e:	12 96       	adiw	r26, 0x02	; 2
    1f10:	1c 93       	st	X, r17
    1f12:	0e 93       	st	-X, r16
    1f14:	11 97       	sbiw	r26, 0x01	; 1
    1f16:	80 ed       	ldi	r24, 0xD0	; 208
    1f18:	94 e0       	ldi	r25, 0x04	; 4
    1f1a:	93 83       	std	Z+3, r25	; 0x03
    1f1c:	82 83       	std	Z+2, r24	; 0x02
    1f1e:	80 91 6c 05 	lds	r24, 0x056C
    1f22:	90 91 6d 05 	lds	r25, 0x056D
    1f26:	95 83       	std	Z+5, r25	; 0x05
    1f28:	84 83       	std	Z+4, r24	; 0x04
    1f2a:	0e 94 c1 10 	call	0x2182	; 0x2182 <sprintf>
        send_str(UPLINK_USART,buffer);
    1f2e:	8d b7       	in	r24, 0x3d	; 61
    1f30:	9e b7       	in	r25, 0x3e	; 62
    1f32:	06 96       	adiw	r24, 0x06	; 6
    1f34:	0f b6       	in	r0, 0x3f	; 63
    1f36:	f8 94       	cli
    1f38:	9e bf       	out	0x3e, r25	; 62
    1f3a:	0f be       	out	0x3f, r0	; 63
    1f3c:	8d bf       	out	0x3d, r24	; 61
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	b8 01       	movw	r22, r16
    1f42:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <send_str>
        send_str_p(UPLINK_USART,PSTR("-----------------------------------------------\r\n"));  
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	63 eb       	ldi	r22, 0xB3	; 179
    1f4a:	75 e0       	ldi	r23, 0x05	; 5
    1f4c:	03 c0       	rjmp	.+6      	; 0x1f54 <cmd_info+0x1e8>
    } else {
        send_str_p(UPLINK_USART,PSTR("Error: Setup not yet completed!\r\n"));  
    1f4e:	80 e0       	ldi	r24, 0x00	; 0
    1f50:	61 e9       	ldi	r22, 0x91	; 145
    1f52:	75 e0       	ldi	r23, 0x05	; 5
    1f54:	0e 94 28 07 	call	0xe50	; 0xe50 <send_str_p>
    }
}
    1f58:	a8 96       	adiw	r28, 0x28	; 40
    1f5a:	0f b6       	in	r0, 0x3f	; 63
    1f5c:	f8 94       	cli
    1f5e:	de bf       	out	0x3e, r29	; 62
    1f60:	0f be       	out	0x3f, r0	; 63
    1f62:	cd bf       	out	0x3d, r28	; 61
    1f64:	cf 91       	pop	r28
    1f66:	df 91       	pop	r29
    1f68:	1f 91       	pop	r17
    1f6a:	0f 91       	pop	r16
    1f6c:	08 95       	ret

00001f6e <parse_cmd>:
            }
    }
  
}

void parse_cmd(char *cmd) {
    1f6e:	cf 92       	push	r12
    1f70:	df 92       	push	r13
    1f72:	ff 92       	push	r15
    1f74:	0f 93       	push	r16
    1f76:	1f 93       	push	r17
    1f78:	df 93       	push	r29
    1f7a:	cf 93       	push	r28
    1f7c:	0f 92       	push	r0
    1f7e:	0f 92       	push	r0
    1f80:	cd b7       	in	r28, 0x3d	; 61
    1f82:	de b7       	in	r29, 0x3e	; 62
    1f84:	9a 83       	std	Y+2, r25	; 0x02
    1f86:	89 83       	std	Y+1, r24	; 0x01
    
	char *tmp;
	uint8_t index = 0;
     
    // seperate command from arguments
    tmp = strsep(&cmd," "); 
    1f88:	ce 01       	movw	r24, r28
    1f8a:	01 96       	adiw	r24, 0x01	; 1
    1f8c:	6e ee       	ldi	r22, 0xEE	; 238
    1f8e:	74 e0       	ldi	r23, 0x04	; 4
    1f90:	0e 94 a1 10 	call	0x2142	; 0x2142 <strsep>
    1f94:	6c 01       	movw	r12, r24
    1f96:	ff 24       	eor	r15, r15
    1f98:	12 c0       	rjmp	.+36     	; 0x1fbe <parse_cmd+0x50>
    
    // search in command list for the command
	while(strcasecmp(CMD_LIST[index].cmd,tmp)) {
        if(CMD_LIST[index + 1].cmd == NULL) {
    1f9a:	00 0f       	add	r16, r16
    1f9c:	11 1f       	adc	r17, r17
    1f9e:	00 0f       	add	r16, r16
    1fa0:	11 1f       	adc	r17, r17
    1fa2:	0e 5b       	subi	r16, 0xBE	; 190
    1fa4:	1a 4f       	sbci	r17, 0xFA	; 250
    1fa6:	d8 01       	movw	r26, r16
    1fa8:	8d 91       	ld	r24, X+
    1faa:	9c 91       	ld	r25, X
    1fac:	89 2b       	or	r24, r25
    1fae:	31 f4       	brne	.+12     	; 0x1fbc <parse_cmd+0x4e>
            send_str_p(UPLINK_USART,PSTR("Error: Unknown command\r\n"));    
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	65 e1       	ldi	r22, 0x15	; 21
    1fb4:	78 e0       	ldi	r23, 0x08	; 8
    1fb6:	0e 94 28 07 	call	0xe50	; 0xe50 <send_str_p>
    1fba:	1d c0       	rjmp	.+58     	; 0x1ff6 <parse_cmd+0x88>
            return;
        }
        index++;
    1fbc:	f3 94       	inc	r15
     
    // seperate command from arguments
    tmp = strsep(&cmd," "); 
    
    // search in command list for the command
	while(strcasecmp(CMD_LIST[index].cmd,tmp)) {
    1fbe:	0f 2d       	mov	r16, r15
    1fc0:	10 e0       	ldi	r17, 0x00	; 0
    1fc2:	f8 01       	movw	r30, r16
    1fc4:	ee 0f       	add	r30, r30
    1fc6:	ff 1f       	adc	r31, r31
    1fc8:	ee 0f       	add	r30, r30
    1fca:	ff 1f       	adc	r31, r31
    1fcc:	e2 5c       	subi	r30, 0xC2	; 194
    1fce:	fa 4f       	sbci	r31, 0xFA	; 250
    1fd0:	80 81       	ld	r24, Z
    1fd2:	91 81       	ldd	r25, Z+1	; 0x01
    1fd4:	b6 01       	movw	r22, r12
    1fd6:	0e 94 8e 10 	call	0x211c	; 0x211c <strcasecmp>
    1fda:	89 2b       	or	r24, r25
    1fdc:	f1 f6       	brne	.-68     	; 0x1f9a <parse_cmd+0x2c>
        }
        index++;
    }

    // run the command
    CMD_LIST[index].funcptr(cmd);
    1fde:	00 0f       	add	r16, r16
    1fe0:	11 1f       	adc	r17, r17
    1fe2:	00 0f       	add	r16, r16
    1fe4:	11 1f       	adc	r17, r17
    1fe6:	00 5c       	subi	r16, 0xC0	; 192
    1fe8:	1a 4f       	sbci	r17, 0xFA	; 250
    1fea:	d8 01       	movw	r26, r16
    1fec:	ed 91       	ld	r30, X+
    1fee:	fc 91       	ld	r31, X
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
    1ff2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff4:	19 95       	eicall
	return;
  
}
    1ff6:	0f 90       	pop	r0
    1ff8:	0f 90       	pop	r0
    1ffa:	cf 91       	pop	r28
    1ffc:	df 91       	pop	r29
    1ffe:	1f 91       	pop	r17
    2000:	0f 91       	pop	r16
    2002:	ff 90       	pop	r15
    2004:	df 90       	pop	r13
    2006:	cf 90       	pop	r12
    2008:	08 95       	ret

0000200a <uplink_cmd_handler>:
    
    static char cmd[20];
    static uint8_t index = 0;
    
    // No data received, return
    if(buffer_level(UPLINK_USART,RX) < 1) return;
    200a:	80 e0       	ldi	r24, 0x00	; 0
    200c:	60 e0       	ldi	r22, 0x00	; 0
    200e:	0e 94 69 05 	call	0xad2	; 0xad2 <buffer_level>
    2012:	88 23       	and	r24, r24
    2014:	09 f4       	brne	.+2      	; 0x2018 <uplink_cmd_handler+0xe>
    2016:	41 c0       	rjmp	.+130    	; 0x209a <uplink_cmd_handler+0x90>
    
    // flush cmd buffer if cmd is out of a valid length
    if(index == MAX_CMD_LENGTH) {
    2018:	80 91 7e 05 	lds	r24, 0x057E
    201c:	84 31       	cpi	r24, 0x14	; 20
    201e:	11 f4       	brne	.+4      	; 0x2024 <uplink_cmd_handler+0x1a>
        index = 0;
    2020:	10 92 7e 05 	sts	0x057E, r1
    }

    // append char to cmd
    recv_char(UPLINK_USART, &cmd[index]);
    2024:	60 91 7e 05 	lds	r22, 0x057E
    2028:	70 e0       	ldi	r23, 0x00	; 0
    202a:	61 58       	subi	r22, 0x81	; 129
    202c:	7a 4f       	sbci	r23, 0xFA	; 250
    202e:	80 e0       	ldi	r24, 0x00	; 0
    2030:	0e 94 b6 06 	call	0xd6c	; 0xd6c <recv_char>
    
    switch(cmd[index]) {
    2034:	90 91 7e 05 	lds	r25, 0x057E
    2038:	e9 2f       	mov	r30, r25
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	df 01       	movw	r26, r30
    203e:	a1 58       	subi	r26, 0x81	; 129
    2040:	ba 4f       	sbci	r27, 0xFA	; 250
    2042:	8c 91       	ld	r24, X
    2044:	8d 30       	cpi	r24, 0x0D	; 13
    2046:	61 f0       	breq	.+24     	; 0x2060 <uplink_cmd_handler+0x56>
    2048:	8e 30       	cpi	r24, 0x0E	; 14
    204a:	28 f4       	brcc	.+10     	; 0x2056 <uplink_cmd_handler+0x4c>
    204c:	88 30       	cpi	r24, 0x08	; 8
    204e:	81 f0       	breq	.+32     	; 0x2070 <uplink_cmd_handler+0x66>
    2050:	8a 30       	cpi	r24, 0x0A	; 10
    2052:	91 f4       	brne	.+36     	; 0x2078 <uplink_cmd_handler+0x6e>
    2054:	08 95       	ret
    2056:	8b 31       	cpi	r24, 0x1B	; 27
    2058:	69 f0       	breq	.+26     	; 0x2074 <uplink_cmd_handler+0x6a>
    205a:	8b 35       	cpi	r24, 0x5B	; 91
    205c:	69 f4       	brne	.+26     	; 0x2078 <uplink_cmd_handler+0x6e>
    205e:	0a c0       	rjmp	.+20     	; 0x2074 <uplink_cmd_handler+0x6a>
        case '\r':
            // carriage return received, replace with stringtermination and parse
            //send_str(UPLINK_USART, "\r\n");
            cmd[index] = '\0';
    2060:	1c 92       	st	X, r1
            parse_cmd(cmd);
    2062:	8f e7       	ldi	r24, 0x7F	; 127
    2064:	95 e0       	ldi	r25, 0x05	; 5
    2066:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <parse_cmd>
            index = 0;
    206a:	10 92 7e 05 	sts	0x057E, r1
    206e:	08 95       	ret
        case '\n':
            // do nothing, but avoid index from incrementing
        break;
        case '\b':
            // backspace, remove last received char
            index--;
    2070:	91 50       	subi	r25, 0x01	; 1
    2072:	0d c0       	rjmp	.+26     	; 0x208e <uplink_cmd_handler+0x84>
            //send_char(UPLINK_USART, '\b');
        break;
            // char is part of an ESC sequence
        case 0x1B:
        case 0x5B:
            index++;
    2074:	9f 5f       	subi	r25, 0xFF	; 255
    2076:	0b c0       	rjmp	.+22     	; 0x208e <uplink_cmd_handler+0x84>
        break;
            // each other if the last two char was not part of an ESC sequence
        default:
            if(cmd[index - 1] == 0x5B && cmd[index - 2] == 0x1B) {
    2078:	e1 58       	subi	r30, 0x81	; 129
    207a:	fa 4f       	sbci	r31, 0xFA	; 250
    207c:	82 91       	ld	r24, -Z
    207e:	31 96       	adiw	r30, 0x01	; 1
    2080:	8b 35       	cpi	r24, 0x5B	; 91
    2082:	41 f4       	brne	.+16     	; 0x2094 <uplink_cmd_handler+0x8a>
    2084:	32 97       	sbiw	r30, 0x02	; 2
    2086:	80 81       	ld	r24, Z
    2088:	8b 31       	cpi	r24, 0x1B	; 27
    208a:	21 f4       	brne	.+8      	; 0x2094 <uplink_cmd_handler+0x8a>
                    index = index - 2;
    208c:	92 50       	subi	r25, 0x02	; 2
    208e:	90 93 7e 05 	sts	0x057E, r25
    2092:	08 95       	ret
            } else {
                //send_char(UPLINK_USART, cmd[index]);
                index++;
    2094:	9f 5f       	subi	r25, 0xFF	; 255
    2096:	90 93 7e 05 	sts	0x057E, r25
    209a:	08 95       	ret

0000209c <__udivmodsi4>:
    209c:	a1 e2       	ldi	r26, 0x21	; 33
    209e:	1a 2e       	mov	r1, r26
    20a0:	aa 1b       	sub	r26, r26
    20a2:	bb 1b       	sub	r27, r27
    20a4:	fd 01       	movw	r30, r26
    20a6:	0d c0       	rjmp	.+26     	; 0x20c2 <__udivmodsi4_ep>

000020a8 <__udivmodsi4_loop>:
    20a8:	aa 1f       	adc	r26, r26
    20aa:	bb 1f       	adc	r27, r27
    20ac:	ee 1f       	adc	r30, r30
    20ae:	ff 1f       	adc	r31, r31
    20b0:	a2 17       	cp	r26, r18
    20b2:	b3 07       	cpc	r27, r19
    20b4:	e4 07       	cpc	r30, r20
    20b6:	f5 07       	cpc	r31, r21
    20b8:	20 f0       	brcs	.+8      	; 0x20c2 <__udivmodsi4_ep>
    20ba:	a2 1b       	sub	r26, r18
    20bc:	b3 0b       	sbc	r27, r19
    20be:	e4 0b       	sbc	r30, r20
    20c0:	f5 0b       	sbc	r31, r21

000020c2 <__udivmodsi4_ep>:
    20c2:	66 1f       	adc	r22, r22
    20c4:	77 1f       	adc	r23, r23
    20c6:	88 1f       	adc	r24, r24
    20c8:	99 1f       	adc	r25, r25
    20ca:	1a 94       	dec	r1
    20cc:	69 f7       	brne	.-38     	; 0x20a8 <__udivmodsi4_loop>
    20ce:	60 95       	com	r22
    20d0:	70 95       	com	r23
    20d2:	80 95       	com	r24
    20d4:	90 95       	com	r25
    20d6:	9b 01       	movw	r18, r22
    20d8:	ac 01       	movw	r20, r24
    20da:	bd 01       	movw	r22, r26
    20dc:	cf 01       	movw	r24, r30
    20de:	08 95       	ret

000020e0 <atoi>:
    20e0:	fc 01       	movw	r30, r24
    20e2:	88 27       	eor	r24, r24
    20e4:	99 27       	eor	r25, r25
    20e6:	e8 94       	clt
    20e8:	21 91       	ld	r18, Z+
    20ea:	20 32       	cpi	r18, 0x20	; 32
    20ec:	e9 f3       	breq	.-6      	; 0x20e8 <atoi+0x8>
    20ee:	29 30       	cpi	r18, 0x09	; 9
    20f0:	10 f0       	brcs	.+4      	; 0x20f6 <atoi+0x16>
    20f2:	2e 30       	cpi	r18, 0x0E	; 14
    20f4:	c8 f3       	brcs	.-14     	; 0x20e8 <atoi+0x8>
    20f6:	2b 32       	cpi	r18, 0x2B	; 43
    20f8:	41 f0       	breq	.+16     	; 0x210a <atoi+0x2a>
    20fa:	2d 32       	cpi	r18, 0x2D	; 45
    20fc:	39 f4       	brne	.+14     	; 0x210c <atoi+0x2c>
    20fe:	68 94       	set
    2100:	04 c0       	rjmp	.+8      	; 0x210a <atoi+0x2a>
    2102:	0e 94 b9 10 	call	0x2172	; 0x2172 <__mulhi_const_10>
    2106:	82 0f       	add	r24, r18
    2108:	91 1d       	adc	r25, r1
    210a:	21 91       	ld	r18, Z+
    210c:	20 53       	subi	r18, 0x30	; 48
    210e:	2a 30       	cpi	r18, 0x0A	; 10
    2110:	c0 f3       	brcs	.-16     	; 0x2102 <atoi+0x22>
    2112:	1e f4       	brtc	.+6      	; 0x211a <atoi+0x3a>
    2114:	90 95       	com	r25
    2116:	81 95       	neg	r24
    2118:	9f 4f       	sbci	r25, 0xFF	; 255
    211a:	08 95       	ret

0000211c <strcasecmp>:
    211c:	fb 01       	movw	r30, r22
    211e:	dc 01       	movw	r26, r24
    2120:	8d 91       	ld	r24, X+
    2122:	81 34       	cpi	r24, 0x41	; 65
    2124:	1c f0       	brlt	.+6      	; 0x212c <strcasecmp+0x10>
    2126:	8b 35       	cpi	r24, 0x5B	; 91
    2128:	0c f4       	brge	.+2      	; 0x212c <strcasecmp+0x10>
    212a:	80 5e       	subi	r24, 0xE0	; 224
    212c:	61 91       	ld	r22, Z+
    212e:	61 34       	cpi	r22, 0x41	; 65
    2130:	1c f0       	brlt	.+6      	; 0x2138 <strcasecmp+0x1c>
    2132:	6b 35       	cpi	r22, 0x5B	; 91
    2134:	0c f4       	brge	.+2      	; 0x2138 <strcasecmp+0x1c>
    2136:	60 5e       	subi	r22, 0xE0	; 224
    2138:	86 1b       	sub	r24, r22
    213a:	61 11       	cpse	r22, r1
    213c:	89 f3       	breq	.-30     	; 0x2120 <strcasecmp+0x4>
    213e:	99 0b       	sbc	r25, r25
    2140:	08 95       	ret

00002142 <strsep>:
    2142:	fc 01       	movw	r30, r24
    2144:	a0 81       	ld	r26, Z
    2146:	b1 81       	ldd	r27, Z+1	; 0x01
    2148:	ad 01       	movw	r20, r26
    214a:	10 96       	adiw	r26, 0x00	; 0
    214c:	81 f0       	breq	.+32     	; 0x216e <strsep+0x2c>
    214e:	3d 91       	ld	r19, X+
    2150:	fb 01       	movw	r30, r22
    2152:	01 90       	ld	r0, Z+
    2154:	03 16       	cp	r0, r19
    2156:	01 10       	cpse	r0, r1
    2158:	e1 f7       	brne	.-8      	; 0x2152 <strsep+0x10>
    215a:	c9 f7       	brne	.-14     	; 0x214e <strsep+0xc>
    215c:	00 20       	and	r0, r0
    215e:	11 f4       	brne	.+4      	; 0x2164 <strsep+0x22>
    2160:	d0 01       	movw	r26, r0
    2162:	02 c0       	rjmp	.+4      	; 0x2168 <strsep+0x26>
    2164:	1e 92       	st	-X, r1
    2166:	11 96       	adiw	r26, 0x01	; 1
    2168:	fc 01       	movw	r30, r24
    216a:	a0 83       	st	Z, r26
    216c:	b1 83       	std	Z+1, r27	; 0x01
    216e:	ca 01       	movw	r24, r20
    2170:	08 95       	ret

00002172 <__mulhi_const_10>:
    2172:	7a e0       	ldi	r23, 0x0A	; 10
    2174:	97 9f       	mul	r25, r23
    2176:	90 2d       	mov	r25, r0
    2178:	87 9f       	mul	r24, r23
    217a:	80 2d       	mov	r24, r0
    217c:	91 0d       	add	r25, r1
    217e:	11 24       	eor	r1, r1
    2180:	08 95       	ret

00002182 <sprintf>:
    2182:	0f 93       	push	r16
    2184:	1f 93       	push	r17
    2186:	df 93       	push	r29
    2188:	cf 93       	push	r28
    218a:	cd b7       	in	r28, 0x3d	; 61
    218c:	de b7       	in	r29, 0x3e	; 62
    218e:	2e 97       	sbiw	r28, 0x0e	; 14
    2190:	0f b6       	in	r0, 0x3f	; 63
    2192:	f8 94       	cli
    2194:	de bf       	out	0x3e, r29	; 62
    2196:	0f be       	out	0x3f, r0	; 63
    2198:	cd bf       	out	0x3d, r28	; 61
    219a:	0e 89       	ldd	r16, Y+22	; 0x16
    219c:	1f 89       	ldd	r17, Y+23	; 0x17
    219e:	86 e0       	ldi	r24, 0x06	; 6
    21a0:	8c 83       	std	Y+4, r24	; 0x04
    21a2:	1a 83       	std	Y+2, r17	; 0x02
    21a4:	09 83       	std	Y+1, r16	; 0x01
    21a6:	8f ef       	ldi	r24, 0xFF	; 255
    21a8:	9f e7       	ldi	r25, 0x7F	; 127
    21aa:	9e 83       	std	Y+6, r25	; 0x06
    21ac:	8d 83       	std	Y+5, r24	; 0x05
    21ae:	9e 01       	movw	r18, r28
    21b0:	26 5e       	subi	r18, 0xE6	; 230
    21b2:	3f 4f       	sbci	r19, 0xFF	; 255
    21b4:	ce 01       	movw	r24, r28
    21b6:	01 96       	adiw	r24, 0x01	; 1
    21b8:	68 8d       	ldd	r22, Y+24	; 0x18
    21ba:	79 8d       	ldd	r23, Y+25	; 0x19
    21bc:	a9 01       	movw	r20, r18
    21be:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <vfprintf>
    21c2:	2f 81       	ldd	r18, Y+7	; 0x07
    21c4:	38 85       	ldd	r19, Y+8	; 0x08
    21c6:	02 0f       	add	r16, r18
    21c8:	13 1f       	adc	r17, r19
    21ca:	f8 01       	movw	r30, r16
    21cc:	10 82       	st	Z, r1
    21ce:	2e 96       	adiw	r28, 0x0e	; 14
    21d0:	0f b6       	in	r0, 0x3f	; 63
    21d2:	f8 94       	cli
    21d4:	de bf       	out	0x3e, r29	; 62
    21d6:	0f be       	out	0x3f, r0	; 63
    21d8:	cd bf       	out	0x3d, r28	; 61
    21da:	cf 91       	pop	r28
    21dc:	df 91       	pop	r29
    21de:	1f 91       	pop	r17
    21e0:	0f 91       	pop	r16
    21e2:	08 95       	ret

000021e4 <vfprintf>:
    21e4:	2f 92       	push	r2
    21e6:	3f 92       	push	r3
    21e8:	4f 92       	push	r4
    21ea:	5f 92       	push	r5
    21ec:	6f 92       	push	r6
    21ee:	7f 92       	push	r7
    21f0:	8f 92       	push	r8
    21f2:	9f 92       	push	r9
    21f4:	af 92       	push	r10
    21f6:	bf 92       	push	r11
    21f8:	cf 92       	push	r12
    21fa:	df 92       	push	r13
    21fc:	ef 92       	push	r14
    21fe:	ff 92       	push	r15
    2200:	0f 93       	push	r16
    2202:	1f 93       	push	r17
    2204:	df 93       	push	r29
    2206:	cf 93       	push	r28
    2208:	cd b7       	in	r28, 0x3d	; 61
    220a:	de b7       	in	r29, 0x3e	; 62
    220c:	2b 97       	sbiw	r28, 0x0b	; 11
    220e:	0f b6       	in	r0, 0x3f	; 63
    2210:	f8 94       	cli
    2212:	de bf       	out	0x3e, r29	; 62
    2214:	0f be       	out	0x3f, r0	; 63
    2216:	cd bf       	out	0x3d, r28	; 61
    2218:	3c 01       	movw	r6, r24
    221a:	2b 01       	movw	r4, r22
    221c:	5a 01       	movw	r10, r20
    221e:	fc 01       	movw	r30, r24
    2220:	17 82       	std	Z+7, r1	; 0x07
    2222:	16 82       	std	Z+6, r1	; 0x06
    2224:	83 81       	ldd	r24, Z+3	; 0x03
    2226:	81 fd       	sbrc	r24, 1
    2228:	03 c0       	rjmp	.+6      	; 0x2230 <__stack+0x31>
    222a:	6f ef       	ldi	r22, 0xFF	; 255
    222c:	7f ef       	ldi	r23, 0xFF	; 255
    222e:	c6 c1       	rjmp	.+908    	; 0x25bc <__stack+0x3bd>
    2230:	9a e0       	ldi	r25, 0x0A	; 10
    2232:	89 2e       	mov	r8, r25
    2234:	1e 01       	movw	r2, r28
    2236:	08 94       	sec
    2238:	21 1c       	adc	r2, r1
    223a:	31 1c       	adc	r3, r1
    223c:	f3 01       	movw	r30, r6
    223e:	23 81       	ldd	r18, Z+3	; 0x03
    2240:	f2 01       	movw	r30, r4
    2242:	23 fd       	sbrc	r18, 3
    2244:	85 91       	lpm	r24, Z+
    2246:	23 ff       	sbrs	r18, 3
    2248:	81 91       	ld	r24, Z+
    224a:	2f 01       	movw	r4, r30
    224c:	88 23       	and	r24, r24
    224e:	09 f4       	brne	.+2      	; 0x2252 <__stack+0x53>
    2250:	b2 c1       	rjmp	.+868    	; 0x25b6 <__stack+0x3b7>
    2252:	85 32       	cpi	r24, 0x25	; 37
    2254:	39 f4       	brne	.+14     	; 0x2264 <__stack+0x65>
    2256:	23 fd       	sbrc	r18, 3
    2258:	85 91       	lpm	r24, Z+
    225a:	23 ff       	sbrs	r18, 3
    225c:	81 91       	ld	r24, Z+
    225e:	2f 01       	movw	r4, r30
    2260:	85 32       	cpi	r24, 0x25	; 37
    2262:	29 f4       	brne	.+10     	; 0x226e <__stack+0x6f>
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	b3 01       	movw	r22, r6
    2268:	0e 94 0e 13 	call	0x261c	; 0x261c <fputc>
    226c:	e7 cf       	rjmp	.-50     	; 0x223c <__stack+0x3d>
    226e:	98 2f       	mov	r25, r24
    2270:	ff 24       	eor	r15, r15
    2272:	ee 24       	eor	r14, r14
    2274:	99 24       	eor	r9, r9
    2276:	ff e1       	ldi	r31, 0x1F	; 31
    2278:	ff 15       	cp	r31, r15
    227a:	d0 f0       	brcs	.+52     	; 0x22b0 <__stack+0xb1>
    227c:	9b 32       	cpi	r25, 0x2B	; 43
    227e:	69 f0       	breq	.+26     	; 0x229a <__stack+0x9b>
    2280:	9c 32       	cpi	r25, 0x2C	; 44
    2282:	28 f4       	brcc	.+10     	; 0x228e <__stack+0x8f>
    2284:	90 32       	cpi	r25, 0x20	; 32
    2286:	59 f0       	breq	.+22     	; 0x229e <__stack+0x9f>
    2288:	93 32       	cpi	r25, 0x23	; 35
    228a:	91 f4       	brne	.+36     	; 0x22b0 <__stack+0xb1>
    228c:	0e c0       	rjmp	.+28     	; 0x22aa <__stack+0xab>
    228e:	9d 32       	cpi	r25, 0x2D	; 45
    2290:	49 f0       	breq	.+18     	; 0x22a4 <__stack+0xa5>
    2292:	90 33       	cpi	r25, 0x30	; 48
    2294:	69 f4       	brne	.+26     	; 0x22b0 <__stack+0xb1>
    2296:	41 e0       	ldi	r20, 0x01	; 1
    2298:	24 c0       	rjmp	.+72     	; 0x22e2 <__stack+0xe3>
    229a:	52 e0       	ldi	r21, 0x02	; 2
    229c:	f5 2a       	or	r15, r21
    229e:	84 e0       	ldi	r24, 0x04	; 4
    22a0:	f8 2a       	or	r15, r24
    22a2:	28 c0       	rjmp	.+80     	; 0x22f4 <__stack+0xf5>
    22a4:	98 e0       	ldi	r25, 0x08	; 8
    22a6:	f9 2a       	or	r15, r25
    22a8:	25 c0       	rjmp	.+74     	; 0x22f4 <__stack+0xf5>
    22aa:	e0 e1       	ldi	r30, 0x10	; 16
    22ac:	fe 2a       	or	r15, r30
    22ae:	22 c0       	rjmp	.+68     	; 0x22f4 <__stack+0xf5>
    22b0:	f7 fc       	sbrc	r15, 7
    22b2:	29 c0       	rjmp	.+82     	; 0x2306 <__stack+0x107>
    22b4:	89 2f       	mov	r24, r25
    22b6:	80 53       	subi	r24, 0x30	; 48
    22b8:	8a 30       	cpi	r24, 0x0A	; 10
    22ba:	70 f4       	brcc	.+28     	; 0x22d8 <__stack+0xd9>
    22bc:	f6 fe       	sbrs	r15, 6
    22be:	05 c0       	rjmp	.+10     	; 0x22ca <__stack+0xcb>
    22c0:	98 9c       	mul	r9, r8
    22c2:	90 2c       	mov	r9, r0
    22c4:	11 24       	eor	r1, r1
    22c6:	98 0e       	add	r9, r24
    22c8:	15 c0       	rjmp	.+42     	; 0x22f4 <__stack+0xf5>
    22ca:	e8 9c       	mul	r14, r8
    22cc:	e0 2c       	mov	r14, r0
    22ce:	11 24       	eor	r1, r1
    22d0:	e8 0e       	add	r14, r24
    22d2:	f0 e2       	ldi	r31, 0x20	; 32
    22d4:	ff 2a       	or	r15, r31
    22d6:	0e c0       	rjmp	.+28     	; 0x22f4 <__stack+0xf5>
    22d8:	9e 32       	cpi	r25, 0x2E	; 46
    22da:	29 f4       	brne	.+10     	; 0x22e6 <__stack+0xe7>
    22dc:	f6 fc       	sbrc	r15, 6
    22de:	6b c1       	rjmp	.+726    	; 0x25b6 <__stack+0x3b7>
    22e0:	40 e4       	ldi	r20, 0x40	; 64
    22e2:	f4 2a       	or	r15, r20
    22e4:	07 c0       	rjmp	.+14     	; 0x22f4 <__stack+0xf5>
    22e6:	9c 36       	cpi	r25, 0x6C	; 108
    22e8:	19 f4       	brne	.+6      	; 0x22f0 <__stack+0xf1>
    22ea:	50 e8       	ldi	r21, 0x80	; 128
    22ec:	f5 2a       	or	r15, r21
    22ee:	02 c0       	rjmp	.+4      	; 0x22f4 <__stack+0xf5>
    22f0:	98 36       	cpi	r25, 0x68	; 104
    22f2:	49 f4       	brne	.+18     	; 0x2306 <__stack+0x107>
    22f4:	f2 01       	movw	r30, r4
    22f6:	23 fd       	sbrc	r18, 3
    22f8:	95 91       	lpm	r25, Z+
    22fa:	23 ff       	sbrs	r18, 3
    22fc:	91 91       	ld	r25, Z+
    22fe:	2f 01       	movw	r4, r30
    2300:	99 23       	and	r25, r25
    2302:	09 f0       	breq	.+2      	; 0x2306 <__stack+0x107>
    2304:	b8 cf       	rjmp	.-144    	; 0x2276 <__stack+0x77>
    2306:	89 2f       	mov	r24, r25
    2308:	85 54       	subi	r24, 0x45	; 69
    230a:	83 30       	cpi	r24, 0x03	; 3
    230c:	18 f0       	brcs	.+6      	; 0x2314 <__stack+0x115>
    230e:	80 52       	subi	r24, 0x20	; 32
    2310:	83 30       	cpi	r24, 0x03	; 3
    2312:	38 f4       	brcc	.+14     	; 0x2322 <__stack+0x123>
    2314:	44 e0       	ldi	r20, 0x04	; 4
    2316:	50 e0       	ldi	r21, 0x00	; 0
    2318:	a4 0e       	add	r10, r20
    231a:	b5 1e       	adc	r11, r21
    231c:	5f e3       	ldi	r21, 0x3F	; 63
    231e:	59 83       	std	Y+1, r21	; 0x01
    2320:	0f c0       	rjmp	.+30     	; 0x2340 <__stack+0x141>
    2322:	93 36       	cpi	r25, 0x63	; 99
    2324:	31 f0       	breq	.+12     	; 0x2332 <__stack+0x133>
    2326:	93 37       	cpi	r25, 0x73	; 115
    2328:	79 f0       	breq	.+30     	; 0x2348 <__stack+0x149>
    232a:	93 35       	cpi	r25, 0x53	; 83
    232c:	09 f0       	breq	.+2      	; 0x2330 <__stack+0x131>
    232e:	56 c0       	rjmp	.+172    	; 0x23dc <__stack+0x1dd>
    2330:	20 c0       	rjmp	.+64     	; 0x2372 <__stack+0x173>
    2332:	f5 01       	movw	r30, r10
    2334:	80 81       	ld	r24, Z
    2336:	89 83       	std	Y+1, r24	; 0x01
    2338:	42 e0       	ldi	r20, 0x02	; 2
    233a:	50 e0       	ldi	r21, 0x00	; 0
    233c:	a4 0e       	add	r10, r20
    233e:	b5 1e       	adc	r11, r21
    2340:	61 01       	movw	r12, r2
    2342:	01 e0       	ldi	r16, 0x01	; 1
    2344:	10 e0       	ldi	r17, 0x00	; 0
    2346:	12 c0       	rjmp	.+36     	; 0x236c <__stack+0x16d>
    2348:	f5 01       	movw	r30, r10
    234a:	c0 80       	ld	r12, Z
    234c:	d1 80       	ldd	r13, Z+1	; 0x01
    234e:	f6 fc       	sbrc	r15, 6
    2350:	03 c0       	rjmp	.+6      	; 0x2358 <__stack+0x159>
    2352:	6f ef       	ldi	r22, 0xFF	; 255
    2354:	7f ef       	ldi	r23, 0xFF	; 255
    2356:	02 c0       	rjmp	.+4      	; 0x235c <__stack+0x15d>
    2358:	69 2d       	mov	r22, r9
    235a:	70 e0       	ldi	r23, 0x00	; 0
    235c:	42 e0       	ldi	r20, 0x02	; 2
    235e:	50 e0       	ldi	r21, 0x00	; 0
    2360:	a4 0e       	add	r10, r20
    2362:	b5 1e       	adc	r11, r21
    2364:	c6 01       	movw	r24, r12
    2366:	0e 94 03 13 	call	0x2606	; 0x2606 <strnlen>
    236a:	8c 01       	movw	r16, r24
    236c:	5f e7       	ldi	r21, 0x7F	; 127
    236e:	f5 22       	and	r15, r21
    2370:	14 c0       	rjmp	.+40     	; 0x239a <__stack+0x19b>
    2372:	f5 01       	movw	r30, r10
    2374:	c0 80       	ld	r12, Z
    2376:	d1 80       	ldd	r13, Z+1	; 0x01
    2378:	f6 fc       	sbrc	r15, 6
    237a:	03 c0       	rjmp	.+6      	; 0x2382 <__stack+0x183>
    237c:	6f ef       	ldi	r22, 0xFF	; 255
    237e:	7f ef       	ldi	r23, 0xFF	; 255
    2380:	02 c0       	rjmp	.+4      	; 0x2386 <__stack+0x187>
    2382:	69 2d       	mov	r22, r9
    2384:	70 e0       	ldi	r23, 0x00	; 0
    2386:	42 e0       	ldi	r20, 0x02	; 2
    2388:	50 e0       	ldi	r21, 0x00	; 0
    238a:	a4 0e       	add	r10, r20
    238c:	b5 1e       	adc	r11, r21
    238e:	c6 01       	movw	r24, r12
    2390:	0e 94 f8 12 	call	0x25f0	; 0x25f0 <strnlen_P>
    2394:	8c 01       	movw	r16, r24
    2396:	50 e8       	ldi	r21, 0x80	; 128
    2398:	f5 2a       	or	r15, r21
    239a:	f3 fe       	sbrs	r15, 3
    239c:	07 c0       	rjmp	.+14     	; 0x23ac <__stack+0x1ad>
    239e:	1a c0       	rjmp	.+52     	; 0x23d4 <__stack+0x1d5>
    23a0:	80 e2       	ldi	r24, 0x20	; 32
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	b3 01       	movw	r22, r6
    23a6:	0e 94 0e 13 	call	0x261c	; 0x261c <fputc>
    23aa:	ea 94       	dec	r14
    23ac:	8e 2d       	mov	r24, r14
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	08 17       	cp	r16, r24
    23b2:	19 07       	cpc	r17, r25
    23b4:	a8 f3       	brcs	.-22     	; 0x23a0 <__stack+0x1a1>
    23b6:	0e c0       	rjmp	.+28     	; 0x23d4 <__stack+0x1d5>
    23b8:	f6 01       	movw	r30, r12
    23ba:	f7 fc       	sbrc	r15, 7
    23bc:	85 91       	lpm	r24, Z+
    23be:	f7 fe       	sbrs	r15, 7
    23c0:	81 91       	ld	r24, Z+
    23c2:	6f 01       	movw	r12, r30
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	b3 01       	movw	r22, r6
    23c8:	0e 94 0e 13 	call	0x261c	; 0x261c <fputc>
    23cc:	e1 10       	cpse	r14, r1
    23ce:	ea 94       	dec	r14
    23d0:	01 50       	subi	r16, 0x01	; 1
    23d2:	10 40       	sbci	r17, 0x00	; 0
    23d4:	01 15       	cp	r16, r1
    23d6:	11 05       	cpc	r17, r1
    23d8:	79 f7       	brne	.-34     	; 0x23b8 <__stack+0x1b9>
    23da:	ea c0       	rjmp	.+468    	; 0x25b0 <__stack+0x3b1>
    23dc:	94 36       	cpi	r25, 0x64	; 100
    23de:	11 f0       	breq	.+4      	; 0x23e4 <__stack+0x1e5>
    23e0:	99 36       	cpi	r25, 0x69	; 105
    23e2:	69 f5       	brne	.+90     	; 0x243e <__stack+0x23f>
    23e4:	f7 fe       	sbrs	r15, 7
    23e6:	08 c0       	rjmp	.+16     	; 0x23f8 <__stack+0x1f9>
    23e8:	f5 01       	movw	r30, r10
    23ea:	20 81       	ld	r18, Z
    23ec:	31 81       	ldd	r19, Z+1	; 0x01
    23ee:	42 81       	ldd	r20, Z+2	; 0x02
    23f0:	53 81       	ldd	r21, Z+3	; 0x03
    23f2:	84 e0       	ldi	r24, 0x04	; 4
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	0a c0       	rjmp	.+20     	; 0x240c <__stack+0x20d>
    23f8:	f5 01       	movw	r30, r10
    23fa:	80 81       	ld	r24, Z
    23fc:	91 81       	ldd	r25, Z+1	; 0x01
    23fe:	9c 01       	movw	r18, r24
    2400:	44 27       	eor	r20, r20
    2402:	37 fd       	sbrc	r19, 7
    2404:	40 95       	com	r20
    2406:	54 2f       	mov	r21, r20
    2408:	82 e0       	ldi	r24, 0x02	; 2
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	a8 0e       	add	r10, r24
    240e:	b9 1e       	adc	r11, r25
    2410:	9f e6       	ldi	r25, 0x6F	; 111
    2412:	f9 22       	and	r15, r25
    2414:	57 ff       	sbrs	r21, 7
    2416:	09 c0       	rjmp	.+18     	; 0x242a <__stack+0x22b>
    2418:	50 95       	com	r21
    241a:	40 95       	com	r20
    241c:	30 95       	com	r19
    241e:	21 95       	neg	r18
    2420:	3f 4f       	sbci	r19, 0xFF	; 255
    2422:	4f 4f       	sbci	r20, 0xFF	; 255
    2424:	5f 4f       	sbci	r21, 0xFF	; 255
    2426:	e0 e8       	ldi	r30, 0x80	; 128
    2428:	fe 2a       	or	r15, r30
    242a:	ca 01       	movw	r24, r20
    242c:	b9 01       	movw	r22, r18
    242e:	a1 01       	movw	r20, r2
    2430:	2a e0       	ldi	r18, 0x0A	; 10
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	0e 94 3a 13 	call	0x2674	; 0x2674 <__ultoa_invert>
    2438:	d8 2e       	mov	r13, r24
    243a:	d2 18       	sub	r13, r2
    243c:	40 c0       	rjmp	.+128    	; 0x24be <__stack+0x2bf>
    243e:	95 37       	cpi	r25, 0x75	; 117
    2440:	29 f4       	brne	.+10     	; 0x244c <__stack+0x24d>
    2442:	1f 2d       	mov	r17, r15
    2444:	1f 7e       	andi	r17, 0xEF	; 239
    2446:	2a e0       	ldi	r18, 0x0A	; 10
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	1d c0       	rjmp	.+58     	; 0x2486 <__stack+0x287>
    244c:	1f 2d       	mov	r17, r15
    244e:	19 7f       	andi	r17, 0xF9	; 249
    2450:	9f 36       	cpi	r25, 0x6F	; 111
    2452:	61 f0       	breq	.+24     	; 0x246c <__stack+0x26d>
    2454:	90 37       	cpi	r25, 0x70	; 112
    2456:	20 f4       	brcc	.+8      	; 0x2460 <__stack+0x261>
    2458:	98 35       	cpi	r25, 0x58	; 88
    245a:	09 f0       	breq	.+2      	; 0x245e <__stack+0x25f>
    245c:	ac c0       	rjmp	.+344    	; 0x25b6 <__stack+0x3b7>
    245e:	0f c0       	rjmp	.+30     	; 0x247e <__stack+0x27f>
    2460:	90 37       	cpi	r25, 0x70	; 112
    2462:	39 f0       	breq	.+14     	; 0x2472 <__stack+0x273>
    2464:	98 37       	cpi	r25, 0x78	; 120
    2466:	09 f0       	breq	.+2      	; 0x246a <__stack+0x26b>
    2468:	a6 c0       	rjmp	.+332    	; 0x25b6 <__stack+0x3b7>
    246a:	04 c0       	rjmp	.+8      	; 0x2474 <__stack+0x275>
    246c:	28 e0       	ldi	r18, 0x08	; 8
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	0a c0       	rjmp	.+20     	; 0x2486 <__stack+0x287>
    2472:	10 61       	ori	r17, 0x10	; 16
    2474:	14 fd       	sbrc	r17, 4
    2476:	14 60       	ori	r17, 0x04	; 4
    2478:	20 e1       	ldi	r18, 0x10	; 16
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	04 c0       	rjmp	.+8      	; 0x2486 <__stack+0x287>
    247e:	14 fd       	sbrc	r17, 4
    2480:	16 60       	ori	r17, 0x06	; 6
    2482:	20 e1       	ldi	r18, 0x10	; 16
    2484:	32 e0       	ldi	r19, 0x02	; 2
    2486:	17 ff       	sbrs	r17, 7
    2488:	08 c0       	rjmp	.+16     	; 0x249a <__stack+0x29b>
    248a:	f5 01       	movw	r30, r10
    248c:	60 81       	ld	r22, Z
    248e:	71 81       	ldd	r23, Z+1	; 0x01
    2490:	82 81       	ldd	r24, Z+2	; 0x02
    2492:	93 81       	ldd	r25, Z+3	; 0x03
    2494:	44 e0       	ldi	r20, 0x04	; 4
    2496:	50 e0       	ldi	r21, 0x00	; 0
    2498:	08 c0       	rjmp	.+16     	; 0x24aa <__stack+0x2ab>
    249a:	f5 01       	movw	r30, r10
    249c:	80 81       	ld	r24, Z
    249e:	91 81       	ldd	r25, Z+1	; 0x01
    24a0:	bc 01       	movw	r22, r24
    24a2:	80 e0       	ldi	r24, 0x00	; 0
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	42 e0       	ldi	r20, 0x02	; 2
    24a8:	50 e0       	ldi	r21, 0x00	; 0
    24aa:	a4 0e       	add	r10, r20
    24ac:	b5 1e       	adc	r11, r21
    24ae:	a1 01       	movw	r20, r2
    24b0:	0e 94 3a 13 	call	0x2674	; 0x2674 <__ultoa_invert>
    24b4:	d8 2e       	mov	r13, r24
    24b6:	d2 18       	sub	r13, r2
    24b8:	8f e7       	ldi	r24, 0x7F	; 127
    24ba:	f8 2e       	mov	r15, r24
    24bc:	f1 22       	and	r15, r17
    24be:	f6 fe       	sbrs	r15, 6
    24c0:	0b c0       	rjmp	.+22     	; 0x24d8 <__stack+0x2d9>
    24c2:	5e ef       	ldi	r21, 0xFE	; 254
    24c4:	f5 22       	and	r15, r21
    24c6:	d9 14       	cp	r13, r9
    24c8:	38 f4       	brcc	.+14     	; 0x24d8 <__stack+0x2d9>
    24ca:	f4 fe       	sbrs	r15, 4
    24cc:	07 c0       	rjmp	.+14     	; 0x24dc <__stack+0x2dd>
    24ce:	f2 fc       	sbrc	r15, 2
    24d0:	05 c0       	rjmp	.+10     	; 0x24dc <__stack+0x2dd>
    24d2:	8f ee       	ldi	r24, 0xEF	; 239
    24d4:	f8 22       	and	r15, r24
    24d6:	02 c0       	rjmp	.+4      	; 0x24dc <__stack+0x2dd>
    24d8:	1d 2d       	mov	r17, r13
    24da:	01 c0       	rjmp	.+2      	; 0x24de <__stack+0x2df>
    24dc:	19 2d       	mov	r17, r9
    24de:	f4 fe       	sbrs	r15, 4
    24e0:	0d c0       	rjmp	.+26     	; 0x24fc <__stack+0x2fd>
    24e2:	fe 01       	movw	r30, r28
    24e4:	ed 0d       	add	r30, r13
    24e6:	f1 1d       	adc	r31, r1
    24e8:	80 81       	ld	r24, Z
    24ea:	80 33       	cpi	r24, 0x30	; 48
    24ec:	19 f4       	brne	.+6      	; 0x24f4 <__stack+0x2f5>
    24ee:	99 ee       	ldi	r25, 0xE9	; 233
    24f0:	f9 22       	and	r15, r25
    24f2:	08 c0       	rjmp	.+16     	; 0x2504 <__stack+0x305>
    24f4:	1f 5f       	subi	r17, 0xFF	; 255
    24f6:	f2 fe       	sbrs	r15, 2
    24f8:	05 c0       	rjmp	.+10     	; 0x2504 <__stack+0x305>
    24fa:	03 c0       	rjmp	.+6      	; 0x2502 <__stack+0x303>
    24fc:	8f 2d       	mov	r24, r15
    24fe:	86 78       	andi	r24, 0x86	; 134
    2500:	09 f0       	breq	.+2      	; 0x2504 <__stack+0x305>
    2502:	1f 5f       	subi	r17, 0xFF	; 255
    2504:	0f 2d       	mov	r16, r15
    2506:	f3 fc       	sbrc	r15, 3
    2508:	14 c0       	rjmp	.+40     	; 0x2532 <__stack+0x333>
    250a:	f0 fe       	sbrs	r15, 0
    250c:	0f c0       	rjmp	.+30     	; 0x252c <__stack+0x32d>
    250e:	1e 15       	cp	r17, r14
    2510:	10 f0       	brcs	.+4      	; 0x2516 <__stack+0x317>
    2512:	9d 2c       	mov	r9, r13
    2514:	0b c0       	rjmp	.+22     	; 0x252c <__stack+0x32d>
    2516:	9d 2c       	mov	r9, r13
    2518:	9e 0c       	add	r9, r14
    251a:	91 1a       	sub	r9, r17
    251c:	1e 2d       	mov	r17, r14
    251e:	06 c0       	rjmp	.+12     	; 0x252c <__stack+0x32d>
    2520:	80 e2       	ldi	r24, 0x20	; 32
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	b3 01       	movw	r22, r6
    2526:	0e 94 0e 13 	call	0x261c	; 0x261c <fputc>
    252a:	1f 5f       	subi	r17, 0xFF	; 255
    252c:	1e 15       	cp	r17, r14
    252e:	c0 f3       	brcs	.-16     	; 0x2520 <__stack+0x321>
    2530:	04 c0       	rjmp	.+8      	; 0x253a <__stack+0x33b>
    2532:	1e 15       	cp	r17, r14
    2534:	10 f4       	brcc	.+4      	; 0x253a <__stack+0x33b>
    2536:	e1 1a       	sub	r14, r17
    2538:	01 c0       	rjmp	.+2      	; 0x253c <__stack+0x33d>
    253a:	ee 24       	eor	r14, r14
    253c:	04 ff       	sbrs	r16, 4
    253e:	0f c0       	rjmp	.+30     	; 0x255e <__stack+0x35f>
    2540:	80 e3       	ldi	r24, 0x30	; 48
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	b3 01       	movw	r22, r6
    2546:	0e 94 0e 13 	call	0x261c	; 0x261c <fputc>
    254a:	02 ff       	sbrs	r16, 2
    254c:	1d c0       	rjmp	.+58     	; 0x2588 <__stack+0x389>
    254e:	01 fd       	sbrc	r16, 1
    2550:	03 c0       	rjmp	.+6      	; 0x2558 <__stack+0x359>
    2552:	88 e7       	ldi	r24, 0x78	; 120
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	0e c0       	rjmp	.+28     	; 0x2574 <__stack+0x375>
    2558:	88 e5       	ldi	r24, 0x58	; 88
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	0b c0       	rjmp	.+22     	; 0x2574 <__stack+0x375>
    255e:	80 2f       	mov	r24, r16
    2560:	86 78       	andi	r24, 0x86	; 134
    2562:	91 f0       	breq	.+36     	; 0x2588 <__stack+0x389>
    2564:	01 ff       	sbrs	r16, 1
    2566:	02 c0       	rjmp	.+4      	; 0x256c <__stack+0x36d>
    2568:	8b e2       	ldi	r24, 0x2B	; 43
    256a:	01 c0       	rjmp	.+2      	; 0x256e <__stack+0x36f>
    256c:	80 e2       	ldi	r24, 0x20	; 32
    256e:	f7 fc       	sbrc	r15, 7
    2570:	8d e2       	ldi	r24, 0x2D	; 45
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	b3 01       	movw	r22, r6
    2576:	0e 94 0e 13 	call	0x261c	; 0x261c <fputc>
    257a:	06 c0       	rjmp	.+12     	; 0x2588 <__stack+0x389>
    257c:	80 e3       	ldi	r24, 0x30	; 48
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	b3 01       	movw	r22, r6
    2582:	0e 94 0e 13 	call	0x261c	; 0x261c <fputc>
    2586:	9a 94       	dec	r9
    2588:	d9 14       	cp	r13, r9
    258a:	c0 f3       	brcs	.-16     	; 0x257c <__stack+0x37d>
    258c:	da 94       	dec	r13
    258e:	f1 01       	movw	r30, r2
    2590:	ed 0d       	add	r30, r13
    2592:	f1 1d       	adc	r31, r1
    2594:	80 81       	ld	r24, Z
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	b3 01       	movw	r22, r6
    259a:	0e 94 0e 13 	call	0x261c	; 0x261c <fputc>
    259e:	dd 20       	and	r13, r13
    25a0:	a9 f7       	brne	.-22     	; 0x258c <__stack+0x38d>
    25a2:	06 c0       	rjmp	.+12     	; 0x25b0 <__stack+0x3b1>
    25a4:	80 e2       	ldi	r24, 0x20	; 32
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	b3 01       	movw	r22, r6
    25aa:	0e 94 0e 13 	call	0x261c	; 0x261c <fputc>
    25ae:	ea 94       	dec	r14
    25b0:	ee 20       	and	r14, r14
    25b2:	c1 f7       	brne	.-16     	; 0x25a4 <__stack+0x3a5>
    25b4:	43 ce       	rjmp	.-890    	; 0x223c <__stack+0x3d>
    25b6:	f3 01       	movw	r30, r6
    25b8:	66 81       	ldd	r22, Z+6	; 0x06
    25ba:	77 81       	ldd	r23, Z+7	; 0x07
    25bc:	cb 01       	movw	r24, r22
    25be:	2b 96       	adiw	r28, 0x0b	; 11
    25c0:	0f b6       	in	r0, 0x3f	; 63
    25c2:	f8 94       	cli
    25c4:	de bf       	out	0x3e, r29	; 62
    25c6:	0f be       	out	0x3f, r0	; 63
    25c8:	cd bf       	out	0x3d, r28	; 61
    25ca:	cf 91       	pop	r28
    25cc:	df 91       	pop	r29
    25ce:	1f 91       	pop	r17
    25d0:	0f 91       	pop	r16
    25d2:	ff 90       	pop	r15
    25d4:	ef 90       	pop	r14
    25d6:	df 90       	pop	r13
    25d8:	cf 90       	pop	r12
    25da:	bf 90       	pop	r11
    25dc:	af 90       	pop	r10
    25de:	9f 90       	pop	r9
    25e0:	8f 90       	pop	r8
    25e2:	7f 90       	pop	r7
    25e4:	6f 90       	pop	r6
    25e6:	5f 90       	pop	r5
    25e8:	4f 90       	pop	r4
    25ea:	3f 90       	pop	r3
    25ec:	2f 90       	pop	r2
    25ee:	08 95       	ret

000025f0 <strnlen_P>:
    25f0:	fc 01       	movw	r30, r24
    25f2:	05 90       	lpm	r0, Z+
    25f4:	61 50       	subi	r22, 0x01	; 1
    25f6:	70 40       	sbci	r23, 0x00	; 0
    25f8:	01 10       	cpse	r0, r1
    25fa:	d8 f7       	brcc	.-10     	; 0x25f2 <strnlen_P+0x2>
    25fc:	80 95       	com	r24
    25fe:	90 95       	com	r25
    2600:	8e 0f       	add	r24, r30
    2602:	9f 1f       	adc	r25, r31
    2604:	08 95       	ret

00002606 <strnlen>:
    2606:	fc 01       	movw	r30, r24
    2608:	61 50       	subi	r22, 0x01	; 1
    260a:	70 40       	sbci	r23, 0x00	; 0
    260c:	01 90       	ld	r0, Z+
    260e:	01 10       	cpse	r0, r1
    2610:	d8 f7       	brcc	.-10     	; 0x2608 <strnlen+0x2>
    2612:	80 95       	com	r24
    2614:	90 95       	com	r25
    2616:	8e 0f       	add	r24, r30
    2618:	9f 1f       	adc	r25, r31
    261a:	08 95       	ret

0000261c <fputc>:
    261c:	0f 93       	push	r16
    261e:	1f 93       	push	r17
    2620:	cf 93       	push	r28
    2622:	df 93       	push	r29
    2624:	8c 01       	movw	r16, r24
    2626:	eb 01       	movw	r28, r22
    2628:	8b 81       	ldd	r24, Y+3	; 0x03
    262a:	81 ff       	sbrs	r24, 1
    262c:	1b c0       	rjmp	.+54     	; 0x2664 <fputc+0x48>
    262e:	82 ff       	sbrs	r24, 2
    2630:	0d c0       	rjmp	.+26     	; 0x264c <fputc+0x30>
    2632:	2e 81       	ldd	r18, Y+6	; 0x06
    2634:	3f 81       	ldd	r19, Y+7	; 0x07
    2636:	8c 81       	ldd	r24, Y+4	; 0x04
    2638:	9d 81       	ldd	r25, Y+5	; 0x05
    263a:	28 17       	cp	r18, r24
    263c:	39 07       	cpc	r19, r25
    263e:	64 f4       	brge	.+24     	; 0x2658 <fputc+0x3c>
    2640:	e8 81       	ld	r30, Y
    2642:	f9 81       	ldd	r31, Y+1	; 0x01
    2644:	01 93       	st	Z+, r16
    2646:	f9 83       	std	Y+1, r31	; 0x01
    2648:	e8 83       	st	Y, r30
    264a:	06 c0       	rjmp	.+12     	; 0x2658 <fputc+0x3c>
    264c:	e8 85       	ldd	r30, Y+8	; 0x08
    264e:	f9 85       	ldd	r31, Y+9	; 0x09
    2650:	80 2f       	mov	r24, r16
    2652:	19 95       	eicall
    2654:	89 2b       	or	r24, r25
    2656:	31 f4       	brne	.+12     	; 0x2664 <fputc+0x48>
    2658:	8e 81       	ldd	r24, Y+6	; 0x06
    265a:	9f 81       	ldd	r25, Y+7	; 0x07
    265c:	01 96       	adiw	r24, 0x01	; 1
    265e:	9f 83       	std	Y+7, r25	; 0x07
    2660:	8e 83       	std	Y+6, r24	; 0x06
    2662:	02 c0       	rjmp	.+4      	; 0x2668 <fputc+0x4c>
    2664:	0f ef       	ldi	r16, 0xFF	; 255
    2666:	1f ef       	ldi	r17, 0xFF	; 255
    2668:	c8 01       	movw	r24, r16
    266a:	df 91       	pop	r29
    266c:	cf 91       	pop	r28
    266e:	1f 91       	pop	r17
    2670:	0f 91       	pop	r16
    2672:	08 95       	ret

00002674 <__ultoa_invert>:
    2674:	fa 01       	movw	r30, r20
    2676:	aa 27       	eor	r26, r26
    2678:	28 30       	cpi	r18, 0x08	; 8
    267a:	51 f1       	breq	.+84     	; 0x26d0 <__ultoa_invert+0x5c>
    267c:	20 31       	cpi	r18, 0x10	; 16
    267e:	81 f1       	breq	.+96     	; 0x26e0 <__ultoa_invert+0x6c>
    2680:	e8 94       	clt
    2682:	6f 93       	push	r22
    2684:	6e 7f       	andi	r22, 0xFE	; 254
    2686:	6e 5f       	subi	r22, 0xFE	; 254
    2688:	7f 4f       	sbci	r23, 0xFF	; 255
    268a:	8f 4f       	sbci	r24, 0xFF	; 255
    268c:	9f 4f       	sbci	r25, 0xFF	; 255
    268e:	af 4f       	sbci	r26, 0xFF	; 255
    2690:	b1 e0       	ldi	r27, 0x01	; 1
    2692:	3e d0       	rcall	.+124    	; 0x2710 <__ultoa_invert+0x9c>
    2694:	b4 e0       	ldi	r27, 0x04	; 4
    2696:	3c d0       	rcall	.+120    	; 0x2710 <__ultoa_invert+0x9c>
    2698:	67 0f       	add	r22, r23
    269a:	78 1f       	adc	r23, r24
    269c:	89 1f       	adc	r24, r25
    269e:	9a 1f       	adc	r25, r26
    26a0:	a1 1d       	adc	r26, r1
    26a2:	68 0f       	add	r22, r24
    26a4:	79 1f       	adc	r23, r25
    26a6:	8a 1f       	adc	r24, r26
    26a8:	91 1d       	adc	r25, r1
    26aa:	a1 1d       	adc	r26, r1
    26ac:	6a 0f       	add	r22, r26
    26ae:	71 1d       	adc	r23, r1
    26b0:	81 1d       	adc	r24, r1
    26b2:	91 1d       	adc	r25, r1
    26b4:	a1 1d       	adc	r26, r1
    26b6:	20 d0       	rcall	.+64     	; 0x26f8 <__ultoa_invert+0x84>
    26b8:	09 f4       	brne	.+2      	; 0x26bc <__ultoa_invert+0x48>
    26ba:	68 94       	set
    26bc:	3f 91       	pop	r19
    26be:	2a e0       	ldi	r18, 0x0A	; 10
    26c0:	26 9f       	mul	r18, r22
    26c2:	11 24       	eor	r1, r1
    26c4:	30 19       	sub	r19, r0
    26c6:	30 5d       	subi	r19, 0xD0	; 208
    26c8:	31 93       	st	Z+, r19
    26ca:	de f6       	brtc	.-74     	; 0x2682 <__ultoa_invert+0xe>
    26cc:	cf 01       	movw	r24, r30
    26ce:	08 95       	ret
    26d0:	46 2f       	mov	r20, r22
    26d2:	47 70       	andi	r20, 0x07	; 7
    26d4:	40 5d       	subi	r20, 0xD0	; 208
    26d6:	41 93       	st	Z+, r20
    26d8:	b3 e0       	ldi	r27, 0x03	; 3
    26da:	0f d0       	rcall	.+30     	; 0x26fa <__ultoa_invert+0x86>
    26dc:	c9 f7       	brne	.-14     	; 0x26d0 <__ultoa_invert+0x5c>
    26de:	f6 cf       	rjmp	.-20     	; 0x26cc <__ultoa_invert+0x58>
    26e0:	46 2f       	mov	r20, r22
    26e2:	4f 70       	andi	r20, 0x0F	; 15
    26e4:	40 5d       	subi	r20, 0xD0	; 208
    26e6:	4a 33       	cpi	r20, 0x3A	; 58
    26e8:	18 f0       	brcs	.+6      	; 0x26f0 <__ultoa_invert+0x7c>
    26ea:	49 5d       	subi	r20, 0xD9	; 217
    26ec:	31 fd       	sbrc	r19, 1
    26ee:	40 52       	subi	r20, 0x20	; 32
    26f0:	41 93       	st	Z+, r20
    26f2:	02 d0       	rcall	.+4      	; 0x26f8 <__ultoa_invert+0x84>
    26f4:	a9 f7       	brne	.-22     	; 0x26e0 <__ultoa_invert+0x6c>
    26f6:	ea cf       	rjmp	.-44     	; 0x26cc <__ultoa_invert+0x58>
    26f8:	b4 e0       	ldi	r27, 0x04	; 4
    26fa:	a6 95       	lsr	r26
    26fc:	97 95       	ror	r25
    26fe:	87 95       	ror	r24
    2700:	77 95       	ror	r23
    2702:	67 95       	ror	r22
    2704:	ba 95       	dec	r27
    2706:	c9 f7       	brne	.-14     	; 0x26fa <__ultoa_invert+0x86>
    2708:	00 97       	sbiw	r24, 0x00	; 0
    270a:	61 05       	cpc	r22, r1
    270c:	71 05       	cpc	r23, r1
    270e:	08 95       	ret
    2710:	9b 01       	movw	r18, r22
    2712:	ac 01       	movw	r20, r24
    2714:	0a 2e       	mov	r0, r26
    2716:	06 94       	lsr	r0
    2718:	57 95       	ror	r21
    271a:	47 95       	ror	r20
    271c:	37 95       	ror	r19
    271e:	27 95       	ror	r18
    2720:	ba 95       	dec	r27
    2722:	c9 f7       	brne	.-14     	; 0x2716 <__ultoa_invert+0xa2>
    2724:	62 0f       	add	r22, r18
    2726:	73 1f       	adc	r23, r19
    2728:	84 1f       	adc	r24, r20
    272a:	95 1f       	adc	r25, r21
    272c:	a0 1d       	adc	r26, r0
    272e:	08 95       	ret

00002730 <_exit>:
    2730:	f8 94       	cli

00002732 <__stop_program>:
    2732:	ff cf       	rjmp	.-2      	; 0x2732 <__stop_program>
